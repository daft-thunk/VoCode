[{"command":"JSONToFile","code":"### JSONToFile\n\nWrites a JSON object to a file.\n\nUse `fs.writeFile()`, template literals and `JSON.stringify()` to write a `json` object to a `.json` file.\n\n```js\nconst fs = require('fs');\nconst JSONToFile = (obj, filename) =>\n  fs.writeFile(`${filename}.json`, JSON.stringify(obj, null, 2));\n```\n\n```js\nJSONToFile({ test: 'is passed' }, 'testJsonFile'); // writes the object to 'testJsonFile.json'\n```\n","description":"### JSONToFile\n\nWrites a JSON object to a file.\n\nUse `fs.writeFile()`, template literals and `JSON.stringify()` to write a `json` object to a `.json` file.\n\n"},{"command":"RGBToHex","code":"### RGBToHex\n\nConverts the values of RGB components to a color code.\n\nConvert given RGB parameters to hexadecimal string using bitwise left-shift operator (`<<`) and `toString(16)`, then `String.padStart(6,'0')` to get a 6-digit hexadecimal value.\n\n```js\nconst RGBToHex = (r, g, b) => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0');\n```\n\n```js\nRGBToHex(255, 165, 1); // 'ffa501'\n```\n","description":"### RGBToHex\n\nConverts the values of RGB components to a color code.\n\nConvert given RGB parameters to hexadecimal string using bitwise left-shift operator (`<<`) and `toString(16)`, then `String.padStart(6,'0')` to get a 6-digit hexadecimal value.\n\n"},{"command":"URLJoin","code":"### URLJoin\n\nJoins all given URL segments together, then normalizes the resulting URL.\n\nUse `String.join('/')` to combine URL segments, then a series of `String.replace()` calls with various regexps to normalize the resulting URL (remove double slashes, add proper slashes for protocol, remove slashes before parameters, combine parameters with `'&'` and normalize first parameter delimiter).\n\n```js\nconst URLJoin = (...args) =>\n  args\n    .join('/')\n    .replace(/[\\/]+/g, '/')\n    .replace(/^(.+):\\//, '$1://')\n    .replace(/^file:/, 'file:/')\n    .replace(/\\/(\\?|&|#[^!])/g, '$1')\n    .replace(/\\?/g, '&')\n    .replace('&', '?');\n```\n\n```js\nURLJoin('http://www.google.com', 'a', '/b/cd', '?foo=123', '?bar=foo'); // 'http://www.google.com/a/b/cd?foo=123&bar=foo'\n```\n","description":"### URLJoin\n\nJoins all given URL segments together, then normalizes the resulting URL.\n\nUse `String.join('/')` to combine URL segments, then a series of `String.replace()` calls with various regexps to normalize the resulting URL (remove double slashes, add proper slashes for protocol, remove slashes before parameters, combine parameters with `'&'` and normalize first parameter delimiter).\n\n"},{"command":"UUIDGeneratorBrowser","code":"### UUIDGeneratorBrowser\n\nGenerates a UUID in a browser.\n\nUse `crypto` API to generate a UUID, compliant with [RFC4122](https://www.ietf.org/rfc/rfc4122.txt) version 4.\n\n```js\nconst UUIDGeneratorBrowser = () =>\n  ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n  );\n```\n\n```js\nUUIDGeneratorBrowser(); // '7982fcfe-5721-4632-bede-6000885be57d'\n```\n","description":"### UUIDGeneratorBrowser\n\nGenerates a UUID in a browser.\n\nUse `crypto` API to generate a UUID, compliant with [RFC4122](https://www.ietf.org/rfc/rfc4122.txt) version 4.\n\n"},{"command":"UUIDGeneratorNode","code":"### UUIDGeneratorNode\n\nGenerates a UUID in Node.JS.\n\nUse `crypto` API to generate a UUID, compliant with [RFC4122](https://www.ietf.org/rfc/rfc4122.txt) version 4.\n\n```js\nconst crypto = require('crypto');\nconst UUIDGeneratorNode = () =>\n  ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (c ^ (crypto.randomBytes(1)[0] & (15 >> (c / 4)))).toString(16)\n  );\n```\n\n```js\nUUIDGeneratorNode(); // '79c7c136-60ee-40a2-beb2-856f1feabefc'\n```\n","description":"### UUIDGeneratorNode\n\nGenerates a UUID in Node.JS.\n\nUse `crypto` API to generate a UUID, compliant with [RFC4122](https://www.ietf.org/rfc/rfc4122.txt) version 4.\n\n"},{"command":"all","code":"### all\n\nReturns `true` if the provided predicate function returns `true` for all elements in a collection, `false` otherwise.\n\nUse `Array.every()` to test if all elements in the collection return `true` based on `fn`.\nOmit the second argument, `fn`, to use `Boolean` as a default.\n\n```js\nconst all = (arr, fn = Boolean) => arr.every(fn);\n```\n\n```js\nall([4, 2, 3], x => x > 1); // true\nall([1, 2, 3]); // true\n```\n","description":"### all\n\nReturns `true` if the provided predicate function returns `true` for all elements in a collection, `false` otherwise.\n\nUse `Array.every()` to test if all elements in the collection return `true` based on `fn`.\nOmit the second argument, `fn`, to use `Boolean` as a default.\n\n"},{"command":"any","code":"### any\n\nReturns `true` if the provided predicate function returns `true` for at least one element in a collection, `false` otherwise.\n\nUse `Array.some()` to test if any elements in the collection return `true` based on `fn`.\nOmit the second argument, `fn`, to use `Boolean` as a default.\n\n```js\nconst any = (arr, fn = Boolean) => arr.some(fn);\n```\n\n```js\nany([0, 1, 2, 0], x => x >= 2); // true\nany([0, 0, 1, 0]); // true\n```\n","description":"### any\n\nReturns `true` if the provided predicate function returns `true` for at least one element in a collection, `false` otherwise.\n\nUse `Array.some()` to test if any elements in the collection return `true` based on `fn`.\nOmit the second argument, `fn`, to use `Boolean` as a default.\n\n"},{"command":"approximatelyEqual","code":"### approximatelyEqual\n\nChecks if two numbers are approximately equal to each other.\n\nUse `Math.abs()` to compare the absolute difference of the two values to `epsilon`.\nOmit the third parameter, `epsilon`, to use a default value of `0.001`.\n\n```js\nconst approximatelyEqual = (v1, v2, epsilon = 0.001) => Math.abs(v1 - v2) < epsilon;\n```\n\n```js\napproximatelyEqual(Math.PI / 2.0, 1.5708); // true\n```\n","description":"### approximatelyEqual\n\nChecks if two numbers are approximately equal to each other.\n\nUse `Math.abs()` to compare the absolute difference of the two values to `epsilon`.\nOmit the third parameter, `epsilon`, to use a default value of `0.001`.\n\n"},{"command":"arrayToHtmlList","code":"### arrayToHtmlList\n\nConverts the given array elements into `<li>` tags and appends them to the list of the given id.\n\nUse `Array.map()` and `document.querySelector()` to create a list of html tags.\n\n```js\nconst arrayToHtmlList = (arr, listID) =>\n  arr.map(item => (document.querySelector('#' + listID).innerHTML += `<li>${item}</li>`));\n```\n\n```js\narrayToHtmlList(['item 1', 'item 2'], 'myListID');\n```\n","description":"### arrayToHtmlList\n\nConverts the given array elements into `<li>` tags and appends them to the list of the given id.\n\nUse `Array.map()` and `document.querySelector()` to create a list of html tags.\n\n"},{"command":"ary","code":"### ary\n\nCreates a function that accepts up to `n` arguments, ignoring any additional arguments.\n\nCall the provided function, `fn`, with up to `n` arguments, using `Array.slice(0,n)` and the spread operator (`...`).\n\n```js\nconst ary = (fn, n) => (...args) => fn(...args.slice(0, n));\n```\n\n```js\nconst firstTwoMax = ary(Math.max, 2);\n[[2, 6, 'a'], [8, 4, 6], [10]].map(x => firstTwoMax(...x)); // [6, 8, 10]\n```\n","description":"### ary\n\nCreates a function that accepts up to `n` arguments, ignoring any additional arguments.\n\nCall the provided function, `fn`, with up to `n` arguments, using `Array.slice(0,n)` and the spread operator (`...`).\n\n"},{"command":"atob","code":"### atob\n\nDecodes a string of data which has been encoded using base-64 encoding.\n\nCreate a `Buffer` for the given string with base-64 encoding and use `Buffer.toString('binary')` to return the decoded string.\n\n```js\nconst atob = str => new Buffer(str, 'base64').toString('binary');\n```\n\n```js\natob('Zm9vYmFy'); // 'foobar'\n```\n","description":"### atob\n\nDecodes a string of data which has been encoded using base-64 encoding.\n\nCreate a `Buffer` for the given string with base-64 encoding and use `Buffer.toString('binary')` to return the decoded string.\n\n"},{"command":"attempt","code":"### attempt\n\nAttempts to invoke a function with the provided arguments, returning either the result or the caught error object.\n\nUse a `try... catch` block to return either the result of the function or an appropriate error.\n\n```js\nconst attempt = (fn, ...args) => {\n  try {\n    return fn(...args);\n  } catch (e) {\n    return e instanceof Error ? e : new Error(e);\n  }\n};\n```\n\n```js\nvar elements = attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\nif (elements instanceof Error) elements = []; // elements = []\n```\n","description":"### attempt\n\nAttempts to invoke a function with the provided arguments, returning either the result or the caught error object.\n\nUse a `try... catch` block to return either the result of the function or an appropriate error.\n\n"},{"command":"average","code":"### average\n\nReturns the average of two or more numbers.\n\nUse `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`, divide by the `length` of the array.\n\n```js\nconst average = (...nums) => [...nums].reduce((acc, val) => acc + val, 0) / nums.length;\n```\n\n```js\naverage(...[1, 2, 3]); // 2\naverage(1, 2, 3); // 2\n```\n","description":"### average\n\nReturns the average of two or more numbers.\n\nUse `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`, divide by the `length` of the array.\n\n"},{"command":"averageBy","code":"### averageBy\n\nReturns the average of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`, divide by the `length` of the array.\n\n```js\nconst averageBy = (arr, fn) =>\n  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val) => acc + val, 0) /\n  arr.length;\n```\n\n```js\naverageBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n); // 5\naverageBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'); // 5\n```\n","description":"### averageBy\n\nReturns the average of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`, divide by the `length` of the array.\n\n"},{"command":"bifurcate","code":"### bifurcate\n\nSplits values into two groups. If an element in `filter` is truthy, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.\n\nUse `Array.reduce()` and `Array.push()` to add elements to groups, based on `filter`.\n\n```js\nconst bifurcate = (arr, filter) =>\n  arr.reduce((acc, val, i) => (acc[filter[i] ? 0 : 1].push(val), acc), [[], []]);\n```\n\n```js\nbifurcate(['beep', 'boop', 'foo', 'bar'], [true, true, false, true]); // [ ['beep', 'boop', 'bar'], ['foo'] ]\n```\n","description":"### bifurcate\n\nSplits values into two groups. If an element in `filter` is truthy, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.\n\nUse `Array.reduce()` and `Array.push()` to add elements to groups, based on `filter`.\n\n"},{"command":"bifurcateBy","code":"### bifurcateBy\n\nSplits values into two groups according to a predicate function, which specifies which group an element in the input collection belongs to. If the predicate function returns a truthy value, the collection element belongs to the first group; otherwise, it belongs to the second group.\n\nUse `Array.reduce()` and `Array.push()` to add elements to groups, based on the value returned by `fn` for each element.\n\n```js\nconst bifurcateBy = (arr, fn) =>\n  arr.reduce((acc, val, i) => (acc[fn(val, i) ? 0 : 1].push(val), acc), [[], []]);\n```\n\n```js\nbifurcateBy(['beep', 'boop', 'foo', 'bar'], x => x[0] === 'b'); // [ ['beep', 'boop', 'bar'], ['foo'] ]\n```\n","description":"### bifurcateBy\n\nSplits values into two groups according to a predicate function, which specifies which group an element in the input collection belongs to. If the predicate function returns a truthy value, the collection element belongs to the first group; otherwise, it belongs to the second group.\n\nUse `Array.reduce()` and `Array.push()` to add elements to groups, based on the value returned by `fn` for each element.\n\n"},{"command":"bind","code":"### bind\n\nCreates a function that invokes `fn` with a given context, optionally adding any additional supplied parameters to the beginning of the arguments.\n\nReturn a `function` that uses `Function.apply()` to apply the given `context` to `fn`.\nUse `Array.concat()` to prepend any additional supplied parameters to the arguments.\n\n```js\nconst bind = (fn, context, ...args) =>\n  function() {\n    return fn.apply(context, args.concat(...arguments));\n  };\n```\n\n```js\nfunction greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\nconst freddy = { user: 'fred' };\nconst freddyBound = bind(greet, freddy);\nconsole.log(freddyBound('hi', '!')); // 'hi fred!'\n```\n","description":"### bind\n\nCreates a function that invokes `fn` with a given context, optionally adding any additional supplied parameters to the beginning of the arguments.\n\nReturn a `function` that uses `Function.apply()` to apply the given `context` to `fn`.\nUse `Array.concat()` to prepend any additional supplied parameters to the arguments.\n\n"},{"command":"bindAll","code":"### bindAll\n\nBinds methods of an object to the object itself, overwriting the existing method.\n\nUse `Array.forEach()` to return a `function` that uses `Function.apply()` to apply the given context (`obj`) to `fn` for each function specified.\n\n```js\nconst bindAll = (obj, ...fns) =>\n  fns.forEach(\n    fn => (\n      (f = obj[fn]),\n      (obj[fn] = function() {\n        return f.apply(obj);\n      })\n    )\n  );\n```\n\n```js\nvar view = {\n  label: 'docs',\n  click: function() {\n    console.log('clicked ' + this.label);\n  }\n};\nbindAll(view, 'click');\njQuery(element).on('click', view.click); // Logs 'clicked docs' when clicked.\n```\n","description":"### bindAll\n\nBinds methods of an object to the object itself, overwriting the existing method.\n\nUse `Array.forEach()` to return a `function` that uses `Function.apply()` to apply the given context (`obj`) to `fn` for each function specified.\n\n"},{"command":"bindKey","code":"### bindKey\n\nCreates a function that invokes the method at a given key of an object, optionally adding any additional supplied parameters to the beginning of the arguments.\n\nReturn a `function` that uses `Function.apply()` to bind `context[fn]` to `context`.\nUse `Array.concat()` to prepend any additional supplied parameters to the arguments.\n\n```js\nconst bindKey = (context, fn, ...args) =>\n  function() {\n    return context[fn].apply(context, args.concat(...arguments));\n  };\n```\n\n```js\nconst freddy = {\n  user: 'fred',\n  greet: function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\nconst freddyBound = bindKey(freddy, 'greet');\nconsole.log(freddyBound('hi', '!')); // 'hi fred!'\n```\n","description":"### bindKey\n\nCreates a function that invokes the method at a given key of an object, optionally adding any additional supplied parameters to the beginning of the arguments.\n\nReturn a `function` that uses `Function.apply()` to bind `context[fn]` to `context`.\nUse `Array.concat()` to prepend any additional supplied parameters to the arguments.\n\n"},{"command":"binomialCoefficient","code":"### binomialCoefficient\n\nEvaluates the binomial coefficient of two integers `n` and `k`.\n\nUse `Number.isNaN()` to check if any of the two values is `NaN`.\nCheck if `k` is less than `0`, greater than or equal to `n`, equal to `1` or `n - 1` and return the appropriate result.\nCheck if `n - k` is less than `k` and switch their values accordingly.\nLoop from `2` through `k` and calculate the binomial coefficient.\nUse `Math.round()` to account for rounding errors in the calculation.\n\n```js\nconst binomialCoefficient = (n, k) => {\n  if (Number.isNaN(n) || Number.isNaN(k)) return NaN;\n  if (k < 0 || k > n) return 0;\n  if (k === 0 || k === n) return 1;\n  if (k === 1 || k === n - 1) return n;\n  if (n - k < k) k = n - k;\n  let res = n;\n  for (let j = 2; j <= k; j++) res *= (n - j + 1) / j;\n  return Math.round(res);\n};\n```\n\n```js\nbinomialCoefficient(8, 2); // 28\n```\n","description":"### binomialCoefficient\n\nEvaluates the binomial coefficient of two integers `n` and `k`.\n\nUse `Number.isNaN()` to check if any of the two values is `NaN`.\nCheck if `k` is less than `0`, greater than or equal to `n`, equal to `1` or `n - 1` and return the appropriate result.\nCheck if `n - k` is less than `k` and switch their values accordingly.\nLoop from `2` through `k` and calculate the binomial coefficient.\nUse `Math.round()` to account for rounding errors in the calculation.\n\n"},{"command":"bottomVisible","code":"### bottomVisible\n\nReturns `true` if the bottom of the page is visible, `false` otherwise.\n\nUse `scrollY`, `scrollHeight` and `clientHeight` to determine if the bottom of the page is visible.\n\n```js\nconst bottomVisible = () =>\n  document.documentElement.clientHeight + window.scrollY >=\n  (document.documentElement.scrollHeight || document.documentElement.clientHeight);\n```\n\n```js\nbottomVisible(); // true\n```\n","description":"### bottomVisible\n\nReturns `true` if the bottom of the page is visible, `false` otherwise.\n\nUse `scrollY`, `scrollHeight` and `clientHeight` to determine if the bottom of the page is visible.\n\n"},{"command":"btoa","code":"### btoa\n\nCreates a base-64 encoded ASCII string from a String object in which each character in the string is treated as a byte of binary data.\n\nCreate a `Buffer` for the given string with binary encoding and use `Buffer.toString('base64')` to return the encoded string.\n\n```js\nconst btoa = str => new Buffer(str, 'binary').toString('base64');\n```\n\n```js\nbtoa('foobar'); // 'Zm9vYmFy'\n```\n","description":"### btoa\n\nCreates a base-64 encoded ASCII string from a String object in which each character in the string is treated as a byte of binary data.\n\nCreate a `Buffer` for the given string with binary encoding and use `Buffer.toString('base64')` to return the encoded string.\n\n"},{"command":"byteSize","code":"### byteSize\n\nReturns the length of a string in bytes.\n\nConvert a given string to a [`Blob` Object](https://developer.mozilla.org/en-US/docs/Web/API/Blob) and find its `size`.\n\n```js\nconst byteSize = str => new Blob([str]).size;\n```\n\n```js\nbyteSize('😀'); // 4\nbyteSize('Hello World'); // 11\n```\n","description":"### byteSize\n\nReturns the length of a string in bytes.\n\nConvert a given string to a [`Blob` Object](https://developer.mozilla.org/en-US/docs/Web/API/Blob) and find its `size`.\n\n"},{"command":"call","code":"### call\r\n\r\nGiven a key and a set of arguments, call them when given a context. Primarily useful in composition.\r\n\r\nUse a closure to call a stored key with stored arguments.\r\n\r\n```js\nconst call = (key, ...args) => context => context[key](...args);\n```\r\n\r\n```js\nPromise.resolve([1, 2, 3])\n  .then(call('map', x => 2 * x))\n  .then(console.log); //[ 2, 4, 6 ]\nconst map = call.bind(null, 'map');\nPromise.resolve([1, 2, 3])\n  .then(map(x => 2 * x))\n  .then(console.log); //[ 2, 4, 6 ]\n```\r\n","description":"### call\r\n\r\nGiven a key and a set of arguments, call them when given a context. Primarily useful in composition.\r\n\r\nUse a closure to call a stored key with stored arguments.\r\n\r\n"},{"command":"capitalize","code":"### capitalize\n\nCapitalizes the first letter of a string.\n\nUse array destructuring and `String.toUpperCase()` to capitalize first letter, `...rest` to get array of characters after first letter and then `Array.join('')` to make it a string again.\nOmit the `lowerRest` parameter to keep the rest of the string intact, or set it to `true` to convert to lowercase.\n\n```js\nconst capitalize = ([first, ...rest], lowerRest = false) =>\n  first.toUpperCase() + (lowerRest ? rest.join('').toLowerCase() : rest.join(''));\n```\n\n```js\ncapitalize('fooBar'); // 'FooBar'\ncapitalize('fooBar', true); // 'Foobar'\n```\n","description":"### capitalize\n\nCapitalizes the first letter of a string.\n\nUse array destructuring and `String.toUpperCase()` to capitalize first letter, `...rest` to get array of characters after first letter and then `Array.join('')` to make it a string again.\nOmit the `lowerRest` parameter to keep the rest of the string intact, or set it to `true` to convert to lowercase.\n\n"},{"command":"capitalizeEveryWord","code":"### capitalizeEveryWord\n\nCapitalizes the first letter of every word in a string.\n\nUse `String.replace()` to match the first character of each word and `String.toUpperCase()` to capitalize it.\n\n```js\nconst capitalizeEveryWord = str => str.replace(/\\b[a-z]/g, char => char.toUpperCase());\n```\n\n```js\ncapitalizeEveryWord('hello world!'); // 'Hello World!'\n```\n","description":"### capitalizeEveryWord\n\nCapitalizes the first letter of every word in a string.\n\nUse `String.replace()` to match the first character of each word and `String.toUpperCase()` to capitalize it.\n\n"},{"command":"castArray","code":"### castArray\n\nCasts the provided value as an array if it's not one.\n\nUse `Array.isArray()` to determine if `val` is an array and return it as-is or encapsulated in an array accordingly.\n\n```js\nconst castArray = val => (Array.isArray(val) ? val : [val]);\n```\n\n```js\ncastArray('foo'); // ['foo']\ncastArray([1]); // [1]\n```\n","description":"### castArray\n\nCasts the provided value as an array if it's not one.\n\nUse `Array.isArray()` to determine if `val` is an array and return it as-is or encapsulated in an array accordingly.\n\n"},{"command":"chainAsync","code":"### chainAsync\n\nChains asynchronous functions.\n\nLoop through an array of functions containing asynchronous events, calling `next` when each asynchronous event has completed.\n\n```js\nconst chainAsync = fns => {\n  let curr = 0;\n  const next = () => fns[curr++](next);\n  next();\n};\n```\n\n```js\nchainAsync([\n  next => {\n    console.log('0 seconds');\n    setTimeout(next, 1000);\n  },\n  next => {\n    console.log('1 second');\n  }\n]);\n```\n","description":"### chainAsync\n\nChains asynchronous functions.\n\nLoop through an array of functions containing asynchronous events, calling `next` when each asynchronous event has completed.\n\n"},{"command":"chunk","code":"### chunk\n\nChunks an array into smaller arrays of a specified size.\n\nUse `Array.from()` to create a new array, that fits the number of chunks that will be produced.\nUse `Array.slice()` to map each element of the new array to a chunk the length of `size`.\nIf the original array can't be split evenly, the final chunk will contain the remaining elements.\n\n```js\nconst chunk = (arr, size) =>\n  Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n    arr.slice(i * size, i * size + size)\n  );\n```\n\n```js\nchunk([1, 2, 3, 4, 5], 2); // [[1,2],[3,4],[5]]\n```\n","description":"### chunk\n\nChunks an array into smaller arrays of a specified size.\n\nUse `Array.from()` to create a new array, that fits the number of chunks that will be produced.\nUse `Array.slice()` to map each element of the new array to a chunk the length of `size`.\nIf the original array can't be split evenly, the final chunk will contain the remaining elements.\n\n"},{"command":"clampNumber","code":"### clampNumber\n\nClamps `num` within the inclusive range specified by the boundary values `a` and `b`.\n\nIf `num` falls within the range, return `num`.\nOtherwise, return the nearest number in the range.\n\n```js\nconst clampNumber = (num, a, b) => Math.max(Math.min(num, Math.max(a, b)), Math.min(a, b));\n```\n\n```js\nclampNumber(2, 3, 5); // 3\nclampNumber(1, -1, -5); // -1\n```\n","description":"### clampNumber\n\nClamps `num` within the inclusive range specified by the boundary values `a` and `b`.\n\nIf `num` falls within the range, return `num`.\nOtherwise, return the nearest number in the range.\n\n"},{"command":"cloneRegExp","code":"### cloneRegExp\n\nClones a regular expression.\n\nUse `new RegExp()`, `RegExp.source` and `RegExp.flags` to clone the given regular expression.\n\n```js\nconst cloneRegExp = regExp => new RegExp(regExp.source, regExp.flags);\n```\n\n```js\nconst regExp = /lorem ipsum/gi;\nconst regExp2 = cloneRegExp(regExp); // /lorem ipsum/gi\n```\n","description":"### cloneRegExp\n\nClones a regular expression.\n\nUse `new RegExp()`, `RegExp.source` and `RegExp.flags` to clone the given regular expression.\n\n"},{"command":"coalesce","code":"### coalesce\n\nReturns the first non-null/undefined argument.\n\nUse `Array.find()` to return the first non `null`/`undefined` argument.\n\n```js\nconst coalesce = (...args) => args.find(_ => ![undefined, null].includes(_));\n```\n\n```js\ncoalesce(null, undefined, '', NaN, 'Waldo'); // \"\"\n```\n","description":"### coalesce\n\nReturns the first non-null/undefined argument.\n\nUse `Array.find()` to return the first non `null`/`undefined` argument.\n\n"},{"command":"coalesceFactory","code":"### coalesceFactory\n\nReturns a customized coalesce function that returns the first argument that returns `true` from the provided argument validation function.\n\nUse `Array.find()` to return the first argument that returns `true` from the provided argument validation function.\n\n```js\nconst coalesceFactory = valid => (...args) => args.find(valid);\n```\n\n```js\nconst customCoalesce = coalesceFactory(_ => ![null, undefined, '', NaN].includes(_));\ncustomCoalesce(undefined, null, NaN, '', 'Waldo'); // \"Waldo\"\n```\n","description":"### coalesceFactory\n\nReturns a customized coalesce function that returns the first argument that returns `true` from the provided argument validation function.\n\nUse `Array.find()` to return the first argument that returns `true` from the provided argument validation function.\n\n"},{"command":"collectInto","code":"### collectInto\r\n\r\nChanges a function that accepts an array into a variadic function.\r\n\r\nGiven a function, return a closure that collects all inputs into an array-accepting function.\r\n\r\n```js\nconst collectInto = fn => (...args) => fn(args);\n```\r\n\r\n```js\nconst Pall = collectInto(Promise.all.bind(Promise));\nlet p1 = Promise.resolve(1);\nlet p2 = Promise.resolve(2);\nlet p3 = new Promise(resolve => setTimeout(resolve, 2000, 3));\nPall(p1, p2, p3).then(console.log); // [1, 2, 3] (after about 2 seconds)\n```\r\n","description":"### collectInto\r\n\r\nChanges a function that accepts an array into a variadic function.\r\n\r\nGiven a function, return a closure that collects all inputs into an array-accepting function.\r\n\r\n"},{"command":"colorize","code":"### colorize\n\nAdd special characters to text to print in color in the console (combined with `console.log()`).\n\nUse template literals and special characters to add the appropriate color code to the string output.\nFor background colors, add a special character that resets the background color at the end of the string.\n\n```js\nconst colorize = (...args) => ({\n  black: `\\x1b[30m${args.join(' ')}`,\n  red: `\\x1b[31m${args.join(' ')}`,\n  green: `\\x1b[32m${args.join(' ')}`,\n  yellow: `\\x1b[33m${args.join(' ')}`,\n  blue: `\\x1b[34m${args.join(' ')}`,\n  magenta: `\\x1b[35m${args.join(' ')}`,\n  cyan: `\\x1b[36m${args.join(' ')}`,\n  white: `\\x1b[37m${args.join(' ')}`,\n  bgBlack: `\\x1b[40m${args.join(' ')}\\x1b[0m`,\n  bgRed: `\\x1b[41m${args.join(' ')}\\x1b[0m`,\n  bgGreen: `\\x1b[42m${args.join(' ')}\\x1b[0m`,\n  bgYellow: `\\x1b[43m${args.join(' ')}\\x1b[0m`,\n  bgBlue: `\\x1b[44m${args.join(' ')}\\x1b[0m`,\n  bgMagenta: `\\x1b[45m${args.join(' ')}\\x1b[0m`,\n  bgCyan: `\\x1b[46m${args.join(' ')}\\x1b[0m`,\n  bgWhite: `\\x1b[47m${args.join(' ')}\\x1b[0m`\n});\n```\n\n```js\nconsole.log(colorize('foo').red); // 'foo' (red letters)\nconsole.log(colorize('foo', 'bar').bgBlue); // 'foo bar' (blue background)\nconsole.log(colorize(colorize('foo').yellow, colorize('foo').green).bgWhite); // 'foo bar' (first word in yellow letters, second word in green letters, white background for both)\n```\n","description":"### colorize\n\nAdd special characters to text to print in color in the console (combined with `console.log()`).\n\nUse template literals and special characters to add the appropriate color code to the string output.\nFor background colors, add a special character that resets the background color at the end of the string.\n\n"},{"command":"compact","code":"### compact\n\nRemoves falsey values from an array.\n\nUse `Array.filter()` to filter out falsey values (`false`, `null`, `0`, `\"\"`, `undefined`, and `NaN`).\n\n```js\nconst compact = arr => arr.filter(Boolean);\n```\n\n```js\ncompact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34]); // [ 1, 2, 3, 'a', 's', 34 ]\n```\n","description":"### compact\n\nRemoves falsey values from an array.\n\nUse `Array.filter()` to filter out falsey values (`false`, `null`, `0`, `\"\"`, `undefined`, and `NaN`).\n\n"},{"command":"compose","code":"### compose\n\nPerforms right-to-left function composition.\n\nUse `Array.reduce()` to perform right-to-left function composition.\nThe last (rightmost) function can accept one or more arguments; the remaining functions must be unary.\n\n```js\nconst compose = (...fns) => fns.reduce((f, g) => (...args) => f(g(...args)));\n```\n\n```js\nconst add5 = x => x + 5;\nconst multiply = (x, y) => x * y;\nconst multiplyAndAdd5 = compose(add5, multiply);\nmultiplyAndAdd5(5, 2); // 15\n```\n","description":"### compose\n\nPerforms right-to-left function composition.\n\nUse `Array.reduce()` to perform right-to-left function composition.\nThe last (rightmost) function can accept one or more arguments; the remaining functions must be unary.\n\n"},{"command":"composeRight","code":"### composeRight\n\nPerforms left-to-right function composition.\n\nUse `Array.reduce()` to perform left-to-right function composition.\nThe first (leftmost) function can accept one or more arguments; the remaining functions must be unary.\n\n```js\nconst composeRight = (...fns) => fns.reduce((f, g) => (...args) => g(f(...args)));\n```\n\n```js\nconst add = (x, y) => x + y;\nconst square = x => x * x;\nconst addAndSquare = composeRight(add, square);\naddAndSquare(1, 2); // 9\n```\n","description":"### composeRight\n\nPerforms left-to-right function composition.\n\nUse `Array.reduce()` to perform left-to-right function composition.\nThe first (leftmost) function can accept one or more arguments; the remaining functions must be unary.\n\n"},{"command":"converge","code":"### converge\n\nAccepts a converging function and a list of branching functions and returns a function that applies each branching function to the arguments and the results of the branching functions are passed as arguments to the converging function.\n\nUse `Array.map()` and `Function.apply()` to apply each function to the given arguments.\nUse the spread operator (`...`) to call `coverger` with the results of all other functions.\n\n```js\nconst converge = (converger, fns) => (...args) => converger(...fns.map(fn => fn.apply(null, args)));\n```\n\n```js\nconst average = converge((a, b) => a / b, [\n  arr => arr.reduce((a, v) => a + v, 0),\n  arr => arr.length\n]);\naverage([1, 2, 3, 4, 5, 6, 7]); // 4\n```\n","description":"### converge\n\nAccepts a converging function and a list of branching functions and returns a function that applies each branching function to the arguments and the results of the branching functions are passed as arguments to the converging function.\n\nUse `Array.map()` and `Function.apply()` to apply each function to the given arguments.\nUse the spread operator (`...`) to call `coverger` with the results of all other functions.\n\n"},{"command":"copyToClipboard","code":"### copyToClipboard\n\nCopy a string to the clipboard. Only works as a result of user action (i.e. inside a `click` event listener).\n\nCreate a new `<textarea>` element, fill it with the supplied data and add it to the HTML document.\nUse `Selection.getRangeAt()`to store the selected range (if any).\nUse `document.execCommand('copy')` to copy to the clipboard.\nRemove the `<textarea>` element from the HTML document.\nFinally, use `Selection().addRange()` to recover the original selected range (if any).\n\n```js\nconst copyToClipboard = str => {\n  const el = document.createElement('textarea');\n  el.value = str;\n  el.setAttribute('readonly', '');\n  el.style.position = 'absolute';\n  el.style.left = '-9999px';\n  document.body.appendChild(el);\n  const selected =\n    document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  if (selected) {\n    document.getSelection().removeAllRanges();\n    document.getSelection().addRange(selected);\n  }\n};\n```\n\n```js\ncopyToClipboard('Lorem ipsum'); // 'Lorem ipsum' copied to clipboard.\n```\n","description":"### copyToClipboard\n\nCopy a string to the clipboard. Only works as a result of user action (i.e. inside a `click` event listener).\n\nCreate a new `<textarea>` element, fill it with the supplied data and add it to the HTML document.\nUse `Selection.getRangeAt()`to store the selected range (if any).\nUse `document.execCommand('copy')` to copy to the clipboard.\nRemove the `<textarea>` element from the HTML document.\nFinally, use `Selection().addRange()` to recover the original selected range (if any).\n\n"},{"command":"countBy","code":"### countBy\n\nGroups the elements of an array based on the given function and returns the count of elements in each group.\n\nUse `Array.map()` to map the values of an array to a function or property name.\nUse `Array.reduce()` to create an object, where the keys are produced from the mapped results.\n\n```js\nconst countBy = (arr, fn) =>\n  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val, i) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n```\n\n```js\ncountBy([6.1, 4.2, 6.3], Math.floor); // {4: 1, 6: 2}\ncountBy(['one', 'two', 'three'], 'length'); // {3: 2, 5: 1}\n```\n","description":"### countBy\n\nGroups the elements of an array based on the given function and returns the count of elements in each group.\n\nUse `Array.map()` to map the values of an array to a function or property name.\nUse `Array.reduce()` to create an object, where the keys are produced from the mapped results.\n\n"},{"command":"countOccurrences","code":"### countOccurrences\n\nCounts the occurrences of a value in an array.\n\nUse `Array.reduce()` to increment a counter each time you encounter the specific value inside the array.\n\n```js\nconst countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a + 0), 0);\n```\n\n```js\ncountOccurrences([1, 1, 2, 1, 2, 3], 1); // 3\n```\n","description":"### countOccurrences\n\nCounts the occurrences of a value in an array.\n\nUse `Array.reduce()` to increment a counter each time you encounter the specific value inside the array.\n\n"},{"command":"createElement","code":"### createElement\n\nCreates an element from a string (without appending it to the document). \nIf the given string contains multiple elements, only the first one will be returned.\n\nUse `document.createElement()` to create a new element.\nSet its `innerHTML` to the string supplied as the argument. \nUse `ParentNode.firstElementChild` to return the element version of the string.\n\n```js\nconst createElement = str => {\n  const el = document.createElement('div');\n  el.innerHTML = str;\n  return el.firstElementChild;\n};\n```\n\n```js\nconst el = createElement(\n  `<div class=\"container\">\n    <p>Hello!</p>\n  </div>`\n);\nconsole.log(el.className); // 'container'\n```\n","description":"### createElement\n\nCreates an element from a string (without appending it to the document). \nIf the given string contains multiple elements, only the first one will be returned.\n\nUse `document.createElement()` to create a new element.\nSet its `innerHTML` to the string supplied as the argument. \nUse `ParentNode.firstElementChild` to return the element version of the string.\n\n"},{"command":"createEventHub","code":"### createEventHub\r\n\r\nCreates a pub/sub ([publish–subscribe](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)) event hub with `emit`, `on`, and `off` methods.\r\n\r\nUse `Object.create(null)` to create an empty `hub` object that does not inherit properties from `Object.prototype`.\r\nFor `emit`, resolve the array of handlers based on the `event` argument and then run each one with `Array.forEach()` by passing in the data as an argument.\r\nFor `on`, create an array for the event if it does not yet exist, then use `Array.push()` to add the handler\r\nto the array.\r\nFor `off`, use `Array.findIndex()` to find the index of the handler in the event array and remove it using `Array.splice()`.\r\n\r\n```js\nconst createEventHub = () => ({\n  hub: Object.create(null),\n  emit(event, data) {\n    (this.hub[event] || []).forEach(handler => handler(data));\n  },\n  on(event, handler) {\n    if (!this.hub[event]) this.hub[event] = [];\n    this.hub[event].push(handler);\n  },\n  off(event, handler) {\n    const i = (this.hub[event] || []).findIndex(h => h === handler);\n    if (i > -1) this.hub[event].splice(i, 1);\n  }\n});\n```\r\n\r\n```js\nconst handler = data => console.log(data);\nconst hub = createEventHub();\nlet increment = 0;\n\n// Subscribe: listen for different types of events\nhub.on('message', handler);\nhub.on('message', () => console.log('Message event fired'));\nhub.on('increment', () => increment++);\n\n// Publish: emit events to invoke all handlers subscribed to them, passing the data to them as an argument\nhub.emit('message', 'hello world'); // logs 'hello world' and 'Message event fired'\nhub.emit('message', { hello: 'world' }); // logs the object and 'Message event fired'\nhub.emit('increment'); // `increment` variable is now 1\n\n// Unsubscribe: stop a specific handler from listening to the 'message' event\nhub.off('message', handler);\n```\r\n","description":"### createEventHub\r\n\r\nCreates a pub/sub ([publish–subscribe](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)) event hub with `emit`, `on`, and `off` methods.\r\n\r\nUse `Object.create(null)` to create an empty `hub` object that does not inherit properties from `Object.prototype`.\r\nFor `emit`, resolve the array of handlers based on the `event` argument and then run each one with `Array.forEach()` by passing in the data as an argument.\r\nFor `on`, create an array for the event if it does not yet exist, then use `Array.push()` to add the handler\r\nto the array.\r\nFor `off`, use `Array.findIndex()` to find the index of the handler in the event array and remove it using `Array.splice()`.\r\n\r\n"},{"command":"currentURL","code":"### currentURL\n\nReturns the current URL.\n\nUse `window.location.href` to get current URL.\n\n```js\nconst currentURL = () => window.location.href;\n```\n\n```js\ncurrentURL(); // 'https://google.com'\n```\n","description":"### currentURL\n\nReturns the current URL.\n\nUse `window.location.href` to get current URL.\n\n"},{"command":"curry","code":"### curry\n\nCurries a function.\n\nUse recursion.\nIf the number of provided arguments (`args`) is sufficient, call the passed function `fn`.\nOtherwise, return a curried function `fn` that expects the rest of the arguments.\nIf you want to curry a function that accepts a variable number of arguments (a variadic function, e.g. `Math.min()`), you can optionally pass the number of arguments to the second parameter `arity`.\n\n```js\nconst curry = (fn, arity = fn.length, ...args) =>\n  arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);\n```\n\n```js\ncurry(Math.pow)(2)(10); // 1024\ncurry(Math.min, 3)(10)(50)(2); // 2\n```\n","description":"### curry\n\nCurries a function.\n\nUse recursion.\nIf the number of provided arguments (`args`) is sufficient, call the passed function `fn`.\nOtherwise, return a curried function `fn` that expects the rest of the arguments.\nIf you want to curry a function that accepts a variable number of arguments (a variadic function, e.g. `Math.min()`), you can optionally pass the number of arguments to the second parameter `arity`.\n\n"},{"command":"debounce","code":"### debounce\n\nCreates a debounced function that delays invoking the provided function until at least `ms` milliseconds have elapsed since the last time it was invoked.\n\nEach time the debounced function is invoked, clear the current pending timeout with `clearTimeout()` and use `setTimeout()` to create a new timeout that delays invoking the function until at least `ms` milliseconds has elapsed. Use `Function.apply()` to apply the `this` context to the function and provide the necessary arguments.\nOmit the second argument, `ms`, to set the timeout at a default of 0 ms.\n\n```js\nconst debounce = (fn, ms = 0) => {\n  let timeoutId;\n  return function(...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(this, args), ms);\n  };\n};\n```\n\n```js\nwindow.addEventListener(\n  'resize',\n  debounce(() => {\n    console.log(window.innerWidth);\n    console.log(window.innerHeight);\n  }, 250)\n); // Will log the window dimensions at most every 250ms\n```\n","description":"### debounce\n\nCreates a debounced function that delays invoking the provided function until at least `ms` milliseconds have elapsed since the last time it was invoked.\n\nEach time the debounced function is invoked, clear the current pending timeout with `clearTimeout()` and use `setTimeout()` to create a new timeout that delays invoking the function until at least `ms` milliseconds has elapsed. Use `Function.apply()` to apply the `this` context to the function and provide the necessary arguments.\nOmit the second argument, `ms`, to set the timeout at a default of 0 ms.\n\n"},{"command":"decapitalize","code":"### decapitalize\n\nDecapitalizes the first letter of a string.\n\nUse array destructuring and `String.toLowerCase()` to decapitalize first letter, `...rest` to get array of characters after first letter and then `Array.join('')` to make it a string again.\nOmit the `upperRest` parameter to keep the rest of the string intact, or set it to `true` to convert to uppercase.\n\n```js\nconst decapitalize = ([first, ...rest], upperRest = false) =>\n  first.toLowerCase() + (upperRest ? rest.join('').toUpperCase() : rest.join(''));\n```\n\n```js\ndecapitalize('FooBar'); // 'fooBar'\ndecapitalize('FooBar', true); // 'fOOBAR'\n```\n","description":"### decapitalize\n\nDecapitalizes the first letter of a string.\n\nUse array destructuring and `String.toLowerCase()` to decapitalize first letter, `...rest` to get array of characters after first letter and then `Array.join('')` to make it a string again.\nOmit the `upperRest` parameter to keep the rest of the string intact, or set it to `true` to convert to uppercase.\n\n"},{"command":"deepClone","code":"### deepClone\n\nCreates a deep clone of an object.\n\nUse recursion.\nUse `Object.assign()` and an empty object (`{}`) to create a shallow clone of the original.\nUse `Object.keys()` and `Array.forEach()` to determine which key-value pairs need to be deep cloned.\n\n```js\nconst deepClone = obj => {\n  let clone = Object.assign({}, obj);\n  Object.keys(clone).forEach(\n    key => (clone[key] = typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key])\n  );\n  return clone;\n};\n```\n\n```js\nconst a = { foo: 'bar', obj: { a: 1, b: 2 } };\nconst b = deepClone(a); // a !== b, a.obj !== b.obj\n```\n","description":"### deepClone\n\nCreates a deep clone of an object.\n\nUse recursion.\nUse `Object.assign()` and an empty object (`{}`) to create a shallow clone of the original.\nUse `Object.keys()` and `Array.forEach()` to determine which key-value pairs need to be deep cloned.\n\n"},{"command":"deepFlatten","code":"### deepFlatten\n\nDeep flattens an array.\n\nUse recursion.\nUse `Array.concat()` with an empty array (`[]`) and the spread operator (`...`) to flatten an array.\nRecursively flatten each element that is an array.\n\n```js\nconst deepFlatten = arr => [].concat(...arr.map(v => (Array.isArray(v) ? deepFlatten(v) : v)));\n```\n\n```js\ndeepFlatten([1, [2], [[3], 4], 5]); // [1,2,3,4,5]\n```\n","description":"### deepFlatten\n\nDeep flattens an array.\n\nUse recursion.\nUse `Array.concat()` with an empty array (`[]`) and the spread operator (`...`) to flatten an array.\nRecursively flatten each element that is an array.\n\n"},{"command":"defaults","code":"### defaults\n\nAssigns default values for all properties in an object that are `undefined`.\n\nUse `Object.assign()` to create a new empty object and copy the original one to maintain key order, use `Array.reverse()` and the spread operator `...` to combine the default values from left to right, finally use `obj` again to overwrite properties that originally had a value.\n\n```js\nconst defaults = (obj, ...defs) => Object.assign({}, obj, ...defs.reverse(), obj);\n```\n\n```js\ndefaults({ a: 1 }, { b: 2 }, { b: 6 }, { a: 3 }); // { a: 1, b: 2 }\n```\n","description":"### defaults\n\nAssigns default values for all properties in an object that are `undefined`.\n\nUse `Object.assign()` to create a new empty object and copy the original one to maintain key order, use `Array.reverse()` and the spread operator `...` to combine the default values from left to right, finally use `obj` again to overwrite properties that originally had a value.\n\n"},{"command":"defer","code":"### defer\n\nDefers invoking a function until the current call stack has cleared.\n\nUse `setTimeout()` with a timeout of 1ms to add a new event to the browser event queue and allow the rendering engine to complete its work. Use the spread (`...`) operator to supply the function with an arbitrary number of arguments.\n\n```js\nconst defer = (fn, ...args) => setTimeout(fn, 1, ...args);\n```\n\n```js\n// Example A:\ndefer(console.log, 'a'), console.log('b'); // logs 'b' then 'a'\n\n// Example B:\ndocument.querySelector('#someElement').innerHTML = 'Hello';\nlongRunningFunction(); //Browser will not update the HTML until this has finished\ndefer(longRunningFunction); // Browser will update the HTML then run the function\n```\n","description":"### defer\n\nDefers invoking a function until the current call stack has cleared.\n\nUse `setTimeout()` with a timeout of 1ms to add a new event to the browser event queue and allow the rendering engine to complete its work. Use the spread (`...`) operator to supply the function with an arbitrary number of arguments.\n\n"},{"command":"degreesToRads","code":"### degreesToRads\n\nConverts an angle from degrees to radians.\n\nUse `Math.PI` and the degree to radian formula to convert the angle from degrees to radians.\n\n```js\nconst degreesToRads = deg => deg * Math.PI / 180.0;\n```\n\n```js\ndegreesToRads(90.0); // ~1.5708\n```\n","description":"### degreesToRads\n\nConverts an angle from degrees to radians.\n\nUse `Math.PI` and the degree to radian formula to convert the angle from degrees to radians.\n\n"},{"command":"delay","code":"### delay\n\nInvokes the provided function after `wait` milliseconds.\n\nUse `setTimeout()` to delay execution of `fn`.\nUse the spread (`...`) operator to supply the function with an arbitrary number of arguments.\n\n```js\nconst delay = (fn, wait, ...args) => setTimeout(fn, wait, ...args);\n```\n\n```js\ndelay(\n  function(text) {\n    console.log(text);\n  },\n  1000,\n  'later'\n); // Logs 'later' after one second.\n```\n","description":"### delay\n\nInvokes the provided function after `wait` milliseconds.\n\nUse `setTimeout()` to delay execution of `fn`.\nUse the spread (`...`) operator to supply the function with an arbitrary number of arguments.\n\n"},{"command":"detectDeviceType","code":"### detectDeviceType\n\nDetects wether the website is being opened in a mobile device or a desktop/laptop.\n\nUse a regular expression to test the `navigator.userAgent` property to figure out if the device is a mobile device or a desktop/laptop.\n\n```js\nconst detectDeviceType = () =>\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n    ? 'Mobile'\n    : 'Desktop';\n```\n\n```js\ndetectDeviceType(); // \"Mobile\" or \"Desktop\"\n```\n","description":"### detectDeviceType\n\nDetects wether the website is being opened in a mobile device or a desktop/laptop.\n\nUse a regular expression to test the `navigator.userAgent` property to figure out if the device is a mobile device or a desktop/laptop.\n\n"},{"command":"difference","code":"### difference\n\nReturns the difference between two arrays.\n\nCreate a `Set` from `b`, then use `Array.filter()` on `a` to only keep values not contained in `b`.\n\n```js\nconst difference = (a, b) => {\n  const s = new Set(b);\n  return a.filter(x => !s.has(x));\n};\n```\n\n```js\ndifference([1, 2, 3], [1, 2, 4]); // [3]\n```\n","description":"### difference\n\nReturns the difference between two arrays.\n\nCreate a `Set` from `b`, then use `Array.filter()` on `a` to only keep values not contained in `b`.\n\n"},{"command":"differenceBy","code":"### differenceBy\n\nReturns the difference between two arrays, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying `fn` to each element in `b`, then use `Array.filter()` in combination with `fn` on `a` to only keep values not contained in the previously created set.\n\n```js\nconst differenceBy = (a, b, fn) => {\n  const s = new Set(b.map(v => fn(v)));\n  return a.filter(x => !s.has(fn(x)));\n};\n```\n\n```js\ndifferenceBy([2.1, 1.2], [2.3, 3.4], Math.floor); // [1.2]\ndifferenceBy([{ x: 2 }, { x: 1 }], [{ x: 1 }], v => v.x); // [ { x: 2 } ]\n```\n","description":"### differenceBy\n\nReturns the difference between two arrays, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying `fn` to each element in `b`, then use `Array.filter()` in combination with `fn` on `a` to only keep values not contained in the previously created set.\n\n"},{"command":"differenceWith","code":"### differenceWith\n\nFilters out all values from an array for which the comparator function does not return `true`.\n\nUse `Array.filter()` and `Array.findIndex()` to find the appropriate values.\n\n```js\nconst differenceWith = (arr, val, comp) => arr.filter(a => val.findIndex(b => comp(a, b)) === -1);\n```\n\n```js\ndifferenceWith([1, 1.2, 1.5, 3, 0], [1.9, 3, 0], (a, b) => Math.round(a) === Math.round(b)); // [1, 1.2]\n```\n","description":"### differenceWith\n\nFilters out all values from an array for which the comparator function does not return `true`.\n\nUse `Array.filter()` and `Array.findIndex()` to find the appropriate values.\n\n"},{"command":"digitize","code":"### digitize\n\nConverts a number to an array of digits.\n\nConvert the number to a string, using the spread operator (`...`) to build an array.\nUse `Array.map()` and `parseInt()` to transform each value to an integer.\n\n```js\nconst digitize = n => [...`${n}`].map(i => parseInt(i));\n```\n\n```js\ndigitize(123); // [1, 2, 3]\n```\n","description":"### digitize\n\nConverts a number to an array of digits.\n\nConvert the number to a string, using the spread operator (`...`) to build an array.\nUse `Array.map()` and `parseInt()` to transform each value to an integer.\n\n"},{"command":"distance","code":"### distance\n\nReturns the distance between two points.\n\nUse `Math.hypot()` to calculate the Euclidean distance between two points.\n\n```js\nconst distance = (x0, y0, x1, y1) => Math.hypot(x1 - x0, y1 - y0);\n```\n\n```js\ndistance(1, 1, 2, 3); // 2.23606797749979\n```\n","description":"### distance\n\nReturns the distance between two points.\n\nUse `Math.hypot()` to calculate the Euclidean distance between two points.\n\n"},{"command":"drop","code":"### drop\n\nReturns a new array with `n` elements removed from the left.\n\nUse `Array.slice()` to slice the remove the specified number of elements from the left.\n\n```js\nconst drop = (arr, n = 1) => arr.slice(n);\n```\n\n```js\ndrop([1, 2, 3]); // [2,3]\ndrop([1, 2, 3], 2); // [3]\ndrop([1, 2, 3], 42); // []\n```\n","description":"### drop\n\nReturns a new array with `n` elements removed from the left.\n\nUse `Array.slice()` to slice the remove the specified number of elements from the left.\n\n"},{"command":"dropRight","code":"### dropRight\n\nReturns a new array with `n` elements removed from the right.\n\nUse `Array.slice()` to slice the remove the specified number of elements from the right.\n\n```js\nconst dropRight = (arr, n = 1) => arr.slice(0, -n);\n```\n\n```js\ndropRight([1, 2, 3]); // [1,2]\ndropRight([1, 2, 3], 2); // [1]\ndropRight([1, 2, 3], 42); // []\n```\n","description":"### dropRight\n\nReturns a new array with `n` elements removed from the right.\n\nUse `Array.slice()` to slice the remove the specified number of elements from the right.\n\n"},{"command":"dropRightWhile","code":"### dropRightWhile\n\nRemoves elements from the end of an array until the passed function returns `true`. Returns the remaining elements in the array.\n\nLoop through the array, using `Array.slice()` to drop the last element of the array until the returned value from the function is `true`.\nReturns the remaining elements.\n\n```js\nconst dropRightWhile = (arr, func) => {\n  while (arr.length > 0 && !func(arr[arr.length - 1])) arr = arr.slice(0, -1);\n  return arr;\n};\n```\n\n```js\ndropRightWhile([1, 2, 3, 4], n => n < 3); // [1, 2]\n```\n","description":"### dropRightWhile\n\nRemoves elements from the end of an array until the passed function returns `true`. Returns the remaining elements in the array.\n\nLoop through the array, using `Array.slice()` to drop the last element of the array until the returned value from the function is `true`.\nReturns the remaining elements.\n\n"},{"command":"dropWhile","code":"### dropWhile\n\nRemoves elements in an array until the passed function returns `true`. Returns the remaining elements in the array.\n\nLoop through the array, using `Array.slice()` to drop the first element of the array until the returned value from the function is `true`.\nReturns the remaining elements.\n\n```js\nconst dropWhile = (arr, func) => {\n  while (arr.length > 0 && !func(arr[0])) arr = arr.slice(1);\n  return arr;\n};\n```\n\n```js\ndropWhile([1, 2, 3, 4], n => n >= 3); // [3,4]\n```\n","description":"### dropWhile\n\nRemoves elements in an array until the passed function returns `true`. Returns the remaining elements in the array.\n\nLoop through the array, using `Array.slice()` to drop the first element of the array until the returned value from the function is `true`.\nReturns the remaining elements.\n\n"},{"command":"elementIsVisibleInViewport","code":"### elementIsVisibleInViewport\n\nReturns `true` if the element specified is visible in the viewport, `false` otherwise.\n\nUse `Element.getBoundingClientRect()` and the `window.inner(Width|Height)` values\nto determine if a given element is visible in the viewport.\nOmit the second argument to determine if the element is entirely visible, or specify `true` to determine if\nit is partially visible.\n\n```js\nconst elementIsVisibleInViewport = (el, partiallyVisible = false) => {\n  const { top, left, bottom, right } = el.getBoundingClientRect();\n  const { innerHeight, innerWidth } = window;\n  return partiallyVisible\n    ? ((top > 0 && top < innerHeight) || (bottom > 0 && bottom < innerHeight)) &&\n        ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))\n    : top >= 0 && left >= 0 && bottom <= innerHeight && right <= innerWidth;\n};\n```\n\n```js\n// e.g. 100x100 viewport and a 10x10px element at position {top: -1, left: 0, bottom: 9, right: 10}\nelementIsVisibleInViewport(el); // false - (not fully visible)\nelementIsVisibleInViewport(el, true); // true - (partially visible)\n```\n","description":"### elementIsVisibleInViewport\n\nReturns `true` if the element specified is visible in the viewport, `false` otherwise.\n\nUse `Element.getBoundingClientRect()` and the `window.inner(Width|Height)` values\nto determine if a given element is visible in the viewport.\nOmit the second argument to determine if the element is entirely visible, or specify `true` to determine if\nit is partially visible.\n\n"},{"command":"elo","code":"### elo\n\nComputes the new ratings between two or more opponents using the [Elo rating system](https://en.wikipedia.org/wiki/Elo_rating_system). It takes an array\nof pre-ratings and returns an array containing post-ratings.\nThe array should be ordered from best performer to worst performer (winner -> loser).\n\nUse the exponent `**` operator and math operators to compute the expected score (chance of winning).\nof each opponent and compute the new rating for each.\nLoop through the ratings, using each permutation to compute the post-Elo rating for each player in a pairwise fashion. \nOmit the second argument to use the default `kFactor` of 32.\n\n```js\nconst elo = ([...ratings], kFactor = 32, selfRating) => {\n  const [a, b] = ratings;\n  const expectedScore = (self, opponent) => 1 / (1 + 10 ** ((opponent - self) / 400));\n  const newRating = (rating, i) =>\n    (selfRating || rating) + kFactor * (i - expectedScore(i ? a : b, i ? b : a));\n  if (ratings.length === 2) {\n    return [newRating(a, 1), newRating(b, 0)];\n  } else {\n    for (let i = 0; i < ratings.length; i++) {\n      let j = i;\n      while (j < ratings.length - 1) {\n        [ratings[i], ratings[j + 1]] = elo([ratings[i], ratings[j + 1]], kFactor);\n        j++;\n      }\n    }\n  }\n  return ratings;\n};\n```\n\n```js\n// Standard 1v1s\nelo([1200, 1200]); // [1216, 1184]\nelo([1200, 1200], 64); // [1232, 1168]\n// 4 player FFA, all same rank\nelo([1200, 1200, 1200, 1200]).map(Math.round); // [1246, 1215, 1185, 1154]\n/*\nFor teams, each rating can adjusted based on own team's average rating vs.\naverage rating of opposing team, with the score being added to their\nown individual rating by supplying it as the third argument.\n*/\n```\n","description":"### elo\n\nComputes the new ratings between two or more opponents using the [Elo rating system](https://en.wikipedia.org/wiki/Elo_rating_system). It takes an array\nof pre-ratings and returns an array containing post-ratings.\nThe array should be ordered from best performer to worst performer (winner -> loser).\n\nUse the exponent `**` operator and math operators to compute the expected score (chance of winning).\nof each opponent and compute the new rating for each.\nLoop through the ratings, using each permutation to compute the post-Elo rating for each player in a pairwise fashion. \nOmit the second argument to use the default `kFactor` of 32.\n\n"},{"command":"equals","code":"### equals\n\nPerforms a deep comparison between two values to determine if they are equivalent.\n\nCheck if the two values are identical, if they are both `Date` objects with the same time, using `Date.getTime()` or if they are both non-object values with an equivalent value (strict comparison).\nCheck if only one value is `null` or `undefined` or if their prototypes differ.\nIf none of the above conditions are met, use `Object.keys()` to check if both values have the same number of keys, then use `Array.every()` to check if every key in the first value exists in the second one and if they are equivalent by calling this method recursively.\n\n```js\nconst equals = (a, b) => {\n  if (a === b) return true;\n  if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime();\n  if (!a || !b || (typeof a != 'object' && typeof b !== 'object')) return a === b;\n  if (a === null || a === undefined || b === null || b === undefined) return false;\n  if (a.prototype !== b.prototype) return false;\n  let keys = Object.keys(a);\n  if (keys.length !== Object.keys(b).length) return false;\n  return keys.every(k => equals(a[k], b[k]));\n};\n```\n\n```js\nequals({ a: [2, { e: 3 }], b: [4], c: 'foo' }, { a: [2, { e: 3 }], b: [4], c: 'foo' }); // true\n```\n","description":"### equals\n\nPerforms a deep comparison between two values to determine if they are equivalent.\n\nCheck if the two values are identical, if they are both `Date` objects with the same time, using `Date.getTime()` or if they are both non-object values with an equivalent value (strict comparison).\nCheck if only one value is `null` or `undefined` or if their prototypes differ.\nIf none of the above conditions are met, use `Object.keys()` to check if both values have the same number of keys, then use `Array.every()` to check if every key in the first value exists in the second one and if they are equivalent by calling this method recursively.\n\n"},{"command":"escapeHTML","code":"### escapeHTML\n\nEscapes a string for use in HTML.\n\nUse `String.replace()` with a regexp that matches the characters that need to be escaped, using a callback function to replace each character instance with its associated escaped character using a dictionary (object).\n\n```js\nconst escapeHTML = str =>\n  str.replace(\n    /[&<>'\"]/g,\n    tag =>\n      ({\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        \"'\": '&#39;',\n        '\"': '&quot;'\n      }[tag] || tag)\n  );\n```\n\n```js\nescapeHTML('<a href=\"#\">Me & you</a>'); // '&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;'\n```\n","description":"### escapeHTML\n\nEscapes a string for use in HTML.\n\nUse `String.replace()` with a regexp that matches the characters that need to be escaped, using a callback function to replace each character instance with its associated escaped character using a dictionary (object).\n\n"},{"command":"escapeRegExp","code":"### escapeRegExp\n\nEscapes a string to use in a regular expression.\n\nUse `String.replace()` to escape special characters.\n\n```js\nconst escapeRegExp = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n```\n\n```js\nescapeRegExp('(test)'); // \\\\(test\\\\)\n```\n","description":"### escapeRegExp\n\nEscapes a string to use in a regular expression.\n\nUse `String.replace()` to escape special characters.\n\n"},{"command":"everyNth","code":"### everyNth\n\nReturns every nth element in an array.\n\nUse `Array.filter()` to create a new array that contains every nth element of a given array.\n\n```js\nconst everyNth = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n```\n\n```js\neveryNth([1, 2, 3, 4, 5, 6], 2); // [ 2, 4, 6 ]\n```\n","description":"### everyNth\n\nReturns every nth element in an array.\n\nUse `Array.filter()` to create a new array that contains every nth element of a given array.\n\n"},{"command":"extendHex","code":"### extendHex\n\nExtends a 3-digit color code to a 6-digit color code.\n\nUse `Array.map()`, `String.split()` and `Array.join()` to join the mapped array for converting a 3-digit RGB notated hexadecimal color-code to the 6-digit form.\n`Array.slice()` is used to remove `#` from string start since it's added once.\n\n```js\nconst extendHex = shortHex =>\n  '#' +\n  shortHex\n    .slice(shortHex.startsWith('#') ? 1 : 0)\n    .split('')\n    .map(x => x + x)\n    .join('');\n```\n\n```js\nextendHex('#03f'); // '#0033ff'\nextendHex('05a'); // '#0055aa'\n```\n","description":"### extendHex\n\nExtends a 3-digit color code to a 6-digit color code.\n\nUse `Array.map()`, `String.split()` and `Array.join()` to join the mapped array for converting a 3-digit RGB notated hexadecimal color-code to the 6-digit form.\n`Array.slice()` is used to remove `#` from string start since it's added once.\n\n"},{"command":"factorial","code":"### factorial\n\nCalculates the factorial of a number.\n\nUse recursion.\nIf `n` is less than or equal to `1`, return `1`.\nOtherwise, return the product of `n` and the factorial of `n - 1`.\nThrows an exception if `n` is a negative number.\n\n```js\nconst factorial = n =>\n  n < 0\n    ? (() => {\n        throw new TypeError('Negative numbers are not allowed!');\n      })()\n    : n <= 1 ? 1 : n * factorial(n - 1);\n```\n\n```js\nfactorial(6); // 720\n```\n","description":"### factorial\n\nCalculates the factorial of a number.\n\nUse recursion.\nIf `n` is less than or equal to `1`, return `1`.\nOtherwise, return the product of `n` and the factorial of `n - 1`.\nThrows an exception if `n` is a negative number.\n\n"},{"command":"fibonacci","code":"### fibonacci\n\nGenerates an array, containing the Fibonacci sequence, up until the nth term.\n\nCreate an empty array of the specific length, initializing the first two values (`0` and `1`).\nUse `Array.reduce()` to add values into the array, using the sum of the last two values, except for the first two.\n\n```js\nconst fibonacci = n =>\n  Array.from({ length: n }).reduce(\n    (acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i),\n    []\n  );\n```\n\n```js\nfibonacci(6); // [0, 1, 1, 2, 3, 5]\n```\n","description":"### fibonacci\n\nGenerates an array, containing the Fibonacci sequence, up until the nth term.\n\nCreate an empty array of the specific length, initializing the first two values (`0` and `1`).\nUse `Array.reduce()` to add values into the array, using the sum of the last two values, except for the first two.\n\n"},{"command":"filterNonUnique","code":"### filterNonUnique\n\nFilters out the non-unique values in an array.\n\nUse `Array.filter()` for an array containing only the unique values.\n\n```js\nconst filterNonUnique = arr => arr.filter(i => arr.indexOf(i) === arr.lastIndexOf(i));\n```\n\n```js\nfilterNonUnique([1, 2, 2, 3, 4, 4, 5]); // [1,3,5]\n```\n","description":"### filterNonUnique\n\nFilters out the non-unique values in an array.\n\nUse `Array.filter()` for an array containing only the unique values.\n\n"},{"command":"findKey","code":"### findKey\n\nReturns the first key that satisfies the provided testing function. Otherwise `undefined` is returned.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.find()` to test the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n```js\nconst findKey = (obj, fn) => Object.keys(obj).find(key => fn(obj[key], key, obj));\n```\n\n```js\nfindKey(\n  {\n    barney: { age: 36, active: true },\n    fred: { age: 40, active: false },\n    pebbles: { age: 1, active: true }\n  },\n  o => o['active']\n); // 'barney'\n```\n","description":"### findKey\n\nReturns the first key that satisfies the provided testing function. Otherwise `undefined` is returned.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.find()` to test the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n"},{"command":"findLast","code":"### findLast\n\nReturns the last element for which the provided function returns a truthy value.\n\nUse `Array.filter()` to remove elements for which `fn` returns falsey values, `Array.slice(-1)` to get the last one.\n\n```js\nconst findLast = (arr, fn) => arr.filter(fn).slice(-1)[0];\n```\n\n```js\nfindLast([1, 2, 3, 4], n => n % 2 === 1); // 3\n```\n","description":"### findLast\n\nReturns the last element for which the provided function returns a truthy value.\n\nUse `Array.filter()` to remove elements for which `fn` returns falsey values, `Array.slice(-1)` to get the last one.\n\n"},{"command":"findLastIndex","code":"### findLastIndex\n\nReturns the index of the last element for which the provided function returns a truthy value.\n\nUse `Array.map()` to map each element to an array with its index and value.\nUse `Array.filter()` to remove elements for which `fn` returns falsey values, `Array.slice(-1)` to get the last one.\n\n```js\nconst findLastIndex = (arr, fn) =>\n  arr\n    .map((val, i) => [i, val])\n    .filter(val => fn(val[1], val[0], arr))\n    .slice(-1)[0][0];\n```\n\n```js\nfindLastIndex([1, 2, 3, 4], n => n % 2 === 1); // 2 (index of the value 3)\n```\n","description":"### findLastIndex\n\nReturns the index of the last element for which the provided function returns a truthy value.\n\nUse `Array.map()` to map each element to an array with its index and value.\nUse `Array.filter()` to remove elements for which `fn` returns falsey values, `Array.slice(-1)` to get the last one.\n\n"},{"command":"findLastKey","code":"### findLastKey\n\nReturns the last key that satisfies the provided testing function. Otherwise `undefined` is returned.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.reverse()` to reverse their order and `Array.find()` to test the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n```js\nconst findLastKey = (obj, fn) =>\n  Object.keys(obj)\n    .reverse()\n    .find(key => fn(obj[key], key, obj));\n```\n\n```js\nfindLastKey(\n  {\n    barney: { age: 36, active: true },\n    fred: { age: 40, active: false },\n    pebbles: { age: 1, active: true }\n  },\n  o => o['active']\n); // 'pebbles'\n```\n","description":"### findLastKey\n\nReturns the last key that satisfies the provided testing function. Otherwise `undefined` is returned.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.reverse()` to reverse their order and `Array.find()` to test the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n"},{"command":"flatten","code":"### flatten\n\nFlattens an array up to the specified depth.\n\nUse recursion, decrementing `depth` by 1 for each level of depth.\nUse `Array.reduce()` and `Array.concat()` to merge elements or arrays.\nBase case, for `depth` equal to `1` stops recursion.\nOmit the second argument, `depth` to flatten only to a depth of `1` (single flatten).\n\n```js\nconst flatten = (arr, depth = 1) =>\n  arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth - 1) : v), []);\n```\n\n```js\nflatten([1, [2], 3, 4]); // [1, 2, 3, 4]\nflatten([1, [2, [3, [4, 5], 6], 7], 8], 2); // [1, 2, 3, [4, 5], 6, 7, 8]\n```\n","description":"### flatten\n\nFlattens an array up to the specified depth.\n\nUse recursion, decrementing `depth` by 1 for each level of depth.\nUse `Array.reduce()` and `Array.concat()` to merge elements or arrays.\nBase case, for `depth` equal to `1` stops recursion.\nOmit the second argument, `depth` to flatten only to a depth of `1` (single flatten).\n\n"},{"command":"flattenObject","code":"### flattenObject\n\nFlatten an object with the paths for keys.\n\nUse recursion.\nUse `Object.keys(obj)` combined with `Array.reduce()` to convert every leaf node to a flattened path node.\nIf the value of a key is an object, the function calls itself with the appropriate `prefix` to create the path using `Object.assign()`.\nOtherwise, it adds the appropriate prefixed key-value pair to the accumulator object.\nYou should always omit the second argument, `prefix`, unless you want every key to have a prefix.\n\n```js\nconst flattenObject = (obj, prefix = '') =>\n  Object.keys(obj).reduce((acc, k) => {\n    const pre = prefix.length ? prefix + '.' : '';\n    if (typeof obj[k] === 'object') Object.assign(acc, flattenObject(obj[k], pre + k));\n    else acc[pre + k] = obj[k];\n    return acc;\n  }, {});\n```\n\n```js\nflattenObject({ a: { b: { c: 1 } }, d: 1 }); // { 'a.b.c': 1, d: 1 }\n```\n","description":"### flattenObject\n\nFlatten an object with the paths for keys.\n\nUse recursion.\nUse `Object.keys(obj)` combined with `Array.reduce()` to convert every leaf node to a flattened path node.\nIf the value of a key is an object, the function calls itself with the appropriate `prefix` to create the path using `Object.assign()`.\nOtherwise, it adds the appropriate prefixed key-value pair to the accumulator object.\nYou should always omit the second argument, `prefix`, unless you want every key to have a prefix.\n\n"},{"command":"flip","code":"### flip\r\n\r\nFlip takes a function as an argument, then makes the first argument the last.\r\n\r\nReturn a closure that takes variadic inputs, and splices the last argument to make it the first argument before applying the rest.\r\n\r\n```js\nconst flip = fn => (first, ...rest) => fn(...rest, first);\n```\r\n\r\n```js\nlet a = { name: 'John Smith' };\nlet b = {};\nconst mergeFrom = flip(Object.assign);\nlet mergePerson = mergeFrom.bind(null, a);\nmergePerson(b); // == b\nb = {};\nObject.assign(b, a); // == b\n```\r\n","description":"### flip\r\n\r\nFlip takes a function as an argument, then makes the first argument the last.\r\n\r\nReturn a closure that takes variadic inputs, and splices the last argument to make it the first argument before applying the rest.\r\n\r\n"},{"command":"forEachRight","code":"### forEachRight\n\nExecutes a provided function once for each array element, starting from the array's last element.\n\nUse `Array.slice(0)` to clone the given array, `Array.reverse()` to reverse it and `Array.forEach()` to iterate over the reversed array.\n\n```js\nconst forEachRight = (arr, callback) =>\n  arr\n    .slice(0)\n    .reverse()\n    .forEach(callback);\n```\n\n```js\nforEachRight([1, 2, 3, 4], val => console.log(val)); // '4', '3', '2', '1'\n```\n","description":"### forEachRight\n\nExecutes a provided function once for each array element, starting from the array's last element.\n\nUse `Array.slice(0)` to clone the given array, `Array.reverse()` to reverse it and `Array.forEach()` to iterate over the reversed array.\n\n"},{"command":"forOwn","code":"### forOwn\n\nIterates over all own properties of an object, running a callback for each one.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.forEach()` to run the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n```js\nconst forOwn = (obj, fn) => Object.keys(obj).forEach(key => fn(obj[key], key, obj));\n```\n\n```js\nforOwn({ foo: 'bar', a: 1 }, v => console.log(v)); // 'bar', 1\n```\n","description":"### forOwn\n\nIterates over all own properties of an object, running a callback for each one.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.forEach()` to run the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n"},{"command":"forOwnRight","code":"### forOwnRight\n\nIterates over all own properties of an object in reverse, running a callback for each one.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.reverse()` to reverse their order and `Array.forEach()` to run the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n```js\nconst forOwnRight = (obj, fn) =>\n  Object.keys(obj)\n    .reverse()\n    .forEach(key => fn(obj[key], key, obj));\n```\n\n```js\nforOwnRight({ foo: 'bar', a: 1 }, v => console.log(v)); // 1, 'bar'\n```\n","description":"### forOwnRight\n\nIterates over all own properties of an object in reverse, running a callback for each one.\n\nUse `Object.keys(obj)` to get all the properties of the object, `Array.reverse()` to reverse their order and `Array.forEach()` to run the provided function for each key-value pair. The callback receives three arguments - the value, the key and the object.\n\n"},{"command":"formatDuration","code":"### formatDuration\n\nReturns the human readable format of the given number of milliseconds.\n\nDivide `ms` with the appropriate values to obtain the appropriate values for `day`, `hour`, `minute`, `second` and `millisecond`.\nUse `Object.entries()` with `Array.filter()` to keep only non-zero values.\nUse `Array.map()` to create the string for each value, pluralizing appropriately.\nUse `String.join(', ')` to combine the values into a string.\n\n```js\nconst formatDuration = ms => {\n  if (ms < 0) ms = -ms;\n  const time = {\n    day: Math.floor(ms / 86400000),\n    hour: Math.floor(ms / 3600000) % 24,\n    minute: Math.floor(ms / 60000) % 60,\n    second: Math.floor(ms / 1000) % 60,\n    millisecond: Math.floor(ms) % 1000\n  };\n  return Object.entries(time)\n    .filter(val => val[1] !== 0)\n    .map(val => val[1] + ' ' + (val[1] !== 1 ? val[0] + 's' : val[0]))\n    .join(', ');\n};\n```\n\n```js\nformatDuration(1001); // '1 second, 1 millisecond'\nformatDuration(34325055574); // '397 days, 6 hours, 44 minutes, 15 seconds, 574 milliseconds'\n```\n","description":"### formatDuration\n\nReturns the human readable format of the given number of milliseconds.\n\nDivide `ms` with the appropriate values to obtain the appropriate values for `day`, `hour`, `minute`, `second` and `millisecond`.\nUse `Object.entries()` with `Array.filter()` to keep only non-zero values.\nUse `Array.map()` to create the string for each value, pluralizing appropriately.\nUse `String.join(', ')` to combine the values into a string.\n\n"},{"command":"fromCamelCase","code":"### fromCamelCase\n\nConverts a string from camelcase.\n\nUse `String.replace()` to remove underscores, hyphens, and spaces and convert words to camelcase.\nOmit the second argument to use a default `separator` of `_`.\n\n```js\nconst fromCamelCase = (str, separator = '_') =>\n  str\n    .replace(/([a-z\\d])([A-Z])/g, '$1' + separator + '$2')\n    .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1' + separator + '$2')\n    .toLowerCase();\n```\n\n```js\nfromCamelCase('someDatabaseFieldName', ' '); // 'some database field name'\nfromCamelCase('someLabelThatNeedsToBeCamelized', '-'); // 'some-label-that-needs-to-be-camelized'\nfromCamelCase('someJavascriptProperty', '_'); // 'some_javascript_property'\n```\n","description":"### fromCamelCase\n\nConverts a string from camelcase.\n\nUse `String.replace()` to remove underscores, hyphens, and spaces and convert words to camelcase.\nOmit the second argument to use a default `separator` of `_`.\n\n"},{"command":"functionName","code":"### functionName\n\nLogs the name of a function.\n\nUse `console.debug()` and the `name` property of the passed method to log the method's name to the `debug` channel of the console.\n\n```js\nconst functionName = fn => (console.debug(fn.name), fn);\n```\n\n```js\nfunctionName(Math.max); // max (logged in debug channel of console)\n```\n","description":"### functionName\n\nLogs the name of a function.\n\nUse `console.debug()` and the `name` property of the passed method to log the method's name to the `debug` channel of the console.\n\n"},{"command":"functions","code":"### functions\n\nReturns an array of function property names from own (and optionally inherited) enumerable properties of an object.\n\nUse `Object.keys(obj)` to iterate over the object's own properties.\nIf `inherited` is `true`, use `Object.get.PrototypeOf(obj)` to also get the object's inherited properties.\nUse `Array.filter()` to keep only those properties that are functions.\nOmit the second argument, `inherited`, to not include inherited properties by default.\n\n```js\nconst functions = (obj, inherited = false) =>\n  (inherited\n    ? [...Object.keys(obj), ...Object.keys(Object.getPrototypeOf(obj))]\n    : Object.keys(obj)\n  ).filter(key => typeof obj[key] === 'function');\n```\n\n```js\nfunction Foo() {\n  this.a = () => 1;\n  this.b = () => 2;\n}\nFoo.prototype.c = () => 3;\nfunctions(new Foo()); // ['a', 'b']\nfunctions(new Foo(), true); // ['a', 'b', 'c']\n```\n","description":"### functions\n\nReturns an array of function property names from own (and optionally inherited) enumerable properties of an object.\n\nUse `Object.keys(obj)` to iterate over the object's own properties.\nIf `inherited` is `true`, use `Object.get.PrototypeOf(obj)` to also get the object's inherited properties.\nUse `Array.filter()` to keep only those properties that are functions.\nOmit the second argument, `inherited`, to not include inherited properties by default.\n\n"},{"command":"gcd","code":"### gcd\n\nCalculates the greatest common divisor between two or more numbers/arrays.\n\nThe inner `_gcd` function uses recursion.\nBase case is when `y` equals `0`. In this case, return `x`.\nOtherwise, return the GCD of `y` and the remainder of the division `x/y`.\n\n```js\nconst gcd = (...arr) => {\n  const _gcd = (x, y) => (!y ? x : gcd(y, x % y));\n  return [...arr].reduce((a, b) => _gcd(a, b));\n};\n```\n\n```js\ngcd(8, 36); // 4\ngcd(...[12, 8, 32]); // 4\n```\n","description":"### gcd\n\nCalculates the greatest common divisor between two or more numbers/arrays.\n\nThe inner `_gcd` function uses recursion.\nBase case is when `y` equals `0`. In this case, return `x`.\nOtherwise, return the GCD of `y` and the remainder of the division `x/y`.\n\n"},{"command":"geometricProgression","code":"### geometricProgression\n\nInitializes an array containing the numbers in the specified range where `start` and `end` are inclusive and the ratio between two terms is `step`.\nReturns an error if `step` equals `1`.\n\nUse `Array.from()`, `Math.log()` and `Math.floor()` to create an array of the desired length, `Array.map()` to fill with the desired values in a range.\nOmit the second argument, `start`, to use a default value of `1`.\nOmit the third argument, `step`, to use a default value of `2`.\n\n```js\nconst geometricProgression = (end, start = 1, step = 2) =>\n  Array.from({ length: Math.floor(Math.log(end / start) / Math.log(step)) + 1 }).map(\n    (v, i) => start * step ** i\n  );\n```\n\n```js\ngeometricProgression(256); // [1, 2, 4, 8, 16, 32, 64, 128, 256]\ngeometricProgression(256, 3); // [3, 6, 12, 24, 48, 96, 192]\ngeometricProgression(256, 1, 4); // [1, 4, 16, 64, 256]\n```\n","description":"### geometricProgression\n\nInitializes an array containing the numbers in the specified range where `start` and `end` are inclusive and the ratio between two terms is `step`.\nReturns an error if `step` equals `1`.\n\nUse `Array.from()`, `Math.log()` and `Math.floor()` to create an array of the desired length, `Array.map()` to fill with the desired values in a range.\nOmit the second argument, `start`, to use a default value of `1`.\nOmit the third argument, `step`, to use a default value of `2`.\n\n"},{"command":"get","code":"### get\n\nRetrieve a set of properties indicated by the given selectors from an object.\n\nUse `Array.map()` for each selector, `String.replace()` to replace square brackets with dots, `String.split('.')` to split each selector, `Array.filter()` to remove empty values and `Array.reduce()` to get the value indicated by it.\n\n```js\nconst get = (from, ...selectors) =>\n  [...selectors].map(s =>\n    s\n      .replace(/\\[([^\\[\\]]*)\\]/g, '.$1.')\n      .split('.')\n      .filter(t => t !== '')\n      .reduce((prev, cur) => prev && prev[cur], from)\n  );\n```\n\n```js\nconst obj = { selector: { to: { val: 'val to select' } }, target: [1, 2, { a: 'test' }] };\nget(obj, 'selector.to.val', 'target[0]', 'target[2].a'); // ['val to select', 1, 'test']\n```\n","description":"### get\n\nRetrieve a set of properties indicated by the given selectors from an object.\n\nUse `Array.map()` for each selector, `String.replace()` to replace square brackets with dots, `String.split('.')` to split each selector, `Array.filter()` to remove empty values and `Array.reduce()` to get the value indicated by it.\n\n"},{"command":"getColonTimeFromDate","code":"### getColonTimeFromDate\n\nReturns a string of the form `HH:MM:SS` from a `Date` object.\n\nUse `Date.toString()` and `String.slice()` to get the `HH:MM:SS` part of a given `Date` object.\n\n```js\nconst getColonTimeFromDate = date => date.toTimeString().slice(0, 8);\n```\n\n```js\ngetColonTimeFromDate(new Date()); // \"08:38:00\"\n```\n","description":"### getColonTimeFromDate\n\nReturns a string of the form `HH:MM:SS` from a `Date` object.\n\nUse `Date.toString()` and `String.slice()` to get the `HH:MM:SS` part of a given `Date` object.\n\n"},{"command":"getDaysDiffBetweenDates","code":"### getDaysDiffBetweenDates\n\nReturns the difference (in days) between two dates.\n\nCalculate the difference (in days) between two `Date` objects.\n\n```js\nconst getDaysDiffBetweenDates = (dateInitial, dateFinal) =>\n  (dateFinal - dateInitial) / (1000 * 3600 * 24);\n```\n\n```js\ngetDaysDiffBetweenDates(new Date('2017-12-13'), new Date('2017-12-22')); // 9\n```\n","description":"### getDaysDiffBetweenDates\n\nReturns the difference (in days) between two dates.\n\nCalculate the difference (in days) between two `Date` objects.\n\n"},{"command":"getMeridiemSuffixOfInteger","code":"### getMeridiemSuffixOfInteger\n\nConverts an integer to a suffixed string, adding `am` or `pm` based on its value.\n\nUse the modulo operator (`%`) and conditional checks to transform an integer to a stringified 12-hour format with meridiem suffix.\n\n```js\nconst getMeridiemSuffixOfInteger = num =>\n  num === 0 || num === 24\n    ? 12 + 'am'\n    : num === 12 ? 12 + 'pm' : num < 12 ? num % 12 + 'am' : num % 12 + 'pm';\n```\n\n```js\ngetMeridiemSuffixOfInteger(0); // \"12am\"\ngetMeridiemSuffixOfInteger(11); // \"11am\"\ngetMeridiemSuffixOfInteger(13); // \"1pm\"\ngetMeridiemSuffixOfInteger(25); // \"1pm\"\n```\n","description":"### getMeridiemSuffixOfInteger\n\nConverts an integer to a suffixed string, adding `am` or `pm` based on its value.\n\nUse the modulo operator (`%`) and conditional checks to transform an integer to a stringified 12-hour format with meridiem suffix.\n\n"},{"command":"getScrollPosition","code":"### getScrollPosition\n\nReturns the scroll position of the current page.\n\nUse `pageXOffset` and `pageYOffset` if they are defined, otherwise `scrollLeft` and `scrollTop`.\nYou can omit `el` to use a default value of `window`.\n\n```js\nconst getScrollPosition = (el = window) => ({\n  x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,\n  y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop\n});\n```\n\n```js\ngetScrollPosition(); // {x: 0, y: 200}\n```\n","description":"### getScrollPosition\n\nReturns the scroll position of the current page.\n\nUse `pageXOffset` and `pageYOffset` if they are defined, otherwise `scrollLeft` and `scrollTop`.\nYou can omit `el` to use a default value of `window`.\n\n"},{"command":"getStyle","code":"### getStyle\n\nReturns the value of a CSS rule for the specified element.\n\nUse `Window.getComputedStyle()` to get the value of the CSS rule for the specified element.\n\n```js\nconst getStyle = (el, ruleName) => getComputedStyle(el)[ruleName];\n```\n\n```js\ngetStyle(document.querySelector('p'), 'font-size'); // '16px'\n```\n","description":"### getStyle\n\nReturns the value of a CSS rule for the specified element.\n\nUse `Window.getComputedStyle()` to get the value of the CSS rule for the specified element.\n\n"},{"command":"getType","code":"### getType\n\nReturns the native type of a value.\n\nReturns lowercased constructor name of value, `\"undefined\"` or `\"null\"` if value is `undefined` or `null`.\n\n```js\nconst getType = v =>\n  v === undefined ? 'undefined' : v === null ? 'null' : v.constructor.name.toLowerCase();\n```\n\n```js\ngetType(new Set([1, 2, 3])); // 'set'\n```\n","description":"### getType\n\nReturns the native type of a value.\n\nReturns lowercased constructor name of value, `\"undefined\"` or `\"null\"` if value is `undefined` or `null`.\n\n"},{"command":"getURLParameters","code":"### getURLParameters\n\nReturns an object containing the parameters of the current URL.\n\nUse `String.match()` with an appropriate regular expression to get all key-value pairs, `Array.reduce()` to map and combine them into a single object.\nPass `location.search` as the argument to apply to the current `url`.\n\n```js\nconst getURLParameters = url =>\n  (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce(\n    (a, v) => ((a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1)), a),\n    {}\n  );\n```\n\n```js\ngetURLParameters('http://url.com/page?name=Adam&surname=Smith'); // {name: 'Adam', surname: 'Smith'}\ngetURLParameters('google.com'); // {}\n```\n","description":"### getURLParameters\n\nReturns an object containing the parameters of the current URL.\n\nUse `String.match()` with an appropriate regular expression to get all key-value pairs, `Array.reduce()` to map and combine them into a single object.\nPass `location.search` as the argument to apply to the current `url`.\n\n"},{"command":"groupBy","code":"### groupBy\n\nGroups the elements of an array based on the given function.\n\nUse `Array.map()` to map the values of an array to a function or property name.\nUse `Array.reduce()` to create an object, where the keys are produced from the mapped results.\n\n```js\nconst groupBy = (arr, fn) =>\n  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val, i) => {\n    acc[val] = (acc[val] || []).concat(arr[i]);\n    return acc;\n  }, {});\n```\n\n```js\ngroupBy([6.1, 4.2, 6.3], Math.floor); // {4: [4.2], 6: [6.1, 6.3]}\ngroupBy(['one', 'two', 'three'], 'length'); // {3: ['one', 'two'], 5: ['three']}\n```\n","description":"### groupBy\n\nGroups the elements of an array based on the given function.\n\nUse `Array.map()` to map the values of an array to a function or property name.\nUse `Array.reduce()` to create an object, where the keys are produced from the mapped results.\n\n"},{"command":"hammingDistance","code":"### hammingDistance\n\nCalculates the Hamming distance between two values.\n\nUse XOR operator (`^`) to find the bit difference between the two numbers, convert to a binary string using `toString(2)`.\nCount and return the number of `1`s in the string, using `match(/1/g)`.\n\n```js\nconst hammingDistance = (num1, num2) => ((num1 ^ num2).toString(2).match(/1/g) || '').length;\n```\n\n```js\nhammingDistance(2, 3); // 1\n```\n","description":"### hammingDistance\n\nCalculates the Hamming distance between two values.\n\nUse XOR operator (`^`) to find the bit difference between the two numbers, convert to a binary string using `toString(2)`.\nCount and return the number of `1`s in the string, using `match(/1/g)`.\n\n"},{"command":"hasClass","code":"### hasClass\n\nReturns `true` if the element has the specified class, `false` otherwise.\n\nUse `element.classList.contains()` to check if the element has the specified class.\n\n```js\nconst hasClass = (el, className) => el.classList.contains(className);\n```\n\n```js\nhasClass(document.querySelector('p.special'), 'special'); // true\n```\n","description":"### hasClass\n\nReturns `true` if the element has the specified class, `false` otherwise.\n\nUse `element.classList.contains()` to check if the element has the specified class.\n\n"},{"command":"hasFlags","code":"### hasFlags\n\nCheck if the current process's arguments contain the specified flags.\n\nUse `Array.every()` and `Array.includes()` to check if `process.argv` contains all the specified flags.\nUse a regular expression to test if the specified flags are prefixed with `-` or `--` and prefix them accordingly.\n\n```js\nconst hasFlags = (...flags) =>\n  flags.every(flag => process.argv.includes(/^-{1,2}/.test(flag) ? flag : '--' + flag));\n```\n\n```js\n// node myScript.js -s --test --cool=true\nhasFlags('-s'); // true\nhasFlags('--test', 'cool=true', '-s'); // true\nhasFlags('special'); // false\n```\n","description":"### hasFlags\n\nCheck if the current process's arguments contain the specified flags.\n\nUse `Array.every()` and `Array.includes()` to check if `process.argv` contains all the specified flags.\nUse a regular expression to test if the specified flags are prefixed with `-` or `--` and prefix them accordingly.\n\n"},{"command":"hashBrowser","code":"### hashBrowser\n\nCreates a hash for a value using the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) algorithm. Returns a promise.\n\nUse the [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) API to create a hash for the given value.\n\n```js\nconst hashBrowser = val =>\n  crypto.subtle.digest('SHA-256', new TextEncoder('utf-8').encode(val)).then(h => {\n    let hexes = [],\n      view = new DataView(h);\n    for (let i = 0; i < view.byteLength; i += 4)\n      hexes.push(('00000000' + view.getUint32(i).toString(16)).slice(-8));\n    return hexes.join('');\n  });\n```\n\n```js\nhashBrowser(JSON.stringify({ a: 'a', b: [1, 2, 3, 4], foo: { c: 'bar' } })).then(console.log); // '04aa106279f5977f59f9067fa9712afc4aedc6f5862a8defc34552d8c7206393'\n```\n","description":"### hashBrowser\n\nCreates a hash for a value using the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) algorithm. Returns a promise.\n\nUse the [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) API to create a hash for the given value.\n\n"},{"command":"hashNode","code":"### hashNode\n\nCreates a hash for a value using the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) algorithm. Returns a promise.\n\nUse `crypto` API to create a hash for the given value.\n\n```js\nconst crypto = require('crypto');\nconst hashNode = val =>\n  new Promise(resolve =>\n    setTimeout(\n      () =>\n        resolve(\n          crypto\n            .createHash('sha256')\n            .update(val)\n            .digest('hex')\n        ),\n      0\n    )\n  );\n```\n\n```js\nhashNode(JSON.stringify({ a: 'a', b: [1, 2, 3, 4], foo: { c: 'bar' } })).then(console.log); // '04aa106279f5977f59f9067fa9712afc4aedc6f5862a8defc34552d8c7206393'\n```\n","description":"### hashNode\n\nCreates a hash for a value using the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) algorithm. Returns a promise.\n\nUse `crypto` API to create a hash for the given value.\n\n"},{"command":"head","code":"### head\n\nReturns the head of a list.\n\nUse `arr[0]` to return the first element of the passed array.\n\n```js\nconst head = arr => arr[0];\n```\n\n```js\nhead([1, 2, 3]); // 1\n```\n","description":"### head\n\nReturns the head of a list.\n\nUse `arr[0]` to return the first element of the passed array.\n\n"},{"command":"hexToRGB","code":"### hexToRGB\n\nConverts a color code to a `rgb()` or `rgba()` string if alpha value is provided.\n\nUse bitwise right-shift operator and mask bits with `&` (and) operator to convert a hexadecimal color code (with or without prefixed with `#`) to a string with the RGB values. If it's 3-digit color code, first convert to 6-digit version. If an alpha value is provided alongside 6-digit hex, give `rgba()` string in return.\n\n```js\nconst hexToRGB = hex => {\n  let alpha = false,\n    h = hex.slice(hex.startsWith('#') ? 1 : 0);\n  if (h.length === 3) h = [...h].map(x => x + x).join('');\n  else if (h.length === 8) alpha = true;\n  h = parseInt(h, 16);\n  return (\n    'rgb' +\n    (alpha ? 'a' : '') +\n    '(' +\n    (h >>> (alpha ? 24 : 16)) +\n    ', ' +\n    ((h & (alpha ? 0x00ff0000 : 0x00ff00)) >>> (alpha ? 16 : 8)) +\n    ', ' +\n    ((h & (alpha ? 0x0000ff00 : 0x0000ff)) >>> (alpha ? 8 : 0)) +\n    (alpha ? `, ${h & 0x000000ff}` : '') +\n    ')'\n  );\n};\n```\n\n```js\nhexToRGB('#27ae60ff'); // 'rgba(39, 174, 96, 255)'\nhexToRGB('27ae60'); // 'rgb(39, 174, 96)'\nhexToRGB('#fff'); // 'rgb(255, 255, 255)'\n```\n","description":"### hexToRGB\n\nConverts a color code to a `rgb()` or `rgba()` string if alpha value is provided.\n\nUse bitwise right-shift operator and mask bits with `&` (and) operator to convert a hexadecimal color code (with or without prefixed with `#`) to a string with the RGB values. If it's 3-digit color code, first convert to 6-digit version. If an alpha value is provided alongside 6-digit hex, give `rgba()` string in return.\n\n"},{"command":"hide","code":"### hide\n\nHides all the elements specified.\n\nUse the spread operator (`...`) and `Array.forEach()` to apply `display: none` to each element specified.\n\n```js\nconst hide = (...el) => [...el].forEach(e => (e.style.display = 'none'));\n```\n\n```js\nhide(...document.querySelectorAll('img')); // Hides all <img> elements on the page\n```\n","description":"### hide\n\nHides all the elements specified.\n\nUse the spread operator (`...`) and `Array.forEach()` to apply `display: none` to each element specified.\n\n"},{"command":"httpGet","code":"### httpGet\n\nMakes a `GET` request to the passed URL.\n\nUse [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest) web api to make a `get` request to the given `url`.\nHandle the `onload` event, by calling the given `callback` the `responseText`.\nHandle the `onerror` event, by running the provided `err` function.\nOmit the third argument, `err`, to log errors to the console's `error` stream by default.\n\n```js\nconst httpGet = (url, callback, err = console.error) => {\n  const request = new XMLHttpRequest();\n  request.open('GET', url, true);\n  request.onload = () => callback(request.responseText);\n  request.onerror = () => err(request);\n  request.send();\n};\n```\n\n```js\nhttpGet(\n  'https://jsonplaceholder.typicode.com/posts/1',\n  console.log\n); /* \nLogs: {\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\n*/\n```\n","description":"### httpGet\n\nMakes a `GET` request to the passed URL.\n\nUse [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest) web api to make a `get` request to the given `url`.\nHandle the `onload` event, by calling the given `callback` the `responseText`.\nHandle the `onerror` event, by running the provided `err` function.\nOmit the third argument, `err`, to log errors to the console's `error` stream by default.\n\n"},{"command":"httpPost","code":"### httpPost\n\nMakes a `POST` request to the passed URL.\n\nUse [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest) web api to make a `post` request to the given `url`.\nSet the value of an `HTTP` request header with `setRequestHeader` method.\nHandle the `onload` event, by calling the given `callback` the `responseText`.\nHandle the `onerror` event, by running the provided `err` function.\nOmit the third argument, `data`, to send no data to the provided `url`.\nOmit the fourth argument, `err`, to log errors to the console's `error` stream by default.\n\n```js\nconst httpPost = (url, data, callback, err = console.error) => {\n  const request = new XMLHttpRequest();\n  request.open('POST', url, true);\n  request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n  request.onload = () => callback(request.responseText);\n  request.onerror = () => err(request);\n  request.send(data);\n};\n```\n\n```js\nconst newPost = {\n  userId: 1,\n  id: 1337,\n  title: 'Foo',\n  body: 'bar bar bar'\n};\nconst data = JSON.stringify(newPost);\nhttpPost(\n  'https://jsonplaceholder.typicode.com/posts',\n  data,\n  console.log\n); /*\nLogs: {\n  \"userId\": 1,\n  \"id\": 1337,\n  \"title\": \"Foo\",\n  \"body\": \"bar bar bar\"\n}\n*/\nhttpPost(\n  'https://jsonplaceholder.typicode.com/posts',\n  null, //does not send a body\n  console.log\n); /*\nLogs: {\n  \"id\": 101\n}\n*/\n```\n","description":"### httpPost\n\nMakes a `POST` request to the passed URL.\n\nUse [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest) web api to make a `post` request to the given `url`.\nSet the value of an `HTTP` request header with `setRequestHeader` method.\nHandle the `onload` event, by calling the given `callback` the `responseText`.\nHandle the `onerror` event, by running the provided `err` function.\nOmit the third argument, `data`, to send no data to the provided `url`.\nOmit the fourth argument, `err`, to log errors to the console's `error` stream by default.\n\n"},{"command":"httpsRedirect","code":"### httpsRedirect\n\nRedirects the page to HTTPS if its currently in HTTP. Also, pressing the back button doesn't take it back to the HTTP page as its replaced in the history.\n\nUse `location.protocol` to get the protocol currently being used. If it's not HTTPS, use `location.replace()` to replace the existing page with the HTTPS version of the page. Use `location.href` to get the full address, split it with `String.split()` and remove the protocol part of the URL.  \n\n```js\nconst httpsRedirect = () => {\n  if (location.protocol !== 'https:') location.replace('https://' + location.href.split('//')[1]);\n};\n```\n\n```js\nhttpsRedirect(); // If you are on http://mydomain.com, you are redirected to https://mydomain.com\n```\n","description":"### httpsRedirect\n\nRedirects the page to HTTPS if its currently in HTTP. Also, pressing the back button doesn't take it back to the HTTP page as its replaced in the history.\n\nUse `location.protocol` to get the protocol currently being used. If it's not HTTPS, use `location.replace()` to replace the existing page with the HTTPS version of the page. Use `location.href` to get the full address, split it with `String.split()` and remove the protocol part of the URL.  \n\n"},{"command":"inRange","code":"### inRange\n\nChecks if the given number falls within the given range.\n\nUse arithmetic comparison to check if the given number is in the specified range.\nIf the second parameter, `end`, is not specified, the range is considered to be from `0` to `start`.\n\n```js\nconst inRange = (n, start, end = null) => {\n  if (end && start > end) end = [start, (start = end)][0];\n  return end == null ? n >= 0 && n < start : n >= start && n < end;\n};\n```\n\n```js\ninRange(3, 2, 5); // true\ninRange(3, 4); // true\ninRange(2, 3, 5); // false\ninrange(3, 2); // false\n```\n","description":"### inRange\n\nChecks if the given number falls within the given range.\n\nUse arithmetic comparison to check if the given number is in the specified range.\nIf the second parameter, `end`, is not specified, the range is considered to be from `0` to `start`.\n\n"},{"command":"indexOfAll","code":"### indexOfAll\n\nReturns all indices of `val` in an array. If `val` never occurs, returns `[]`.\n\nUse `Array.forEach()` to loop over elements and `Array.push()` to store indices for matching elements.\nReturn the array of indices.\n\n```js\nconst indexOfAll = (arr, val) => {\n  const indices = [];\n  arr.forEach((el, i) => el === val && indices.push(i));\n  return indices;\n};\n```\n\n```js\nindexOfAll([1, 2, 3, 1, 2, 3], 1); // [0,3]\nindexOfAll([1, 2, 3], 4); // []\n```\n","description":"### indexOfAll\n\nReturns all indices of `val` in an array. If `val` never occurs, returns `[]`.\n\nUse `Array.forEach()` to loop over elements and `Array.push()` to store indices for matching elements.\nReturn the array of indices.\n\n"},{"command":"initial","code":"### initial\n\nReturns all the elements of an array except the last one.\n\nUse `arr.slice(0,-1)` to return all but the last element of the array.\n\n```js\nconst initial = arr => arr.slice(0, -1);\n```\n\n```js\ninitial([1, 2, 3]); // [1,2]\n```\n","description":"### initial\n\nReturns all the elements of an array except the last one.\n\nUse `arr.slice(0,-1)` to return all but the last element of the array.\n\n"},{"command":"initialize2DArray","code":"### initialize2DArray\n\nInitializes a 2D array of given width and height and value.\n\nUse `Array.map()` to generate h rows where each is a new array of size w initialize with value. If the value is not provided, default to `null`.\n\n```js\nconst initialize2DArray = (w, h, val = null) =>\n  Array.from({ length: h }).map(() => Array.from({ length: w }).fill(val));\n```\n\n```js\ninitialize2DArray(2, 2, 0); // [[0,0], [0,0]]\n```\n","description":"### initialize2DArray\n\nInitializes a 2D array of given width and height and value.\n\nUse `Array.map()` to generate h rows where each is a new array of size w initialize with value. If the value is not provided, default to `null`.\n\n"},{"command":"initializeArrayWithRange","code":"### initializeArrayWithRange\n\nInitializes an array containing the numbers in the specified range where `start` and `end` are inclusive with their common difference `step`.\n\nUse `Array.from(Math.ceil((end+1-start)/step))` to create an array of the desired length(the amounts of elements is equal to `(end-start)/step` or `(end+1-start)/step` for inclusive end), `Array.map()` to fill with the desired values in a range.\nYou can omit `start` to use a default value of `0`.\nYou can omit `step` to use a default value of `1`.\n\n```js\nconst initializeArrayWithRange = (end, start = 0, step = 1) =>\n  Array.from({ length: Math.ceil((end + 1 - start) / step) }).map((v, i) => i * step + start);\n```\n\n```js\ninitializeArrayWithRange(5); // [0,1,2,3,4,5]\ninitializeArrayWithRange(7, 3); // [3,4,5,6,7]\ninitializeArrayWithRange(9, 0, 2); // [0,2,4,6,8]\n```\n","description":"### initializeArrayWithRange\n\nInitializes an array containing the numbers in the specified range where `start` and `end` are inclusive with their common difference `step`.\n\nUse `Array.from(Math.ceil((end+1-start)/step))` to create an array of the desired length(the amounts of elements is equal to `(end-start)/step` or `(end+1-start)/step` for inclusive end), `Array.map()` to fill with the desired values in a range.\nYou can omit `start` to use a default value of `0`.\nYou can omit `step` to use a default value of `1`.\n\n"},{"command":"initializeArrayWithRangeRight","code":"### initializeArrayWithRangeRight\n\nInitializes an array containing the numbers in the specified range (in reverse) where `start` and `end` are inclusive with their common difference `step`.\n\nUse `Array.from(Math.ceil((end+1-start)/step))` to create an array of the desired length(the amounts of elements is equal to `(end-start)/step` or `(end+1-start)/step` for inclusive end), `Array.map()` to fill with the desired values in a range.\nYou can omit `start` to use a default value of `0`.\nYou can omit `step` to use a default value of `1`.\n\n```js\nconst initializeArrayWithRangeRight = (end, start = 0, step = 1) =>\n  Array.from({ length: Math.ceil((end + 1 - start) / step) }).map(\n    (v, i, arr) => (arr.length - i - 1) * step + start\n  );\n```\n\n```js\ninitializeArrayWithRangeRight(5); // [5,4,3,2,1,0]\ninitializeArrayWithRangeRight(7, 3); // [7,6,5,4,3]\ninitializeArrayWithRangeRight(9, 0, 2); // [8,6,4,2,0]\n```\n","description":"### initializeArrayWithRangeRight\n\nInitializes an array containing the numbers in the specified range (in reverse) where `start` and `end` are inclusive with their common difference `step`.\n\nUse `Array.from(Math.ceil((end+1-start)/step))` to create an array of the desired length(the amounts of elements is equal to `(end-start)/step` or `(end+1-start)/step` for inclusive end), `Array.map()` to fill with the desired values in a range.\nYou can omit `start` to use a default value of `0`.\nYou can omit `step` to use a default value of `1`.\n\n"},{"command":"initializeArrayWithValues","code":"### initializeArrayWithValues\n\nInitializes and fills an array with the specified values.\n\nUse `Array(n)` to create an array of the desired length, `fill(v)` to fill it with the desired values.\nYou can omit `val` to use a default value of `0`.\n\n```js\nconst initializeArrayWithValues = (n, val = 0) => Array(n).fill(val);\n```\n\n```js\ninitializeArrayWithValues(5, 2); // [2,2,2,2,2]\n```\n","description":"### initializeArrayWithValues\n\nInitializes and fills an array with the specified values.\n\nUse `Array(n)` to create an array of the desired length, `fill(v)` to fill it with the desired values.\nYou can omit `val` to use a default value of `0`.\n\n"},{"command":"intersection","code":"### intersection\n\nReturns a list of elements that exist in both arrays.\n\nCreate a `Set` from `b`, then use `Array.filter()` on `a` to only keep values contained in `b`.\n\n```js\nconst intersection = (a, b) => {\n  const s = new Set(b);\n  return a.filter(x => s.has(x));\n};\n```\n\n```js\nintersection([1, 2, 3], [4, 3, 2]); // [2,3]\n```\n","description":"### intersection\n\nReturns a list of elements that exist in both arrays.\n\nCreate a `Set` from `b`, then use `Array.filter()` on `a` to only keep values contained in `b`.\n\n"},{"command":"intersectionBy","code":"### intersectionBy\n\nReturns a list of elements that exist in both arrays, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying `fn` to all elements in `b`, then use `Array.filter()` on `a` to only keep elements, which produce values contained in `b` when `fn` is applied to them.\n\n```js\nconst intersectionBy = (a, b, fn) => {\n  const s = new Set(b.map(x => fn(x)));\n  return a.filter(x => s.has(fn(x)));\n};\n```\n\n```js\nintersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor); // [2.1]\n```\n","description":"### intersectionBy\n\nReturns a list of elements that exist in both arrays, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying `fn` to all elements in `b`, then use `Array.filter()` on `a` to only keep elements, which produce values contained in `b` when `fn` is applied to them.\n\n"},{"command":"intersectionWith","code":"### intersectionWith\n\nReturns a list of elements that exist in both arrays, using a provided comparator function.\n\nUse `Array.filter()` and `Array.findIndex()` in combination with the provided comparator to determine intersecting values.\n\n```js\nconst intersectionWith = (a, b, comp) => a.filter(x => b.findIndex(y => comp(x, y)) !== -1);\n```\n\n```js\nintersectionWith([1, 1.2, 1.5, 3, 0], [1.9, 3, 0, 3.9], (a, b) => Math.round(a) === Math.round(b)); // [1.5, 3, 0]\n```\n","description":"### intersectionWith\n\nReturns a list of elements that exist in both arrays, using a provided comparator function.\n\nUse `Array.filter()` and `Array.findIndex()` in combination with the provided comparator to determine intersecting values.\n\n"},{"command":"invertKeyValues","code":"### invertKeyValues\n\nInverts the key-value pairs of an object, without mutating it. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value. If a function is supplied, it is applied to each inverted key.\n\nUse `Object.keys()` and `Array.reduce()` to invert the key-value pairs of an object and apply the function provided (if any).\nOmit the second argument, `fn`, to get the inverted keys without applying a function to them.\n\n```js\nconst invertKeyValues = (obj, fn) =>\n  Object.keys(obj).reduce((acc, key) => {\n    const val = fn ? fn(obj[key]) : obj[key];\n    acc[val] = acc[val] || [];\n    acc[val].push(key);\n    return acc;\n  }, {});\n```\n\n```js\ninvertKeyValues({ a: 1, b: 2, c: 1 }); // { 1: [ 'a', 'c' ], 2: [ 'b' ] }\ninvertKeyValues({ a: 1, b: 2, c: 1 }, value => 'group' + value); // { group1: [ 'a', 'c' ], group2: [ 'b' ] }\n```\n","description":"### invertKeyValues\n\nInverts the key-value pairs of an object, without mutating it. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value. If a function is supplied, it is applied to each inverted key.\n\nUse `Object.keys()` and `Array.reduce()` to invert the key-value pairs of an object and apply the function provided (if any).\nOmit the second argument, `fn`, to get the inverted keys without applying a function to them.\n\n"},{"command":"is","code":"### is\n\nChecks if the provided value is of the specified type (doesn't work with literals).\n\nUse the `instanceof` operator to check if the provided value is of the specified `type`.\n\n```js\nconst is = (type, val) => val instanceof type;\n```\n\n```js\nis(Array, [1]); // true\nis(ArrayBuffer, new ArrayBuffer()); // true\nis(Map, new Map()); // true\nis(RegExp, /./g); // true\nis(Set, new Set()); // true\nis(WeakMap, new WeakMap()); // true\nis(WeakSet, new WeakSet()); // true\nis(String, ''); // false\nis(String, new String('')); // true\nis(Number, 1); // false\nis(Number, new Number(1)); // true\nis(Boolean, true); // false\nis(Boolean, new Boolean(true)); // true\n```\n","description":"### is\n\nChecks if the provided value is of the specified type (doesn't work with literals).\n\nUse the `instanceof` operator to check if the provided value is of the specified `type`.\n\n"},{"command":"isAbsoluteURL","code":"### isAbsoluteURL\n\nReturns `true` if the given string is an absolute URL, `false` otherwise.\n\nUse a regular expression to test if the string is an absolute URL.\n\n```js\nconst isAbsoluteURL = str => /^[a-z][a-z0-9+.-]*:/.test(str);\n```\n\n```js\nisAbsoluteURL('https://google.com'); // true\nisAbsoluteURL('ftp://www.myserver.net'); // true\nisAbsoluteURL('/foo/bar'); // false\n```\n","description":"### isAbsoluteURL\n\nReturns `true` if the given string is an absolute URL, `false` otherwise.\n\nUse a regular expression to test if the string is an absolute URL.\n\n"},{"command":"isAnagram","code":"### isAnagram\n\nChecks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).\n\nUse `String.toLowerCase()`, `String.replace()` with an appropriate regular expression to remove unnecessary characters, `String.split('')`, `Array.sort()` and `Array.join('')` on both strings to normalize them, then check if their normalized forms are equal.\n\n```js\nconst isAnagram = (str1, str2) => {\n  const normalize = str =>\n    str\n      .toLowerCase()\n      .replace(/[^a-z0-9]/gi, '')\n      .split('')\n      .sort()\n      .join('');\n  return normalize(str1) === normalize(str2);\n};\n```\n\n```js\nisAnagram('iceman', 'cinema'); // true\n```\n","description":"### isAnagram\n\nChecks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).\n\nUse `String.toLowerCase()`, `String.replace()` with an appropriate regular expression to remove unnecessary characters, `String.split('')`, `Array.sort()` and `Array.join('')` on both strings to normalize them, then check if their normalized forms are equal.\n\n"},{"command":"isArrayLike","code":"### isArrayLike\n\nChecks if the provided argument is array-like (i.e. is iterable).\n\nUse the spread operator (`...`) to check if the provided argument is iterable inside a `try... catch` block and the comma operator (`,`) to return the appropriate value.\n\n```js\nconst isArrayLike = val => {\n  try {\n    return [...val], true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n```js\nisArrayLike(document.querySelectorAll('.className')); // true\nisArrayLike('abc'); // true\nisArrayLike(null); // false\n```\n","description":"### isArrayLike\n\nChecks if the provided argument is array-like (i.e. is iterable).\n\nUse the spread operator (`...`) to check if the provided argument is iterable inside a `try... catch` block and the comma operator (`,`) to return the appropriate value.\n\n"},{"command":"isBoolean","code":"### isBoolean\n\nChecks if the given argument is a native boolean element.\n\nUse `typeof` to check if a value is classified as a boolean primitive.\n\n```js\nconst isBoolean = val => typeof val === 'boolean';\n```\n\n```js\nisBoolean(null); // false\nisBoolean(false); // true\n```\n","description":"### isBoolean\n\nChecks if the given argument is a native boolean element.\n\nUse `typeof` to check if a value is classified as a boolean primitive.\n\n"},{"command":"isBrowser","code":"### isBrowser\n\nDetermines if the current runtime environment is a browser so that front-end modules can run on the server (Node) without throwing errors.\n\nUse `Array.includes()` on the `typeof` values of both `window` and `document` (globals usually only available in a browser environment unless they were explicitly defined), which will return `true` if one of them is `undefined`. \n`typeof` allows globals to be checked for existence without throwing a `ReferenceError`. \nIf both of them are not `undefined`, then the current environment is assumed to be a browser.\n\n```js\nconst isBrowser = () => ![typeof window, typeof document].includes('undefined');\n```\n\n```js\nisBrowser(); // true (browser)\nisBrowser(); // false (Node)\n```\n","description":"### isBrowser\n\nDetermines if the current runtime environment is a browser so that front-end modules can run on the server (Node) without throwing errors.\n\nUse `Array.includes()` on the `typeof` values of both `window` and `document` (globals usually only available in a browser environment unless they were explicitly defined), which will return `true` if one of them is `undefined`. \n`typeof` allows globals to be checked for existence without throwing a `ReferenceError`. \nIf both of them are not `undefined`, then the current environment is assumed to be a browser.\n\n"},{"command":"isDivisible","code":"### isDivisible\n\nChecks if the first numeric argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n```js\nconst isDivisible = (dividend, divisor) => dividend % divisor === 0;\n```\n\n```js\nisDivisible(6, 3); // true\n```\n","description":"### isDivisible\n\nChecks if the first numeric argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n"},{"command":"isEmpty","code":"### isEmpty\n\nReturns true if the a value is an empty object, collection, map or set, has no enumerable properties or is any type that is not considered a collection.\n\nCheck if the provided value is `null` or if its `length` is equal to `0`.\n\n```js\nconst isEmpty = val => val == null || !(Object.keys(val) || val).length;\n```\n\n```js\nisEmpty(new Map()); // true\nisEmpty(new Set()); // true\nisEmpty([]); // true\nisEmpty({}); // true\nisEmpty(''); // true\nisEmpty([1, 2]); // false\nisEmpty({ a: 1, b: 2 }); // false\nisEmpty('text'); // false\nisEmpty(123); // true - type is not considered a collection\nisEmpty(true); // true - type is not considered a collection\n```\n","description":"### isEmpty\n\nReturns true if the a value is an empty object, collection, map or set, has no enumerable properties or is any type that is not considered a collection.\n\nCheck if the provided value is `null` or if its `length` is equal to `0`.\n\n"},{"command":"isEven","code":"### isEven\n\nReturns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator.\nReturns `true` if the number is even, `false` if the number is odd.\n\n```js\nconst isEven = num => num % 2 === 0;\n```\n\n```js\nisEven(3); // false\n```\n","description":"### isEven\n\nReturns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator.\nReturns `true` if the number is even, `false` if the number is odd.\n\n"},{"command":"isFunction","code":"### isFunction\n\nChecks if the given argument is a function.\n\nUse `typeof` to check if a value is classified as a function primitive.\n\n```js\nconst isFunction = val => typeof val === 'function';\n```\n\n```js\nisFunction('x'); // false\nisFunction(x => x); // true\n```\n","description":"### isFunction\n\nChecks if the given argument is a function.\n\nUse `typeof` to check if a value is classified as a function primitive.\n\n"},{"command":"isLowerCase","code":"### isLowerCase\n\nChecks if a string is lower case.\n\nConvert the given string to lower case, using `String.toLowerCase()` and compare it to the original.\n\n```js\nconst isLowerCase = str => str === str.toLowerCase();\n```\n\n```js\nisLowerCase('abc'); // true\nisLowerCase('a3@$'); // true\nisLowerCase('Ab4'); // false\n```\n","description":"### isLowerCase\n\nChecks if a string is lower case.\n\nConvert the given string to lower case, using `String.toLowerCase()` and compare it to the original.\n\n"},{"command":"isNil","code":"### isNil\n\nReturns `true` if the specified value is `null` or `undefined`, `false` otherwise.\n\nUse the strict equality operator to check if the value and of `val` are equal to `null` or `undefined`.\n\n```js\nconst isNil = val => val === undefined || val === null;\n```\n\n```js\nisNil(null); // true\nisNil(undefined); // true\n```\n","description":"### isNil\n\nReturns `true` if the specified value is `null` or `undefined`, `false` otherwise.\n\nUse the strict equality operator to check if the value and of `val` are equal to `null` or `undefined`.\n\n"},{"command":"isNull","code":"### isNull\n\nReturns `true` if the specified value is `null`, `false` otherwise.\n\nUse the strict equality operator to check if the value and of `val` are equal to `null`.\n\n```js\nconst isNull = val => val === null;\n```\n\n```js\nisNull(null); // true\n```\n","description":"### isNull\n\nReturns `true` if the specified value is `null`, `false` otherwise.\n\nUse the strict equality operator to check if the value and of `val` are equal to `null`.\n\n"},{"command":"isNumber","code":"### isNumber\n\nChecks if the given argument is a number.\n\nUse `typeof` to check if a value is classified as a number primitive.\n\n```js\nconst isNumber = val => typeof val === 'number';\n```\n\n```js\nisNumber('1'); // false\nisNumber(1); // true\n```\n","description":"### isNumber\n\nChecks if the given argument is a number.\n\nUse `typeof` to check if a value is classified as a number primitive.\n\n"},{"command":"isObject","code":"### isObject\n\nReturns a boolean determining if the passed value is an object or not.\n\nUses the  `Object` constructor to create an object wrapper for the given value. \nIf the value is `null` or `undefined`, create and return an empty object. Οtherwise, return an object of a type that corresponds to the given value.\n\n```js\nconst isObject = obj => obj === Object(obj);\n```\n\n```js\nisObject([1, 2, 3, 4]); // true\nisObject([]); // true\nisObject(['Hello!']); // true\nisObject({ a: 1 }); // true\nisObject({}); // true\nisObject(true); // false\n```\n","description":"### isObject\n\nReturns a boolean determining if the passed value is an object or not.\n\nUses the  `Object` constructor to create an object wrapper for the given value. \nIf the value is `null` or `undefined`, create and return an empty object. Οtherwise, return an object of a type that corresponds to the given value.\n\n"},{"command":"isObjectLike","code":"### isObjectLike\n\nChecks if a value is object-like.\n\nCheck if the provided value is not `null` and its `typeof` is equal to `'object'`.\n\n```js\nconst isObjectLike = val => val !== null && typeof val === 'object';\n```\n\n```js\nisObjectLike({}); // true\nisObjectLike([1, 2, 3]); // true\nisObjectLike(x => x); // false\nisObjectLike(null); // false\n```\n","description":"### isObjectLike\n\nChecks if a value is object-like.\n\nCheck if the provided value is not `null` and its `typeof` is equal to `'object'`.\n\n"},{"command":"isPlainObject","code":"### isPlainObject\n\nChecks if the provided value is an object created by the Object constructor.\n\nCheck if the provided value is truthy, use `typeof` to check if it is an object and `Object.constructor` to make sure the constructor is equal to `Object`.\n\n```js\nconst isPlainObject = val => !!val && typeof val === 'object' && val.constructor === Object;\n```\n\n```js\nisPlainObject({ a: 1 }); // true\nisPlainObject(new Map()); // false\n```\n","description":"### isPlainObject\n\nChecks if the provided value is an object created by the Object constructor.\n\nCheck if the provided value is truthy, use `typeof` to check if it is an object and `Object.constructor` to make sure the constructor is equal to `Object`.\n\n"},{"command":"isPrime","code":"### isPrime\n\nChecks if the provided integer is a prime number.\n\nCheck numbers from `2` to the square root of the given number.\nReturn `false` if any of them divides the given number, else return `true`, unless the number is less than `2`.\n\n```js\nconst isPrime = num => {\n  const boundary = Math.floor(Math.sqrt(num));\n  for (var i = 2; i <= boundary; i++) if (num % i === 0) return false;\n  return num >= 2;\n};\n```\n\n```js\nisPrime(11); // true\n```\n","description":"### isPrime\n\nChecks if the provided integer is a prime number.\n\nCheck numbers from `2` to the square root of the given number.\nReturn `false` if any of them divides the given number, else return `true`, unless the number is less than `2`.\n\n"},{"command":"isPrimitive","code":"### isPrimitive\n\nReturns a boolean determining if the passed value is primitive or not.\n\nUse `Array.includes()` on an array of type strings which are not primitive,\nsupplying the type using `typeof`.\nSince `typeof null` evaluates to `'object'`, it needs to be directly compared.\n\n```js\nconst isPrimitive = val => !['object', 'function'].includes(typeof val) || val === null;\n```\n\n```js\nisPrimitive(null); // true\nisPrimitive(50); // true\nisPrimitive('Hello!'); // true\nisPrimitive(false); // true\nisPrimitive(Symbol()); // true\nisPrimitive([]); // false\n```\n","description":"### isPrimitive\n\nReturns a boolean determining if the passed value is primitive or not.\n\nUse `Array.includes()` on an array of type strings which are not primitive,\nsupplying the type using `typeof`.\nSince `typeof null` evaluates to `'object'`, it needs to be directly compared.\n\n"},{"command":"isPromiseLike","code":"### isPromiseLike\n\nReturns `true` if an object looks like a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), `false` otherwise.\n\nCheck if the object is not `null`, its `typeof` matches either `object` or `function` and if it has a `.then` property, which is also a `function`.\n\n```js\nconst isPromiseLike = obj =>\n  obj !== null &&\n  (typeof obj === 'object' || typeof obj === 'function') &&\n  typeof obj.then === 'function';\n```\n\n```js\nisPromiseLike({\n  then: function() {\n    return '';\n  }\n}); // true\nisPromiseLike(null); // false\nisPromiseLike({}); // false\n```\n","description":"### isPromiseLike\n\nReturns `true` if an object looks like a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), `false` otherwise.\n\nCheck if the object is not `null`, its `typeof` matches either `object` or `function` and if it has a `.then` property, which is also a `function`.\n\n"},{"command":"isSorted","code":"### isSorted\n\nReturns `1` if the array is sorted in ascending order, `-1` if it is sorted in descending order or `0` if it is not sorted.\n\nCalculate the ordering `direction` for the first two elements.\nUse `Object.entries()` to loop over array objects and compare them in pairs.\nReturn `0` if the `direction` changes or the `direction` if the last element is reached.\n\n```js\nconst isSorted = arr => {\n  let direction = -(arr[0] - arr[1]);\n  for (let [i, val] of arr.entries()) {\n    direction = !direction ? -(arr[i - 1] - arr[i]) : direction;\n    if (i === arr.length - 1) return !direction ? 0 : direction;\n    else if ((val - arr[i + 1]) * direction > 0) return 0;\n  }\n};\n```\n\n```js\nisSorted([0, 1, 2, 2]); // 1\nisSorted([4, 3, 2]); // -1\nisSorted([4, 3, 5]); // 0\n```\n","description":"### isSorted\n\nReturns `1` if the array is sorted in ascending order, `-1` if it is sorted in descending order or `0` if it is not sorted.\n\nCalculate the ordering `direction` for the first two elements.\nUse `Object.entries()` to loop over array objects and compare them in pairs.\nReturn `0` if the `direction` changes or the `direction` if the last element is reached.\n\n"},{"command":"isString","code":"### isString\n\nChecks if the given argument is a string.\n\nUse `typeof` to check if a value is classified as a string primitive.\n\n```js\nconst isString = val => typeof val === 'string';\n```\n\n```js\nisString('10'); // true\n```\n","description":"### isString\n\nChecks if the given argument is a string.\n\nUse `typeof` to check if a value is classified as a string primitive.\n\n"},{"command":"isSymbol","code":"### isSymbol\n\nChecks if the given argument is a symbol.\n\nUse `typeof` to check if a value is classified as a symbol primitive.\n\n```js\nconst isSymbol = val => typeof val === 'symbol';\n```\n\n```js\nisSymbol(Symbol('x')); // true\n```\n","description":"### isSymbol\n\nChecks if the given argument is a symbol.\n\nUse `typeof` to check if a value is classified as a symbol primitive.\n\n"},{"command":"isTravisCI","code":"### isTravisCI\n\nChecks if the current environment is [Travis CI](https://travis-ci.org/).\n\nChecks if the current environment has the `TRAVIS` and `CI` environment variables ([reference](https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables)).\n\n```js\nconst isTravisCI = () => 'TRAVIS' in process.env && 'CI' in process.env;\n```\n\n```js\nisTravisCI(); // true (if code is running on Travis CI)\n```\n","description":"### isTravisCI\n\nChecks if the current environment is [Travis CI](https://travis-ci.org/).\n\nChecks if the current environment has the `TRAVIS` and `CI` environment variables ([reference](https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables)).\n\n"},{"command":"isUndefined","code":"### isUndefined\n\nReturns `true` if the specified value is `undefined`, `false` otherwise.\n\nUse the strict equality operator to check if the value and of `val` are equal to `undefined`.\n\n```js\nconst isUndefined = val => val === undefined;\n```\n\n```js\nisUndefined(undefined); // true\n```\n","description":"### isUndefined\n\nReturns `true` if the specified value is `undefined`, `false` otherwise.\n\nUse the strict equality operator to check if the value and of `val` are equal to `undefined`.\n\n"},{"command":"isUpperCase","code":"### isUpperCase\n\nChecks if a string is upper case.\n\nConvert the given string to upper case, using `String.toUpperCase()` and compare it to the original.\n\n\n```js\nconst isUpperCase = str => str === str.toUpperCase();\n```\n\n```js\nisUpperCase('ABC'); // true\nisLowerCase('A3@$'); // true\nisLowerCase('aB4'); // false\n```\n","description":"### isUpperCase\n\nChecks if a string is upper case.\n\nConvert the given string to upper case, using `String.toUpperCase()` and compare it to the original.\n\n\n"},{"command":"isValidJSON","code":"### isValidJSON\n\nChecks if the provided argument is a valid JSON.\n\nUse `JSON.parse()` and a `try... catch` block to check if the provided argument is a valid JSON.\n\n```js\nconst isValidJSON = obj => {\n  try {\n    JSON.parse(obj);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n```js\nisValidJSON('{\"name\":\"Adam\",\"age\":20}'); // true\nisValidJSON('{\"name\":\"Adam\",age:\"20\"}'); // false\nisValidJSON(null); // true\n```\n","description":"### isValidJSON\n\nChecks if the provided argument is a valid JSON.\n\nUse `JSON.parse()` and a `try... catch` block to check if the provided argument is a valid JSON.\n\n"},{"command":"join","code":"### join\n\nJoins all elements of an array into a string and returns this string. Uses a separator and an end separator.\n\nUse `Array.reduce()` to combine elements into a string.\nOmit the second argument, `separator`, to use a default separator of `','`.\nOmit the third argument, `end`, to use the same value as `separator` by default.\n\n```js\nconst join = (arr, separator = ',', end = separator) =>\n  arr.reduce(\n    (acc, val, i) =>\n      i === arr.length - 2\n        ? acc + val + end\n        : i === arr.length - 1 ? acc + val : acc + val + separator,\n    ''\n  );\n```\n\n```js\njoin(['pen', 'pineapple', 'apple', 'pen'], ',', '&'); // \"pen,pineapple,apple&pen\"\njoin(['pen', 'pineapple', 'apple', 'pen'], ','); // \"pen,pineapple,apple,pen\"\njoin(['pen', 'pineapple', 'apple', 'pen']); // \"pen,pineapple,apple,pen\"\n```\n","description":"### join\n\nJoins all elements of an array into a string and returns this string. Uses a separator and an end separator.\n\nUse `Array.reduce()` to combine elements into a string.\nOmit the second argument, `separator`, to use a default separator of `','`.\nOmit the third argument, `end`, to use the same value as `separator` by default.\n\n"},{"command":"last","code":"### last\n\nReturns the last element in an array.\n\nUse `arr.length - 1` to compute the index of the last element of the given array and returning it.\n\n```js\nconst last = arr => arr[arr.length - 1];\n```\n\n```js\nlast([1, 2, 3]); // 3\n```\n","description":"### last\n\nReturns the last element in an array.\n\nUse `arr.length - 1` to compute the index of the last element of the given array and returning it.\n\n"},{"command":"lcm","code":"### lcm\n\nReturns the least common multiple of two or more numbers.\n\nUse the greatest common divisor (GCD) formula and the fact that `lcm(x,y) = x * y / gcd(x,y)` to determine the least common multiple.\nThe GCD formula uses recursion.\n\n```js\nconst lcm = (...arr) => {\n  const gcd = (x, y) => (!y ? x : gcd(y, x % y));\n  const _lcm = (x, y) => x * y / gcd(x, y);\n  return [...arr].reduce((a, b) => _lcm(a, b));\n};\n```\n\n```js\nlcm(12, 7); // 84\nlcm(...[1, 3, 4, 5]); // 60\n```\n","description":"### lcm\n\nReturns the least common multiple of two or more numbers.\n\nUse the greatest common divisor (GCD) formula and the fact that `lcm(x,y) = x * y / gcd(x,y)` to determine the least common multiple.\nThe GCD formula uses recursion.\n\n"},{"command":"longestItem","code":"### longestItem\n\nTakes any number of iterable objects or objects with a `length` property and returns the longest one.\n\nUse `Array.sort()` to sort all arguments by `length`, return the first (longest) one.\n\n```js\nconst longestItem = (...vals) => [...vals].sort((a, b) => b.length - a.length)[0];\n```\n\n```js\nlongestItem('this', 'is', 'a', 'testcase'); // 'testcase'\nlongestItem(...['a', 'ab', 'abc']); // 'abc'\nlongestItem(...['a', 'ab', 'abc'], 'abcd'); // 'abcd'\nlongestItem([1, 2, 3], [1, 2], [1, 2, 3, 4, 5]); // [1, 2, 3, 4, 5]\nlongestItem([1, 2, 3], 'foobar'); // 'foobar'\n```\n","description":"### longestItem\n\nTakes any number of iterable objects or objects with a `length` property and returns the longest one.\n\nUse `Array.sort()` to sort all arguments by `length`, return the first (longest) one.\n\n"},{"command":"lowercaseKeys","code":"### lowercaseKeys\n\nCreates a new object from the specified object, where all the keys are in lowercase.\n\nUse `Object.keys()` and `Array.reduce()` to create a new object from the specified object.\nConvert each key in the original object to lowercase, using `String.toLowerCase()`.\n\n```js\nconst lowercaseKeys = obj =>\n  Object.keys(obj).reduce((acc, key) => {\n    acc[key.toLowerCase()] = obj[key];\n    return acc;\n  }, {});\n```\n\n```js\nconst myObj = { Name: 'Adam', sUrnAME: 'Smith' };\nconst myObjLower = lowercaseKeys(myObj); // {name: 'Adam', surname: 'Smith'};\n```\n","description":"### lowercaseKeys\n\nCreates a new object from the specified object, where all the keys are in lowercase.\n\nUse `Object.keys()` and `Array.reduce()` to create a new object from the specified object.\nConvert each key in the original object to lowercase, using `String.toLowerCase()`.\n\n"},{"command":"luhnCheck","code":"### luhnCheck\n\nImplementation of the [Luhn Algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers etc.\n\nUse `String.split('')`, `Array.reverse()` and `Array.map()` in combination with `parseInt()` to obtain an array of digits.\nUse `Array.splice(0,1)` to obtain the last digit.\nUse `Array.reduce()` to implement the Luhn Algorithm.\nReturn `true` if `sum` is divisible by `10`, `false` otherwise.\n\n\n```js\nconst luhnCheck = num => {\n  let arr = (num + '')\n    .split('')\n    .reverse()\n    .map(x => parseInt(x));\n  let lastDigit = arr.splice(0, 1)[0];\n  let sum = arr.reduce((acc, val, i) => (i % 2 !== 0 ? acc + val : acc + (val * 2) % 9 || 9), 0);\n  sum += lastDigit;\n  return sum % 10 === 0;\n};\n```\n\n```js\nluhnCheck('4485275742308327'); // true\nluhnCheck(6011329933655299); //  false\nluhnCheck(123456789); // false\n```\n","description":"### luhnCheck\n\nImplementation of the [Luhn Algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers etc.\n\nUse `String.split('')`, `Array.reverse()` and `Array.map()` in combination with `parseInt()` to obtain an array of digits.\nUse `Array.splice(0,1)` to obtain the last digit.\nUse `Array.reduce()` to implement the Luhn Algorithm.\nReturn `true` if `sum` is divisible by `10`, `false` otherwise.\n\n\n"},{"command":"mapKeys","code":"### mapKeys\n\nCreates an object with keys generated by running the provided function for each key and the same values as the provided object.\n\nUse `Object.keys(obj)` to iterate over the object's keys.\nUse `Array.reduce()` to create a new object with the same values and mapped keys using `fn`.\n\n```js\nconst mapKeys = (obj, fn) =>\n  Object.keys(obj).reduce((acc, k) => {\n    acc[fn(obj[k], k, obj)] = obj[k];\n    return acc;\n  }, {});\n```\n\n```js\nmapKeys({ a: 1, b: 2 }, (val, key) => key + val); // { a1: 1, b2: 2 }\n```\n","description":"### mapKeys\n\nCreates an object with keys generated by running the provided function for each key and the same values as the provided object.\n\nUse `Object.keys(obj)` to iterate over the object's keys.\nUse `Array.reduce()` to create a new object with the same values and mapped keys using `fn`.\n\n"},{"command":"mapObject","code":"### mapObject\n\nMaps the values of an array to an object using a function, where the key-value pairs consist of the original value as the key and the mapped value.\n\nUse an anonymous inner function scope to declare an undefined memory space, using closures to store a return value. Use a new `Array` to store the array with a map of the function over its data set and a comma operator to return a second step, without needing to move from one context to another (due to closures and order of operations).\n\n```js\nconst mapObject = (arr, fn) =>\n  (a => (\n    (a = [arr, arr.map(fn)]), a[0].reduce((acc, val, ind) => ((acc[val] = a[1][ind]), acc), {})\n  ))();\n```\n\n```js\nconst squareIt = arr => mapObject(arr, a => a * a);\nsquareIt([1, 2, 3]); // { 1: 1, 2: 4, 3: 9 }\n```\n","description":"### mapObject\n\nMaps the values of an array to an object using a function, where the key-value pairs consist of the original value as the key and the mapped value.\n\nUse an anonymous inner function scope to declare an undefined memory space, using closures to store a return value. Use a new `Array` to store the array with a map of the function over its data set and a comma operator to return a second step, without needing to move from one context to another (due to closures and order of operations).\n\n"},{"command":"mapValues","code":"### mapValues\n\nCreates an object with the same keys as the provided object and values generated by running the provided function for each value.\n\nUse `Object.keys(obj)` to iterate over the object's keys.\nUse `Array.reduce()` to create a new object with the same keys and mapped values using `fn`.\n\n```js\nconst mapValues = (obj, fn) =>\n  Object.keys(obj).reduce((acc, k) => {\n    acc[k] = fn(obj[k], k, obj);\n    return acc;\n  }, {});\n```\n\n```js\nconst users = {\n  fred: { user: 'fred', age: 40 },\n  pebbles: { user: 'pebbles', age: 1 }\n};\nmapValues(users, u => u.age); // { fred: 40, pebbles: 1 }\n```\n","description":"### mapValues\n\nCreates an object with the same keys as the provided object and values generated by running the provided function for each value.\n\nUse `Object.keys(obj)` to iterate over the object's keys.\nUse `Array.reduce()` to create a new object with the same keys and mapped values using `fn`.\n\n"},{"command":"mask","code":"### mask\n\nReplaces all but the last `num` of characters with the specified mask character.\n\nUse `String.slice()` to grab the portion of the characters that need to be masked and use `String.replace()` with a regexp to replace every character with the mask character.\nConcatenate the masked characters with the remaining unmasked portion of the string.\nOmit the second argument, `num`, to keep a default of `4` characters unmasked. If `num` is negative, the unmasked characters will be at the start of the string.\nOmit the third argument, `mask`, to use a default character of `'*'` for the mask.\n\n```js\nconst mask = (cc, num = 4, mask = '*') =>\n  ('' + cc).slice(0, -num).replace(/./g, mask) + ('' + cc).slice(-num);\n```\n\n```js\nmask(1234567890); // '******7890'\nmask(1234567890, 3); // '*******890'\nmask(1234567890, -4, '$'); // '$$$$567890'\n```\n","description":"### mask\n\nReplaces all but the last `num` of characters with the specified mask character.\n\nUse `String.slice()` to grab the portion of the characters that need to be masked and use `String.replace()` with a regexp to replace every character with the mask character.\nConcatenate the masked characters with the remaining unmasked portion of the string.\nOmit the second argument, `num`, to keep a default of `4` characters unmasked. If `num` is negative, the unmasked characters will be at the start of the string.\nOmit the third argument, `mask`, to use a default character of `'*'` for the mask.\n\n"},{"command":"matches","code":"### matches\n\nCompares two objects to determine if the first one contains equivalent property values to the second one.\n\nUse `Object.keys(source)` to get all the keys of the second object, then `Array.every()`, `Object.hasOwnProperty()` and strict comparison to determine if all keys exist in the first object and have the same values.\n\n```js\nconst matches = (obj, source) =>\n  Object.keys(source).every(key => obj.hasOwnProperty(key) && obj[key] === source[key]);\n```\n\n```js\nmatches({ age: 25, hair: 'long', beard: true }, { hair: 'long', beard: true }); // true\nmatches({ hair: 'long', beard: true }, { age: 25, hair: 'long', beard: true }); // false\n```\n","description":"### matches\n\nCompares two objects to determine if the first one contains equivalent property values to the second one.\n\nUse `Object.keys(source)` to get all the keys of the second object, then `Array.every()`, `Object.hasOwnProperty()` and strict comparison to determine if all keys exist in the first object and have the same values.\n\n"},{"command":"matchesWith","code":"### matchesWith\n\nCompares two objects to determine if the first one contains equivalent property values to the second one, based on a provided function.\n\nUse `Object.keys(source)` to get all the keys of the second object, then `Array.every()`, `Object.hasOwnProperty()` and the provided function to determine if all keys exist in the first object and have equivalent values.\nIf no function is provided, the values will be compared using the equality operator.\n\n```js\nconst matchesWith = (obj, source, fn) =>\n  Object.keys(source).every(\n    key =>\n      obj.hasOwnProperty(key) && fn\n        ? fn(obj[key], source[key], key, obj, source)\n        : obj[key] == source[key]\n  );\n```\n\n```js\nconst isGreeting = val => /^h(?:i|ello)$/.test(val);\nmatchesWith(\n  { greeting: 'hello' },\n  { greeting: 'hi' },\n  (oV, sV) => isGreeting(oV) && isGreeting(sV)\n); // true\n```\n","description":"### matchesWith\n\nCompares two objects to determine if the first one contains equivalent property values to the second one, based on a provided function.\n\nUse `Object.keys(source)` to get all the keys of the second object, then `Array.every()`, `Object.hasOwnProperty()` and the provided function to determine if all keys exist in the first object and have equivalent values.\nIf no function is provided, the values will be compared using the equality operator.\n\n"},{"command":"maxBy","code":"### maxBy\n\nReturns the maximum value of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Math.max()` to get the maximum value.\n\n```js\nconst maxBy = (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));\n```\n\n```js\nmaxBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n); // 8\nmaxBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'); // 8\n```\n","description":"### maxBy\n\nReturns the maximum value of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Math.max()` to get the maximum value.\n\n"},{"command":"maxN","code":"### maxN\n\nReturns the `n` maximum elements from the provided array. If `n` is greater than or equal to the provided array's length, then return the original array(sorted in descending order).\n\nUse `Array.sort()` combined with the spread operator (`...`) to create a shallow clone of the array and sort it in descending order.\nUse `Array.slice()` to get the specified number of elements.\nOmit the second argument, `n`, to get a one-element array.\n\n```js\nconst maxN = (arr, n = 1) => [...arr].sort((a, b) => b - a).slice(0, n);\n```\n\n```js\nmaxN([1, 2, 3]); // [3]\nmaxN([1, 2, 3], 2); // [3,2]\n```\n","description":"### maxN\n\nReturns the `n` maximum elements from the provided array. If `n` is greater than or equal to the provided array's length, then return the original array(sorted in descending order).\n\nUse `Array.sort()` combined with the spread operator (`...`) to create a shallow clone of the array and sort it in descending order.\nUse `Array.slice()` to get the specified number of elements.\nOmit the second argument, `n`, to get a one-element array.\n\n"},{"command":"median","code":"### median\n\nReturns the median of an array of numbers.\n\nFind the middle of the array, use `Array.sort()` to sort the values.\nReturn the number at the midpoint if `length` is odd, otherwise the average of the two middle numbers.\n\n```js\nconst median = arr => {\n  const mid = Math.floor(arr.length / 2),\n    nums = [...arr].sort((a, b) => a - b);\n  return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\n```\n\n```js\nmedian([5, 6, 50, 1, -5]); // 5\n```\n","description":"### median\n\nReturns the median of an array of numbers.\n\nFind the middle of the array, use `Array.sort()` to sort the values.\nReturn the number at the midpoint if `length` is odd, otherwise the average of the two middle numbers.\n\n"},{"command":"memoize","code":"### memoize\n\nReturns the memoized (cached) function.\n\nCreate an empty cache by instantiating a new `Map` object.\nReturn a function which takes a single argument to be supplied to the memoized function by first checking if the function's output for that specific input value is already cached, or store and return it if not. The `function` keyword must be used in order to allow the memoized function to have its `this` context changed if necessary.\nAllow access to the `cache` by setting it as a property on the returned function.\n\n```js\nconst memoize = fn => {\n  const cache = new Map();\n  const cached = function(val) {\n    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);\n  };\n  cached.cache = cache;\n  return cached;\n};\n```\n\n```js\n// See the `anagrams` snippet.\nconst anagramsCached = memoize(anagrams);\nanagramsCached('javascript'); // takes a long time\nanagramsCached('javascript'); // returns virtually instantly since it's now cached\nconsole.log(anagramsCached.cache); // The cached anagrams map\n```\n","description":"### memoize\n\nReturns the memoized (cached) function.\n\nCreate an empty cache by instantiating a new `Map` object.\nReturn a function which takes a single argument to be supplied to the memoized function by first checking if the function's output for that specific input value is already cached, or store and return it if not. The `function` keyword must be used in order to allow the memoized function to have its `this` context changed if necessary.\nAllow access to the `cache` by setting it as a property on the returned function.\n\n"},{"command":"merge","code":"### merge\n\nCreates a new object from the combination of two or more objects.\n\nUse `Array.reduce()` combined with `Object.keys(obj)` to iterate over all objects and keys.\nUse `hasOwnProperty()` and `Array.concat()` to append values for keys existing in multiple objects.\n\n```js\nconst merge = (...objs) =>\n  [...objs].reduce(\n    (acc, obj) =>\n      Object.keys(obj).reduce((a, k) => {\n        acc[k] = acc.hasOwnProperty(k) ? [].concat(acc[k]).concat(obj[k]) : obj[k];\n        return acc;\n      }, {}),\n    {}\n  );\n```\n\n```js\nconst object = {\n  a: [{ x: 2 }, { y: 4 }],\n  b: 1\n};\nconst other = {\n  a: { z: 3 },\n  b: [2, 3],\n  c: 'foo'\n};\nmerge(object, other); // { a: [ { x: 2 }, { y: 4 }, { z: 3 } ], b: [ 1, 2, 3 ], c: 'foo' }\n```\n","description":"### merge\n\nCreates a new object from the combination of two or more objects.\n\nUse `Array.reduce()` combined with `Object.keys(obj)` to iterate over all objects and keys.\nUse `hasOwnProperty()` and `Array.concat()` to append values for keys existing in multiple objects.\n\n"},{"command":"minBy","code":"### minBy\n\nReturns the minimum value of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Math.min()` to get the maximum value.\n\n```js\nconst minBy = (arr, fn) => Math.min(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));\n```\n\n```js\nminBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n); // 2\nminBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'); // 2\n```\n","description":"### minBy\n\nReturns the minimum value of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Math.min()` to get the maximum value.\n\n"},{"command":"minN","code":"### minN\n\nReturns the `n` minimum elements from the provided array. If `n` is greater than or equal to the provided array's length, then return the original array(sorted in ascending order).\n\nUse `Array.sort()` combined with the spread operator (`...`) to create a shallow clone of the array and sort it in ascending order.\nUse `Array.slice()` to get the specified number of elements.\nOmit the second argument, `n`, to get a one-element array.\n\n```js\nconst minN = (arr, n = 1) => [...arr].sort((a, b) => a - b).slice(0, n);\n```\n```js\nminN([1, 2, 3]); // [1]\nminN([1, 2, 3], 2); // [1,2]\n```\n","description":"### minN\n\nReturns the `n` minimum elements from the provided array. If `n` is greater than or equal to the provided array's length, then return the original array(sorted in ascending order).\n\nUse `Array.sort()` combined with the spread operator (`...`) to create a shallow clone of the array and sort it in ascending order.\nUse `Array.slice()` to get the specified number of elements.\nOmit the second argument, `n`, to get a one-element array.\n\n"},{"command":"mostPerformant","code":"### mostPerformant\n\nReturns the index of the function in an array of functions which executed the fastest.\n\nUse `Array.map()` to generate an array where each value is the total time taken to execute the function after `iterations` times. Use the difference in `performance.now()` values before and after to get the total time in milliseconds to a high degree of accuracy.\nUse `Math.min()` to find the minimum execution time, and return the index of that shortest time which corresponds to the index of the most performant function. \nOmit the second argument, `iterations`, to use a default of 10,000 iterations. The more iterations, the more reliable the result but the longer it will take.\n\n```js\nconst mostPerformant = (fns, iterations = 10000) => {\n  const times = fns.map(fn => {\n    const before = performance.now();\n    for (let i = 0; i < iterations; i++) fn();\n    return performance.now() - before;\n  });\n  return times.indexOf(Math.min(...times));\n};\n```\n\n```js\nmostPerformant([\n  () => {\n    // Loops through the entire array before returning `false`\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, '10'].every(el => typeof el === 'number');\n  },\n  () => {\n    // Only needs to reach index `1` before returning false\n    [1, '2', 3, 4, 5, 6, 7, 8, 9, 10].every(el => typeof el === 'number');\n  }\n]); // 1\n```\n","description":"### mostPerformant\n\nReturns the index of the function in an array of functions which executed the fastest.\n\nUse `Array.map()` to generate an array where each value is the total time taken to execute the function after `iterations` times. Use the difference in `performance.now()` values before and after to get the total time in milliseconds to a high degree of accuracy.\nUse `Math.min()` to find the minimum execution time, and return the index of that shortest time which corresponds to the index of the most performant function. \nOmit the second argument, `iterations`, to use a default of 10,000 iterations. The more iterations, the more reliable the result but the longer it will take.\n\n"},{"command":"negate","code":"### negate\n\nNegates a predicate function.\n\nTake a predicate function and apply the not operator (`!`) to it with its arguments.\n\n```js\nconst negate = func => (...args) => !func(...args);\n```\n\n```js\n[1, 2, 3, 4, 5, 6].filter(negate(n => n % 2 === 0)); // [ 1, 3, 5 ]\n```\n","description":"### negate\n\nNegates a predicate function.\n\nTake a predicate function and apply the not operator (`!`) to it with its arguments.\n\n"},{"command":"nest","code":"### nest\n\nGiven a flat array of objects linked to one another, it will nest them recursively.\nUseful for nesting comments, such as the ones on reddit.com.\n\nUse recursion. \nUse `Array.filter()` to filter the items where the `id` matches the `link`, then `Array.map()` to map each one to a new object that has a `children` property which recursively nests the items based on which ones are children of the current item. \nOmit the second argument, `id`, to default to `null` which indicates the object is not linked to another one (i.e. it is a top level object). \nOmit the third argument, `link`, to use `'parent_id'` as the default property which links the object to another one by its `id`.\n\n```js\nconst nest = (items, id = null, link = 'parent_id') =>\n  items\n    .filter(item => item[link] === id)\n    .map(item => ({ ...item, children: nest(items, item.id) }));\n```\n\n```js\n// One top level comment\nconst comments = [\n  { id: 1, parent_id: null },\n  { id: 2, parent_id: 1 },\n  { id: 3, parent_id: 1 },\n  { id: 4, parent_id: 2 },\n  { id: 5, parent_id: 4 }\n];\nconst nestedComments = nest(comments); // [{ id: 1, parent_id: null, children: [...] }]\n```\n\n","description":"### nest\n\nGiven a flat array of objects linked to one another, it will nest them recursively.\nUseful for nesting comments, such as the ones on reddit.com.\n\nUse recursion. \nUse `Array.filter()` to filter the items where the `id` matches the `link`, then `Array.map()` to map each one to a new object that has a `children` property which recursively nests the items based on which ones are children of the current item. \nOmit the second argument, `id`, to default to `null` which indicates the object is not linked to another one (i.e. it is a top level object). \nOmit the third argument, `link`, to use `'parent_id'` as the default property which links the object to another one by its `id`.\n\n"},{"command":"none","code":"### none\n\nReturns `true` if the provided predicate function returns `false` for all elements in a collection, `false` otherwise.\n\nUse `Array.some()` to test if any elements in the collection return `true` based on `fn`.\nOmit the second argument, `fn`, to use `Boolean` as a default.\n\n```js\nconst none = (arr, fn = Boolean) => !arr.some(fn);\n```\n\n```js\nnone([0, 1, 3, 0], x => x == 2); // true\nnone([0, 0, 0]); // true\n```\n","description":"### none\n\nReturns `true` if the provided predicate function returns `false` for all elements in a collection, `false` otherwise.\n\nUse `Array.some()` to test if any elements in the collection return `true` based on `fn`.\nOmit the second argument, `fn`, to use `Boolean` as a default.\n\n"},{"command":"nthArg","code":"### nthArg\n\nCreates a function that gets the argument at index `n`. If `n` is negative, the nth argument from the end is returned.\n\nUse `Array.slice()` to get the desired argument at index `n`.\n\n```js\nconst nthArg = n => (...args) => args.slice(n)[0];\n```\n\n```js\nconst third = nthArg(2);\nthird(1, 2, 3); // 3\nthird(1, 2); // undefined\nconst last = nthArg(-1);\nlast(1, 2, 3, 4, 5); // 5\n```\n","description":"### nthArg\n\nCreates a function that gets the argument at index `n`. If `n` is negative, the nth argument from the end is returned.\n\nUse `Array.slice()` to get the desired argument at index `n`.\n\n"},{"command":"nthElement","code":"### nthElement\n\nReturns the nth element of an array.\n\nUse `Array.slice()` to get an array containing the nth element at the first place.\nIf the index is out of bounds, return `[]`.\nOmit the second argument, `n`, to get the first element of the array.\n\n```js\nconst nthElement = (arr, n = 0) => (n > 0 ? arr.slice(n, n + 1) : arr.slice(n))[0];\n```\n\n```js\nnthElement(['a', 'b', 'c'], 1); // 'b'\nnthElement(['a', 'b', 'b'], -3); // 'a'\n```\n","description":"### nthElement\n\nReturns the nth element of an array.\n\nUse `Array.slice()` to get an array containing the nth element at the first place.\nIf the index is out of bounds, return `[]`.\nOmit the second argument, `n`, to get the first element of the array.\n\n"},{"command":"objectFromPairs","code":"### objectFromPairs\n\nCreates an object from the given key-value pairs.\n\nUse `Array.reduce()` to create and combine key-value pairs.\n\n```js\nconst objectFromPairs = arr => arr.reduce((a, v) => ((a[v[0]] = v[1]), a), {});\n```\n\n```js\nobjectFromPairs([['a', 1], ['b', 2]]); // {a: 1, b: 2}\n```\n","description":"### objectFromPairs\n\nCreates an object from the given key-value pairs.\n\nUse `Array.reduce()` to create and combine key-value pairs.\n\n"},{"command":"objectToPairs","code":"### objectToPairs\n\nCreates an array of key-value pair arrays from an object.\n\nUse `Object.keys()` and `Array.map()` to iterate over the object's keys and produce an array with key-value pairs.\n\n```js\nconst objectToPairs = obj => Object.keys(obj).map(k => [k, obj[k]]);\n```\n\n```js\nobjectToPairs({ a: 1, b: 2 }); // [['a',1],['b',2]]\n```\n","description":"### objectToPairs\n\nCreates an array of key-value pair arrays from an object.\n\nUse `Object.keys()` and `Array.map()` to iterate over the object's keys and produce an array with key-value pairs.\n\n"},{"command":"observeMutations","code":"### observeMutations\n\nReturns a new MutationObserver and runs the provided callback for each mutation on the specified element.\n\nUse a [`MutationObserver`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) to observe mutations on the given element.\nUse `Array.forEach()` to run the callback for each mutation that is observed.\nOmit the third argument, `options`, to use the default [options](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationObserverInit) (all `true`).\n\n```js\nconst observeMutations = (element, callback, options) => {\n  const observer = new MutationObserver(mutations => mutations.forEach(m => callback(m)));\n  observer.observe(\n    element,\n    Object.assign(\n      {\n        childList: true,\n        attributes: true,\n        attributeOldValue: true,\n        characterData: true,\n        characterDataOldValue: true,\n        subtree: true\n      },\n      options\n    )\n  );\n  return observer;\n};\n```\n\n```js\nconst obs = observeMutations(document, console.log); // Logs all mutations that happen on the page\nobs.disconnect(); // Disconnects the observer and stops logging mutations on the page\n```\n","description":"### observeMutations\n\nReturns a new MutationObserver and runs the provided callback for each mutation on the specified element.\n\nUse a [`MutationObserver`](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver) to observe mutations on the given element.\nUse `Array.forEach()` to run the callback for each mutation that is observed.\nOmit the third argument, `options`, to use the default [options](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationObserverInit) (all `true`).\n\n"},{"command":"off","code":"### off\n\nRemoves an event listener from an element.\n\nUse `EventTarget.removeEventListener()` to remove an event listener from an element. \nOmit the fourth argument `opts` to use `false` or specify it based on the options used when the event listener was added.\n\n```js\nconst off = (el, evt, fn, opts = false) => el.removeEventListener(evt, fn, opts);\n```\n\n```js\nconst fn = () => console.log('!');\ndocument.body.addEventListener('click', fn);\noff(document.body, 'click', fn); // no longer logs '!' upon clicking on the page\n```\n","description":"### off\n\nRemoves an event listener from an element.\n\nUse `EventTarget.removeEventListener()` to remove an event listener from an element. \nOmit the fourth argument `opts` to use `false` or specify it based on the options used when the event listener was added.\n\n"},{"command":"omit","code":"### omit\n\nOmits the key-value pairs corresponding to the given keys from an object.\n\nUse `Object.keys(obj)`, `Array.filter()` and `Array.includes()` to remove the provided keys.\nUse `Array.reduce()` to convert the filtered keys back to an object with the corresponding key-value pairs.\n\n```js\nconst omit = (obj, arr) =>\n  Object.keys(obj)\n    .filter(k => !arr.includes(k))\n    .reduce((acc, key) => ((acc[key] = obj[key]), acc), {});\n```\n\n```js\nomit({ a: 1, b: '2', c: 3 }, ['b']); // { 'a': 1, 'c': 3 }\n```\n","description":"### omit\n\nOmits the key-value pairs corresponding to the given keys from an object.\n\nUse `Object.keys(obj)`, `Array.filter()` and `Array.includes()` to remove the provided keys.\nUse `Array.reduce()` to convert the filtered keys back to an object with the corresponding key-value pairs.\n\n"},{"command":"omitBy","code":"### omitBy\n\nCreates an object composed of the properties the given function returns falsey for. The function is invoked with two arguments: (value, key).\n\nUse `Object.keys(obj)` and `Array.filter()`to remove the keys for which `fn` returns a truthy value.\nUse `Array.reduce()` to convert the filtered keys back to an object with the corresponding key-value pairs.\n\n```js\nconst omitBy = (obj, fn) =>\n  Object.keys(obj)\n    .filter(k => !fn(obj[k], k))\n    .reduce((acc, key) => ((acc[key] = obj[key]), acc), {});\n```\n\n```js\nomitBy({ a: 1, b: '2', c: 3 }, x => typeof x === 'number'); // { b: '2' }\n```\n","description":"### omitBy\n\nCreates an object composed of the properties the given function returns falsey for. The function is invoked with two arguments: (value, key).\n\nUse `Object.keys(obj)` and `Array.filter()`to remove the keys for which `fn` returns a truthy value.\nUse `Array.reduce()` to convert the filtered keys back to an object with the corresponding key-value pairs.\n\n"},{"command":"on","code":"### on\n\nAdds an event listener to an element with the ability to use event delegation.\n\nUse `EventTarget.addEventListener()` to add an event listener to an element. If there is a `target` property supplied to the options object, ensure the event target matches the target specified and then invoke the callback by supplying the correct `this` context.\nReturns a reference to the custom delegator function, in order to be possible to use with [`off`](#off).\nOmit `opts` to default to non-delegation behavior and event bubbling.\n\n```js\nconst on = (el, evt, fn, opts = {}) => {\n  const delegatorFn = e => e.target.matches(opts.target) && fn.call(e.target, e);\n  el.addEventListener(evt, opts.target ? delegatorFn : fn, opts.options || false);\n  if (opts.target) return delegatorFn;\n};\n```\n\n```js\nconst fn = () => console.log('!');\non(document.body, 'click', fn); // logs '!' upon clicking the body\non(document.body, 'click', fn, { target: 'p' }); // logs '!' upon clicking a `p` element child of the body\non(document.body, 'click', fn, { options: true }); // use capturing instead of bubbling\n```\n","description":"### on\n\nAdds an event listener to an element with the ability to use event delegation.\n\nUse `EventTarget.addEventListener()` to add an event listener to an element. If there is a `target` property supplied to the options object, ensure the event target matches the target specified and then invoke the callback by supplying the correct `this` context.\nReturns a reference to the custom delegator function, in order to be possible to use with [`off`](#off).\nOmit `opts` to default to non-delegation behavior and event bubbling.\n\n"},{"command":"onUserInputChange","code":"### onUserInputChange\n\nRun the callback whenever the user input type changes (`mouse` or `touch`). Useful for enabling/disabling code depending on the input device. This process is dynamic and works with hybrid devices (e.g. touchscreen laptops).\n\nUse two event listeners. Assume `mouse` input initially and bind a `touchstart` event listener to the document. \nOn `touchstart`, add a `mousemove` event listener to listen for two consecutive `mousemove` events firing within 20ms, using `performance.now()`.\nRun the callback with the input type as an argument in either of these situations.\n\n```js\nconst onUserInputChange = callback => {\n  let type = 'mouse',\n    lastTime = 0;\n  const mousemoveHandler = () => {\n    const now = performance.now();\n    if (now - lastTime < 20)\n      (type = 'mouse'), callback(type), document.removeEventListener('mousemove', mousemoveHandler);\n    lastTime = now;\n  };\n  document.addEventListener('touchstart', () => {\n    if (type === 'touch') return;\n    (type = 'touch'), callback(type), document.addEventListener('mousemove', mousemoveHandler);\n  });\n};\n```\n\n```js\nonUserInputChange(type => {\n  console.log('The user is now using', type, 'as an input method.');\n});\n```\n","description":"### onUserInputChange\n\nRun the callback whenever the user input type changes (`mouse` or `touch`). Useful for enabling/disabling code depending on the input device. This process is dynamic and works with hybrid devices (e.g. touchscreen laptops).\n\nUse two event listeners. Assume `mouse` input initially and bind a `touchstart` event listener to the document. \nOn `touchstart`, add a `mousemove` event listener to listen for two consecutive `mousemove` events firing within 20ms, using `performance.now()`.\nRun the callback with the input type as an argument in either of these situations.\n\n"},{"command":"once","code":"### once\n\nEnsures a function is called only once.\n\nUtilizing a closure, use a flag, `called`, and set it to `true` once the function is called for the first time, preventing it from being called again. In order to allow the function to have its `this` context changed (such as in an event listener), the `function` keyword must be used, and the supplied function must have the context applied.\nAllow the function to be supplied with an arbitrary number of arguments using the rest/spread (`...`) operator.\n\n```js\nconst once = fn => {\n  let called = false;\n  return function(...args) {\n    if (called) return;\n    called = true;\n    return fn.apply(this, args);\n  };\n};\n```\n\n```js\nconst startApp = function(event) {\n  console.log(this, event); // document.body, MouseEvent\n};\ndocument.body.addEventListener('click', once(startApp)); // only runs `startApp` once upon click\n```\n","description":"### once\n\nEnsures a function is called only once.\n\nUtilizing a closure, use a flag, `called`, and set it to `true` once the function is called for the first time, preventing it from being called again. In order to allow the function to have its `this` context changed (such as in an event listener), the `function` keyword must be used, and the supplied function must have the context applied.\nAllow the function to be supplied with an arbitrary number of arguments using the rest/spread (`...`) operator.\n\n"},{"command":"orderBy","code":"### orderBy\n\nReturns a sorted array of objects ordered by properties and orders.\n\nUses `Array.sort()`, `Array.reduce()` on the `props` array with a default value of `0`, use array destructuring to swap the properties position depending on the order passed.\nIf no `orders` array is passed it sort by `'asc'` by default.\n\n```js\nconst orderBy = (arr, props, orders) =>\n  [...arr].sort((a, b) =>\n    props.reduce((acc, prop, i) => {\n      if (acc === 0) {\n        const [p1, p2] = orders && orders[i] === 'desc' ? [b[prop], a[prop]] : [a[prop], b[prop]];\n        acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;\n      }\n      return acc;\n    }, 0)\n  );\n```\n\n```js\nconst users = [{ name: 'fred', age: 48 }, { name: 'barney', age: 36 }, { name: 'fred', age: 40 }];\norderBy(users, ['name', 'age'], ['asc', 'desc']); // [{name: 'barney', age: 36}, {name: 'fred', age: 48}, {name: 'fred', age: 40}]\norderBy(users, ['name', 'age']); // [{name: 'barney', age: 36}, {name: 'fred', age: 40}, {name: 'fred', age: 48}]\n```\n","description":"### orderBy\n\nReturns a sorted array of objects ordered by properties and orders.\n\nUses `Array.sort()`, `Array.reduce()` on the `props` array with a default value of `0`, use array destructuring to swap the properties position depending on the order passed.\nIf no `orders` array is passed it sort by `'asc'` by default.\n\n"},{"command":"over","code":"### over\n\nCreates a function that invokes each provided function with the arguments it receives and returns the results.\n\nUse `Array.map()` and `Function.apply()` to apply each function to the given arguments.\n\n```js\nconst over = (...fns) => (...args) => fns.map(fn => fn.apply(null, args));\n```\n\n```js\nconst minMax = over(Math.min, Math.max);\nminMax(1, 2, 3, 4, 5); // [1,5]\n```\n","description":"### over\n\nCreates a function that invokes each provided function with the arguments it receives and returns the results.\n\nUse `Array.map()` and `Function.apply()` to apply each function to the given arguments.\n\n"},{"command":"overArgs","code":"### overArgs\n\nCreates a function that invokes the provided function with its arguments transformed.\n\nUse `Array.map()` to apply `transforms` to `args` in combination with the spread operator (`...`) to pass the transformed arguments to `fn`.\n\n```js\nconst overArgs = (fn, transforms) => (...args) => fn(...args.map((val, i) => transforms[i](val)));\n```\n\n```js\nconst square = n => n * n;\nconst double = n => n * 2;\nconst fn = overArgs((x, y) => [x, y], [square, double]);\nfn(9, 3); // [81, 6]\n```\n","description":"### overArgs\n\nCreates a function that invokes the provided function with its arguments transformed.\n\nUse `Array.map()` to apply `transforms` to `args` in combination with the spread operator (`...`) to pass the transformed arguments to `fn`.\n\n"},{"command":"pad","code":"### pad\n\nPads a string on both sides with the specified character, if it's shorter than the specified length.\n\nUse `String.padStart()` and `String.padEnd()` to pad both sides of the given string.\nOmit the third argument, `char`, to use the whitespace character as the default padding character.\n\n```js\nconst pad = (str, length, char = ' ') =>\n  str.padStart((str.length + length) / 2, char).padEnd(length, char);\n```\n\n```js\npad('cat', 8); // '  cat   '\npad(String(42), 6, '0'); // '004200'\npad('foobar', 3); // 'foobar'\n```\n","description":"### pad\n\nPads a string on both sides with the specified character, if it's shorter than the specified length.\n\nUse `String.padStart()` and `String.padEnd()` to pad both sides of the given string.\nOmit the third argument, `char`, to use the whitespace character as the default padding character.\n\n"},{"command":"palindrome","code":"### palindrome\n\nReturns `true` if the given string is a palindrome, `false` otherwise.\n\nConvert string `String.toLowerCase()` and use `String.replace()` to remove non-alphanumeric characters from it.\nThen, `String.split('')` into individual characters, `Array.reverse()`, `String.join('')` and compare to the original, unreversed string, after converting it `String.tolowerCase()`.\n\n```js\nconst palindrome = str => {\n  const s = str.toLowerCase().replace(/[\\W_]/g, '');\n  return (\n    s ===\n    s\n      .split('')\n      .reverse()\n      .join('')\n  );\n};\n```\n\n```js\npalindrome('taco cat'); // true\n```\n","description":"### palindrome\n\nReturns `true` if the given string is a palindrome, `false` otherwise.\n\nConvert string `String.toLowerCase()` and use `String.replace()` to remove non-alphanumeric characters from it.\nThen, `String.split('')` into individual characters, `Array.reverse()`, `String.join('')` and compare to the original, unreversed string, after converting it `String.tolowerCase()`.\n\n"},{"command":"parseCookie","code":"### parseCookie\n\nParse an HTTP Cookie header string and return an object of all cookie name-value pairs.\n\nUse `String.split(';')` to separate key-value pairs from each other.\nUse `Array.map()` and `String.split('=')` to separate keys from values in each pair.\nUse `Array.reduce()` and `decodeURIComponent()` to create an object with all key-value pairs.\n\n```js\nconst parseCookie = str =>\n  str\n    .split(';')\n    .map(v => v.split('='))\n    .reduce((acc, v) => {\n      acc[decodeURIComponent(v[0].trim())] = decodeURIComponent(v[1].trim());\n      return acc;\n    }, {});\n```\n\n```js\nparseCookie('foo=bar; equation=E%3Dmc%5E2'); // { foo: 'bar', equation: 'E=mc^2' }\n```\n","description":"### parseCookie\n\nParse an HTTP Cookie header string and return an object of all cookie name-value pairs.\n\nUse `String.split(';')` to separate key-value pairs from each other.\nUse `Array.map()` and `String.split('=')` to separate keys from values in each pair.\nUse `Array.reduce()` and `decodeURIComponent()` to create an object with all key-value pairs.\n\n"},{"command":"partial","code":"### partial\n\nCreates a function that invokes `fn` with `partials` prepended to the arguments it receives.\n\nUse the spread operator (`...`) to prepend `partials` to the list of arguments of `fn`.\n\n```js\nconst partial = (fn, ...partials) => (...args) => fn(...partials, ...args);\n```\n\n```js\nconst greet = (greeting, name) => greeting + ' ' + name + '!';\nconst greetHello = partial(greet, 'Hello');\ngreetHello('John'); // 'Hello John!'\n```\n","description":"### partial\n\nCreates a function that invokes `fn` with `partials` prepended to the arguments it receives.\n\nUse the spread operator (`...`) to prepend `partials` to the list of arguments of `fn`.\n\n"},{"command":"partialRight","code":"### partialRight\n\nCreates a function that invokes `fn` with `partials` appended to the arguments it receives.\n\nUse the spread operator (`...`) to append `partials` to the list of arguments of `fn`.\n\n```js\nconst partialRight = (fn, ...partials) => (...args) => fn(...args, ...partials);\n```\n\n```js\nconst greet = (greeting, name) => greeting + ' ' + name + '!';\nconst greetJohn = partialRight(greet, 'John');\ngreetJohn('Hello'); // 'Hello John!'\n```\n","description":"### partialRight\n\nCreates a function that invokes `fn` with `partials` appended to the arguments it receives.\n\nUse the spread operator (`...`) to append `partials` to the list of arguments of `fn`.\n\n"},{"command":"partition","code":"### partition\n\nGroups the elements into two arrays, depending on the provided function's truthiness for each element.\n\nUse `Array.reduce()` to create an array of two arrays.\nUse `Array.push()` to add elements for which `fn` returns `true` to the first array and elements for which `fn` returns `false` to the second one.\n\n```js\nconst partition = (arr, fn) =>\n  arr.reduce(\n    (acc, val, i, arr) => {\n      acc[fn(val, i, arr) ? 0 : 1].push(val);\n      return acc;\n    },\n    [[], []]\n  );\n```\n\n```js\nconst users = [{ user: 'barney', age: 36, active: false }, { user: 'fred', age: 40, active: true }];\npartition(users, o => o.active); // [[{ 'user': 'fred',    'age': 40, 'active': true }],[{ 'user': 'barney',  'age': 36, 'active': false }]]\n```\n","description":"### partition\n\nGroups the elements into two arrays, depending on the provided function's truthiness for each element.\n\nUse `Array.reduce()` to create an array of two arrays.\nUse `Array.push()` to add elements for which `fn` returns `true` to the first array and elements for which `fn` returns `false` to the second one.\n\n"},{"command":"percentile","code":"### percentile\n\nUses the percentile formula to calculate how many numbers in the given array are less or equal to the given value.\n\nUse `Array.reduce()` to calculate how many numbers are below the value and how many are the same value and apply the percentile formula.\n\n```js\nconst percentile = (arr, val) =>\n  100 * arr.reduce((acc, v) => acc + (v < val ? 1 : 0) + (v === val ? 0.5 : 0), 0) / arr.length;\n```\n\n```js\npercentile([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6); // 55\n```\n","description":"### percentile\n\nUses the percentile formula to calculate how many numbers in the given array are less or equal to the given value.\n\nUse `Array.reduce()` to calculate how many numbers are below the value and how many are the same value and apply the percentile formula.\n\n"},{"command":"permutations","code":"### permutations\n\n⚠️ **WARNING**: This function's execution time increases exponentially with each array element. Anything more than 8 to 10 entries will cause your browser to hang as it tries to solve all the different combinations.\n\nGenerates all permutations of an array's elements (contains duplicates).\n\nUse recursion.\nFor each element in the given array, create all the partial permutations for the rest of its elements.\nUse `Array.map()` to combine the element with each partial permutation, then `Array.reduce()` to combine all permutations in one array.\nBase cases are for array `length` equal to `2` or `1`.\n\n```js\nconst permutations = arr => {\n  if (arr.length <= 2) return arr.length === 2 ? [arr, [arr[1], arr[0]]] : arr;\n  return arr.reduce(\n    (acc, item, i) =>\n      acc.concat(\n        permutations([...arr.slice(0, i), ...arr.slice(i + 1)]).map(val => [item, ...val])\n      ),\n    []\n  );\n};\n```\n\n```js\npermutations([1, 33, 5]); // [ [ 1, 33, 5 ], [ 1, 5, 33 ], [ 33, 1, 5 ], [ 33, 5, 1 ], [ 5, 1, 33 ], [ 5, 33, 1 ] ]\n```\n","description":"### permutations\n\n⚠️ **WARNING**: This function's execution time increases exponentially with each array element. Anything more than 8 to 10 entries will cause your browser to hang as it tries to solve all the different combinations.\n\nGenerates all permutations of an array's elements (contains duplicates).\n\nUse recursion.\nFor each element in the given array, create all the partial permutations for the rest of its elements.\nUse `Array.map()` to combine the element with each partial permutation, then `Array.reduce()` to combine all permutations in one array.\nBase cases are for array `length` equal to `2` or `1`.\n\n"},{"command":"pick","code":"### pick\n\nPicks the key-value pairs corresponding to the given keys from an object.\n\nUse `Array.reduce()` to convert the filtered/picked keys back to an object with the corresponding key-value pairs if the key exists in the object.\n\n```js\nconst pick = (obj, arr) =>\n  arr.reduce((acc, curr) => (curr in obj && (acc[curr] = obj[curr]), acc), {});\n```\n\n```js\npick({ a: 1, b: '2', c: 3 }, ['a', 'c']); // { 'a': 1, 'c': 3 }\n```\n","description":"### pick\n\nPicks the key-value pairs corresponding to the given keys from an object.\n\nUse `Array.reduce()` to convert the filtered/picked keys back to an object with the corresponding key-value pairs if the key exists in the object.\n\n"},{"command":"pickBy","code":"### pickBy\n\nCreates an object composed of the properties the given function returns truthy for. The function is invoked with two arguments: (value, key).\n\nUse `Object.keys(obj)` and `Array.filter()`to remove the keys for which `fn` returns a falsey value.\nUse `Array.reduce()` to convert the filtered keys back to an object with the corresponding key-value pairs.\n\n```js\nconst pickBy = (obj, fn) =>\n  Object.keys(obj)\n    .filter(k => fn(obj[k], k))\n    .reduce((acc, key) => ((acc[key] = obj[key]), acc), {});\n```\n\n```js\npickBy({ a: 1, b: '2', c: 3 }, x => typeof x === 'number'); // { 'a': 1, 'c': 3 }\n```\n","description":"### pickBy\n\nCreates an object composed of the properties the given function returns truthy for. The function is invoked with two arguments: (value, key).\n\nUse `Object.keys(obj)` and `Array.filter()`to remove the keys for which `fn` returns a falsey value.\nUse `Array.reduce()` to convert the filtered keys back to an object with the corresponding key-value pairs.\n\n"},{"command":"pipeAsyncFunctions","code":"### pipeAsyncFunctions\n\nPerforms left-to-right function composition for asynchronous functions.\n\nUse `Array.reduce()` with the spread operator (`...`) to perform left-to-right function composition using `Promise.then()`.\nThe functions can return a combination of: simple values, `Promise`'s, or they can be defined as `async` ones returning through `await`.\nAll functions must be unary.\n\n```js\nconst pipeAsyncFunctions = (...fns) => arg => fns.reduce((p, f) => p.then(f), Promise.resolve(arg));\n```\n\n```js\nconst sum = pipeAsyncFunctions(\n  x => x + 1,\n  x => new Promise(resolve => setTimeout(() => resolve(x + 2), 1000)),\n  x => x + 3,\n  async x => (await x) + 4\n);\n(async () => {\n  console.log(await sum(5)); // 15 (after one second)\n})();\n```\n","description":"### pipeAsyncFunctions\n\nPerforms left-to-right function composition for asynchronous functions.\n\nUse `Array.reduce()` with the spread operator (`...`) to perform left-to-right function composition using `Promise.then()`.\nThe functions can return a combination of: simple values, `Promise`'s, or they can be defined as `async` ones returning through `await`.\nAll functions must be unary.\n\n"},{"command":"pipeFunctions","code":"### pipeFunctions\n\nPerforms left-to-right function composition.\n\nUse `Array.reduce()` with the spread operator (`...`) to perform left-to-right function composition.\nThe first (leftmost) function can accept one or more arguments; the remaining functions must be unary.\n\n```js\nconst pipeFunctions = (...fns) => fns.reduce((f, g) => (...args) => g(f(...args)));\n```\n\n```js\nconst add5 = x => x + 5;\nconst multiply = (x, y) => x * y;\nconst multiplyAndAdd5 = pipeFunctions(multiply, add5);\nmultiplyAndAdd5(5, 2); // 15\n```\n","description":"### pipeFunctions\n\nPerforms left-to-right function composition.\n\nUse `Array.reduce()` with the spread operator (`...`) to perform left-to-right function composition.\nThe first (leftmost) function can accept one or more arguments; the remaining functions must be unary.\n\n"},{"command":"pluralize","code":"### pluralize\n\nReturns the singular or plural form of the word based on the input number. If the first argument is an `object`, it will use a closure by returning a function that can auto-pluralize words that don't simply end in `s` if the supplied dictionary contains the word.\n\nIf `num` is either `-1` or `1`, return the singular form of the word. If `num` is any other number, return the plural form. Omit the third argument to use the default of the singular word + `s`, or supply a custom pluralized word when necessary. If the first argument is an `object`, utilize a closure by returning a function which can use the supplied dictionary to resolve the correct plural form of the word.\n\n```js\nconst pluralize = (val, word, plural = word + 's') => {\n  const _pluralize = (num, word, plural = word + 's') =>\n    [1, -1].includes(Number(num)) ? word : plural;\n  if (typeof val === 'object') return (num, word) => _pluralize(num, word, val[word]);\n  return _pluralize(val, word, plural);\n};\n```\n\n```js\npluralize(0, 'apple'); // 'apples'\npluralize(1, 'apple'); // 'apple'\npluralize(2, 'apple'); // 'apples'\npluralize(2, 'person', 'people'); // 'people'\n\nconst PLURALS = {\n  person: 'people',\n  radius: 'radii'\n};\nconst autoPluralize = pluralize(PLURALS);\nautoPluralize(2, 'person'); // 'people'\n```\n","description":"### pluralize\n\nReturns the singular or plural form of the word based on the input number. If the first argument is an `object`, it will use a closure by returning a function that can auto-pluralize words that don't simply end in `s` if the supplied dictionary contains the word.\n\nIf `num` is either `-1` or `1`, return the singular form of the word. If `num` is any other number, return the plural form. Omit the third argument to use the default of the singular word + `s`, or supply a custom pluralized word when necessary. If the first argument is an `object`, utilize a closure by returning a function which can use the supplied dictionary to resolve the correct plural form of the word.\n\n"},{"command":"powerset","code":"### powerset\n\nReturns the powerset of a given array of numbers.\n\nUse `Array.reduce()` combined with `Array.map()` to iterate over elements and combine into an array containing all combinations.\n\n```js\nconst powerset = arr => arr.reduce((a, v) => a.concat(a.map(r => [v].concat(r))), [[]]);\n```\n\n```js\npowerset([1, 2]); // [[], [1], [2], [2,1]]\n```\n","description":"### powerset\n\nReturns the powerset of a given array of numbers.\n\nUse `Array.reduce()` combined with `Array.map()` to iterate over elements and combine into an array containing all combinations.\n\n"},{"command":"prefix","code":"### prefix\n\nReturns the prefixed version (if necessary) of a CSS property that the browser supports.\n\nUse `Array.findIndex()` on an array of vendor prefix strings to test if `document.body` has one of them defined in its `CSSStyleDeclaration` object, otherwise return `null`. \nUse `String.charAt()` and `String.toUpperCase()` to capitalize the property, which will be appended to the vendor prefix string.\n\n```js\nconst prefix = prop => {\n  const capitalizedProp = prop.charAt(0).toUpperCase() + prop.slice(1);\n  const prefixes = ['', 'webkit', 'moz', 'ms', 'o'];\n  const i = prefixes.findIndex(\n    prefix => typeof document.body.style[prefix ? prefix + capitalizedProp : prop] !== 'undefined'\n  );\n  return i !== -1 ? (i === 0 ? prop : prefixes[i] + capitalizedProp) : null;\n};\n```\n\n```js\nprefix('appearance'); // 'appearance' on a supported browser, otherwise 'webkitAppearance', 'mozAppearance', 'msAppearance' or 'oAppearance'\n```\n","description":"### prefix\n\nReturns the prefixed version (if necessary) of a CSS property that the browser supports.\n\nUse `Array.findIndex()` on an array of vendor prefix strings to test if `document.body` has one of them defined in its `CSSStyleDeclaration` object, otherwise return `null`. \nUse `String.charAt()` and `String.toUpperCase()` to capitalize the property, which will be appended to the vendor prefix string.\n\n"},{"command":"prettyBytes","code":"### prettyBytes\n\nConverts a number in bytes to a human-readable string.\n\nUse an array dictionary of units to be accessed based on the exponent.\nUse `Number.toPrecision()` to truncate the number to a certain number of digits.\nReturn the prettified string by building it up, taking into account the supplied options and whether it is negative or not.\nOmit the second argument, `precision`, to use a default precision of `3` digits.\nOmit the third argument, `addSpace`, to add space between the number and unit by default.\n\n```js\nconst prettyBytes = (num, precision = 3, addSpace = true) => {\n  const UNITS = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  if (Math.abs(num) < 1) return num + (addSpace ? ' ' : '') + UNITS[0];\n  const exponent = Math.min(Math.floor(Math.log10(num < 0 ? -num : num) / 3), UNITS.length - 1);\n  const n = Number(((num < 0 ? -num : num) / 1000 ** exponent).toPrecision(precision));\n  return (num < 0 ? '-' : '') + n + (addSpace ? ' ' : '') + UNITS[exponent];\n};\n```\n\n```js\nprettyBytes(1000); // \"1 KB\"\nprettyBytes(-27145424323.5821, 5); // \"-27.145 GB\"\nprettyBytes(123456789, 3, false); // \"123MB\"\n```\n","description":"### prettyBytes\n\nConverts a number in bytes to a human-readable string.\n\nUse an array dictionary of units to be accessed based on the exponent.\nUse `Number.toPrecision()` to truncate the number to a certain number of digits.\nReturn the prettified string by building it up, taking into account the supplied options and whether it is negative or not.\nOmit the second argument, `precision`, to use a default precision of `3` digits.\nOmit the third argument, `addSpace`, to add space between the number and unit by default.\n\n"},{"command":"primes","code":"### primes\n\nGenerates primes up to a given number, using the Sieve of Eratosthenes.\n\nGenerate an array from `2` to the given number. Use `Array.filter()` to filter out the values divisible by any number from `2` to the square root of the provided number.\n\n```js\nconst primes = num => {\n  let arr = Array.from({ length: num - 1 }).map((x, i) => i + 2),\n    sqroot = Math.floor(Math.sqrt(num)),\n    numsTillSqroot = Array.from({ length: sqroot - 1 }).map((x, i) => i + 2);\n  numsTillSqroot.forEach(x => (arr = arr.filter(y => y % x !== 0 || y === x)));\n  return arr;\n};\n```\n\n```js\nprimes(10); // [2,3,5,7]\n```\n","description":"### primes\n\nGenerates primes up to a given number, using the Sieve of Eratosthenes.\n\nGenerate an array from `2` to the given number. Use `Array.filter()` to filter out the values divisible by any number from `2` to the square root of the provided number.\n\n"},{"command":"promisify","code":"### promisify\n\nConverts an asynchronous function to return a promise.\n\nUse currying to return a function returning a `Promise` that calls the original function.\nUse the `...rest` operator to pass in all the parameters.\n\n*In Node 8+, you can use [`util.promisify`](https://nodejs.org/api/util.html#util_util_promisify_original)*\n\n```js\nconst promisify = func => (...args) =>\n  new Promise((resolve, reject) =>\n    func(...args, (err, result) => (err ? reject(err) : resolve(result)))\n  );\n```\n\n```js\nconst delay = promisify((d, cb) => setTimeout(cb, d));\ndelay(2000).then(() => console.log('Hi!')); // // Promise resolves after 2s\n```\n","description":"### promisify\n\nConverts an asynchronous function to return a promise.\n\nUse currying to return a function returning a `Promise` that calls the original function.\nUse the `...rest` operator to pass in all the parameters.\n\n*In Node 8+, you can use [`util.promisify`](https://nodejs.org/api/util.html#util_util_promisify_original)*\n\n"},{"command":"pull","code":"### pull\n\nMutates the original array to filter out the values specified.\n\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\n\n_(For a snippet that does not mutate the original array see [`without`](#without))_\n\n```js\nconst pull = (arr, ...args) => {\n  let argState = Array.isArray(args[0]) ? args[0] : args;\n  let pulled = arr.filter((v, i) => !argState.includes(v));\n  arr.length = 0;\n  pulled.forEach(v => arr.push(v));\n};\n```\n\n```js\nlet myArray = ['a', 'b', 'c', 'a', 'b', 'c'];\npull(myArray, 'a', 'c'); // myArray = [ 'b', 'b' ]\n```\n","description":"### pull\n\nMutates the original array to filter out the values specified.\n\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\n\n_(For a snippet that does not mutate the original array see [`without`](#without))_\n\n"},{"command":"pullAtIndex","code":"### pullAtIndex\n\nMutates the original array to filter out the values at the specified indexes.\n\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\nUse `Array.push()` to keep track of pulled values\n\n```js\nconst pullAtIndex = (arr, pullArr) => {\n  let removed = [];\n  let pulled = arr\n    .map((v, i) => (pullArr.includes(i) ? removed.push(v) : v))\n    .filter((v, i) => !pullArr.includes(i));\n  arr.length = 0;\n  pulled.forEach(v => arr.push(v));\n  return removed;\n};\n```\n\n```js\nlet myArray = ['a', 'b', 'c', 'd'];\nlet pulled = pullAtIndex(myArray, [1, 3]); // myArray = [ 'a', 'c' ] , pulled = [ 'b', 'd' ]\n```\n","description":"### pullAtIndex\n\nMutates the original array to filter out the values at the specified indexes.\n\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\nUse `Array.push()` to keep track of pulled values\n\n"},{"command":"pullAtValue","code":"### pullAtValue\n\nMutates the original array to filter out the values specified. Returns the removed elements.\n\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\nUse `Array.push()` to keep track of pulled values\n\n```js\nconst pullAtValue = (arr, pullArr) => {\n  let removed = [],\n    pushToRemove = arr.forEach((v, i) => (pullArr.includes(v) ? removed.push(v) : v)),\n    mutateTo = arr.filter((v, i) => !pullArr.includes(v));\n  arr.length = 0;\n  mutateTo.forEach(v => arr.push(v));\n  return removed;\n};\n```\n\n```js\nlet myArray = ['a', 'b', 'c', 'd'];\nlet pulled = pullAtValue(myArray, ['b', 'd']); // myArray = [ 'a', 'c' ] , pulled = [ 'b', 'd' ]\n```\n","description":"### pullAtValue\n\nMutates the original array to filter out the values specified. Returns the removed elements.\n\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\nUse `Array.push()` to keep track of pulled values\n\n"},{"command":"pullBy","code":"### pullBy\n\nMutates the original array to filter out the values specified, based on a given iterator function.\n\nCheck if the last argument provided in a function.\nUse `Array.map()` to apply the iterator function `fn` to all array elements.\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\n\n```js\nconst pullBy = (arr, ...args) => {\n  const length = args.length;\n  let fn = length > 1 ? args[length - 1] : undefined;\n  fn = typeof fn == 'function' ? (args.pop(), fn) : undefined;\n  let argState = (Array.isArray(args[0]) ? args[0] : args).map(val => fn(val));\n  let pulled = arr.filter((v, i) => !argState.includes(fn(v)));\n  arr.length = 0;\n  pulled.forEach(v => arr.push(v));\n};\n```\n\n```js\nvar myArray = [{ x: 1 }, { x: 2 }, { x: 3 }, { x: 1 }];\npullBy(myArray, [{ x: 1 }, { x: 3 }], o => o.x); // myArray = [{ x: 2 }]\n```\n","description":"### pullBy\n\nMutates the original array to filter out the values specified, based on a given iterator function.\n\nCheck if the last argument provided in a function.\nUse `Array.map()` to apply the iterator function `fn` to all array elements.\nUse `Array.filter()` and `Array.includes()` to pull out the values that are not needed.\nUse `Array.length = 0` to mutate the passed in an array by resetting it's length to zero and `Array.push()` to re-populate it with only the pulled values.\n\n"},{"command":"radsToDegrees","code":"### radsToDegrees\n\nConverts an angle from radians to degrees.\n\nUse `Math.PI` and the radian to degree formula to convert the angle from radians to degrees.\n\n```js\nconst radsToDegrees = rad => rad * 180.0 / Math.PI;\n```\n\n```js\nradsToDegrees(Math.PI / 2); // 90\n```\n","description":"### radsToDegrees\n\nConverts an angle from radians to degrees.\n\nUse `Math.PI` and the radian to degree formula to convert the angle from radians to degrees.\n\n"},{"command":"randomHexColorCode","code":"### randomHexColorCode\n\nGenerates a random hexadecimal color code.\n\nUse `Math.random` to generate a random 24-bit(6x4bits) hexadecimal number. Use bit shifting and then convert it to an hexadecimal String using `toString(16)`.\n\n```js\nconst randomHexColorCode = () => {\n  let n = (Math.random() * 0xfffff * 1000000).toString(16);\n  return '#' + n.slice(0, 6);\n};\n```\n\n```js\nrandomHexColorCode(); // \"#e34155\"\n```\n","description":"### randomHexColorCode\n\nGenerates a random hexadecimal color code.\n\nUse `Math.random` to generate a random 24-bit(6x4bits) hexadecimal number. Use bit shifting and then convert it to an hexadecimal String using `toString(16)`.\n\n"},{"command":"randomIntArrayInRange","code":"### randomIntArrayInRange\n\nReturns an array of n random integers in the specified range.\n\nUse `Array.from()` to create an empty array of the specific length, `Math.random()` to generate a random number and map it to the desired range, using `Math.floor()` to make it an integer.\n\n```js\nconst randomIntArrayInRange = (min, max, n = 1) =>\n  Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min);\n```\n\n```js\nrandomIntArrayInRange(12, 35, 10); // [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]\n```\n","description":"### randomIntArrayInRange\n\nReturns an array of n random integers in the specified range.\n\nUse `Array.from()` to create an empty array of the specific length, `Math.random()` to generate a random number and map it to the desired range, using `Math.floor()` to make it an integer.\n\n"},{"command":"randomIntegerInRange","code":"### randomIntegerInRange\n\nReturns a random integer in the specified range.\n\nUse `Math.random()` to generate a random number and map it to the desired range, using `Math.floor()` to make it an integer.\n\n```js\nconst randomIntegerInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n```\n\n```js\nrandomIntegerInRange(0, 5); // 2\n```\n","description":"### randomIntegerInRange\n\nReturns a random integer in the specified range.\n\nUse `Math.random()` to generate a random number and map it to the desired range, using `Math.floor()` to make it an integer.\n\n"},{"command":"randomNumberInRange","code":"### randomNumberInRange\n\nReturns a random number in the specified range.\n\nUse `Math.random()` to generate a random value, map it to the desired range using multiplication.\n\n```js\nconst randomNumberInRange = (min, max) => Math.random() * (max - min) + min;\n```\n\n```js\nrandomNumberInRange(2, 10); // 6.0211363285087005\n```\n","description":"### randomNumberInRange\n\nReturns a random number in the specified range.\n\nUse `Math.random()` to generate a random value, map it to the desired range using multiplication.\n\n"},{"command":"readFileLines","code":"### readFileLines\n\nReturns an array of lines from the specified file.\n\nUse `readFileSync` function in `fs` node package to create a `Buffer` from a file.\nconvert buffer to string using `toString(encoding)` function.\ncreating an array from contents of file by `split`ing file content line by line (each `\\n`).\n\n```js\nconst fs = require('fs');\nconst readFileLines = filename =>\n  fs\n    .readFileSync(filename)\n    .toString('UTF8')\n    .split('\\n');\n```\n\n```js\n/*\ncontents of test.txt :\n  line1\n  line2\n  line3\n  ___________________________\n*/\nlet arr = readFileLines('test.txt');\nconsole.log(arr); // ['line1', 'line2', 'line3']\n```\n\n","description":"### readFileLines\n\nReturns an array of lines from the specified file.\n\nUse `readFileSync` function in `fs` node package to create a `Buffer` from a file.\nconvert buffer to string using `toString(encoding)` function.\ncreating an array from contents of file by `split`ing file content line by line (each `\\n`).\n\n"},{"command":"rearg","code":"### rearg\n\nCreates a function that invokes the provided function with its arguments arranged according to the specified indexes.\n\nUse `Array.reduce()` and `Array.indexOf()` to reorder arguments based on `indexes` in combination with the spread operator (`...`) to pass the transformed arguments to `fn`.\n\n```js\nconst rearg = (fn, indexes) => (...args) =>\n  fn(\n    ...args.reduce(\n      (acc, val, i) => ((acc[indexes.indexOf(i)] = val), acc),\n      Array.from({ length: indexes.length })\n    )\n  );\n```\n\n```js\nvar rearged = rearg(\n  function(a, b, c) {\n    return [a, b, c];\n  },\n  [2, 0, 1]\n);\nrearged('b', 'c', 'a'); // ['a', 'b', 'c']\n```\n","description":"### rearg\n\nCreates a function that invokes the provided function with its arguments arranged according to the specified indexes.\n\nUse `Array.reduce()` and `Array.indexOf()` to reorder arguments based on `indexes` in combination with the spread operator (`...`) to pass the transformed arguments to `fn`.\n\n"},{"command":"recordAnimationFrames","code":"### recordAnimationFrames\n\nInvokes the provided callback on each animation frame.\n\nUse recursion. \nProvided that `running` is `true`, continue invoking `window.requestAnimationFrame()` which invokes the provided callback. \nReturn an object with two methods `start` and `stop` to allow manual control of the recording. \nOmit the second argument, `autoStart`, to implicitly call `start` when the function is invoked.\n\n```js\nconst recordAnimationFrames = (callback, autoStart = true) => {\n  let running = true,\n    raf;\n  const stop = () => {\n    running = false;\n    cancelAnimationFrame(raf);\n  };\n  const start = () => {\n    running = true;\n    run();\n  };\n  const run = () => {\n    raf = requestAnimationFrame(() => {\n      callback();\n      if (running) run();\n    });\n  };\n  if (autoStart) start();\n  return { start, stop };\n};\n```\n\n```js\nconst cb = () => console.log('Animation frame fired');\nconst recorder = recordAnimationFrames(cb); // logs 'Animation frame fired' on each animation frame\nrecorder.stop(); // stops logging\nrecorder.start(); // starts again\nconst recorder2 = recordAnimationFrames(cb, false); // `start` needs to be explicitly called to begin recording frames\n```\n","description":"### recordAnimationFrames\n\nInvokes the provided callback on each animation frame.\n\nUse recursion. \nProvided that `running` is `true`, continue invoking `window.requestAnimationFrame()` which invokes the provided callback. \nReturn an object with two methods `start` and `stop` to allow manual control of the recording. \nOmit the second argument, `autoStart`, to implicitly call `start` when the function is invoked.\n\n"},{"command":"redirect","code":"### redirect\n\nRedirects to a specified URL.\n\nUse `window.location.href` or `window.location.replace()` to redirect to `url`.\nPass a second argument to simulate a link click (`true` - default) or an HTTP redirect (`false`).\n\n```js\nconst redirect = (url, asLink = true) =>\n  asLink ? (window.location.href = url) : window.location.replace(url);\n```\n\n```js\nredirect('https://google.com');\n```\n","description":"### redirect\n\nRedirects to a specified URL.\n\nUse `window.location.href` or `window.location.replace()` to redirect to `url`.\nPass a second argument to simulate a link click (`true` - default) or an HTTP redirect (`false`).\n\n"},{"command":"reduceSuccessive","code":"### reduceSuccessive\n\nApplies a function against an accumulator and each element in the array (from left to right), returning an array of successively reduced values.\n\nUse `Array.reduce()` to apply the given function to the given array, storing each new result.\n\n```js\nconst reduceSuccessive = (arr, fn, acc) =>\n  arr.reduce((res, val, i, arr) => (res.push(fn(res.slice(-1)[0], val, i, arr)), res), [acc]);\n```\n\n```js\nreduceSuccessive([1, 2, 3, 4, 5, 6], (acc, val) => acc + val, 0); // [0, 1, 3, 6, 10, 15, 21]\n```\n","description":"### reduceSuccessive\n\nApplies a function against an accumulator and each element in the array (from left to right), returning an array of successively reduced values.\n\nUse `Array.reduce()` to apply the given function to the given array, storing each new result.\n\n"},{"command":"reduceWhich","code":"### reduceWhich\n\nReturns the minimum/maximum value of an array, after applying the provided function to set comparing rule.\n\nUse `Array.reduce()` in combination with the `comparator` function to get the appropriate element in the array.\nYou can omit the second parameter, `comparator`, to use the default one that returns the minimum element in the array.\n\n```js\nconst reduceWhich = (arr, comparator = (a, b) => a - b) =>\n  arr.reduce((a, b) => (comparator(a, b) >= 0 ? b : a));\n```\n\n```js\nreduceWhich([1, 3, 2]); // 1\nreduceWhich([1, 3, 2], (a, b) => b - a); // 3\nreduceWhich(\n  [{ name: 'Tom', age: 12 }, { name: 'Jack', age: 18 }, { name: 'Lucy', age: 9 }],\n  (a, b) => a.age - b.age\n); // {name: \"Lucy\", age: 9}\n```\n","description":"### reduceWhich\n\nReturns the minimum/maximum value of an array, after applying the provided function to set comparing rule.\n\nUse `Array.reduce()` in combination with the `comparator` function to get the appropriate element in the array.\nYou can omit the second parameter, `comparator`, to use the default one that returns the minimum element in the array.\n\n"},{"command":"reducedFilter","code":"### reducedFilter\n\nFilter an array of objects based on a condition while also filtering out unspecified keys.\n\nUse `Array.filter()` to filter the array based on the predicate `fn` so that it returns the objects for which the condition returned a truthy value. \nOn the filtered array, use `Array.map()` to return the new object using `Array.reduce()` to filter out the keys which were not supplied as the `keys` argument.\n\n```js\nconst reducedFilter = (data, keys, fn) =>\n  data.filter(fn).map(el =>\n    keys.reduce((acc, key) => {\n      acc[key] = el[key];\n      return acc;\n    }, {})\n  );\n```\n\n```js\nconst data = [\n  {\n    id: 1,\n    name: 'john',\n    age: 24\n  },\n  {\n    id: 2,\n    name: 'mike',\n    age: 50\n  }\n];\n\nreducedFilter(data, ['id', 'name'], item => item.age > 24); // [{ id: 2, name: 'mike'}]\n```\n","description":"### reducedFilter\n\nFilter an array of objects based on a condition while also filtering out unspecified keys.\n\nUse `Array.filter()` to filter the array based on the predicate `fn` so that it returns the objects for which the condition returned a truthy value. \nOn the filtered array, use `Array.map()` to return the new object using `Array.reduce()` to filter out the keys which were not supplied as the `keys` argument.\n\n"},{"command":"remove","code":"### remove\n\nRemoves elements from an array for which the given function returns `false`.\n\nUse `Array.filter()` to find array elements that return truthy values and `Array.reduce()` to remove elements using `Array.splice()`.\nThe `func` is invoked with three arguments (`value, index, array`).\n\n```js\nconst remove = (arr, func) =>\n  Array.isArray(arr)\n    ? arr.filter(func).reduce((acc, val) => {\n        arr.splice(arr.indexOf(val), 1);\n        return acc.concat(val);\n      }, [])\n    : [];\n```\n\n```js\nremove([1, 2, 3, 4], n => n % 2 === 0); // [2, 4]\n```\n","description":"### remove\n\nRemoves elements from an array for which the given function returns `false`.\n\nUse `Array.filter()` to find array elements that return truthy values and `Array.reduce()` to remove elements using `Array.splice()`.\nThe `func` is invoked with three arguments (`value, index, array`).\n\n"},{"command":"removeNonASCII","code":"### removeNonASCII\n\nRemoves non-printable ASCII characters.\n\nUse a regular expression to remove non-printable ASCII characters.\n\n```js\nconst removeNonASCII = str => str.replace(/[^\\x20-\\x7E]/g, '');\n```\n\n```js\nremoveNonASCII('äÄçÇéÉêlorem-ipsumöÖÐþúÚ'); // 'lorem-ipsum'\n```\n","description":"### removeNonASCII\n\nRemoves non-printable ASCII characters.\n\nUse a regular expression to remove non-printable ASCII characters.\n\n"},{"command":"reverseString","code":"### reverseString\n\nReverses a string.\n\nUse the spread operator (`...`) and `Array.reverse()` to reverse the order of the characters in the string.\nCombine characters to get a string using `String.join('')`.\n\n```js\nconst reverseString = str => [...str].reverse().join('');\n```\n\n```js\nreverseString('foobar'); // 'raboof'\n```\n","description":"### reverseString\n\nReverses a string.\n\nUse the spread operator (`...`) and `Array.reverse()` to reverse the order of the characters in the string.\nCombine characters to get a string using `String.join('')`.\n\n"},{"command":"round","code":"### round\n\nRounds a number to a specified amount of digits.\n\nUse `Math.round()` and template literals to round the number to the specified number of digits.\nOmit the second argument, `decimals` to round to an integer.\n\n```js\nconst round = (n, decimals = 0) => Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`);\n```\n\n```js\nround(1.005, 2); // 1.01\n```\n","description":"### round\n\nRounds a number to a specified amount of digits.\n\nUse `Math.round()` and template literals to round the number to the specified number of digits.\nOmit the second argument, `decimals` to round to an integer.\n\n"},{"command":"runAsync","code":"### runAsync\n\nRuns a function in a separate thread by using a [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers), allowing long running functions to not block the UI.\n\nCreate a new `Worker` using a `Blob` object URL, the contents of which should be the stringified version of the supplied function.\nImmediately post the return value of calling the function back.\nReturn a promise, listening for `onmessage` and `onerror` events and resolving the data posted back from the worker, or throwing an error.\n\n```js\nconst runAsync = fn => {\n  const worker = new Worker(\n    URL.createObjectURL(new Blob([`postMessage((${fn})());`]), {\n      type: 'application/javascript; charset=utf-8'\n    })\n  );\n  return new Promise((res, rej) => {\n    worker.onmessage = ({ data }) => {\n      res(data), worker.terminate();\n    };\n    worker.onerror = err => {\n      rej(err), worker.terminate();\n    };\n  });\n};\n```\n\n```js\nconst longRunningFunction = () => {\n  let result = 0;\n  for (let i = 0; i < 1000; i++) {\n    for (let j = 0; j < 700; j++) {\n      for (let k = 0; k < 300; k++) {\n        result = result + i + j + k;\n      }\n    }\n  }\n  return result;\n};\n/*\n  NOTE: Since the function is running in a different context, closures are not supported.\n  The function supplied to `runAsync` gets stringified, so everything becomes literal.\n  All variables and functions must be defined inside.\n*/\nrunAsync(longRunningFunction).then(console.log); // 209685000000\nrunAsync(() => 10 ** 3).then(console.log); // 1000\nlet outsideVariable = 50;\nrunAsync(() => typeof outsideVariable).then(console.log); // 'undefined'\n```\n","description":"### runAsync\n\nRuns a function in a separate thread by using a [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers), allowing long running functions to not block the UI.\n\nCreate a new `Worker` using a `Blob` object URL, the contents of which should be the stringified version of the supplied function.\nImmediately post the return value of calling the function back.\nReturn a promise, listening for `onmessage` and `onerror` events and resolving the data posted back from the worker, or throwing an error.\n\n"},{"command":"runPromisesInSeries","code":"### runPromisesInSeries\n\nRuns an array of promises in series.\n\nUse `Array.reduce()` to create a promise chain, where each promise returns the next promise when resolved.\n\n```js\nconst runPromisesInSeries = ps => ps.reduce((p, next) => p.then(next), Promise.resolve());\n```\n\n```js\nconst delay = d => new Promise(r => setTimeout(r, d));\nrunPromisesInSeries([() => delay(1000), () => delay(2000)]); // Executes each promise sequentially, taking a total of 3 seconds to complete\n```\n","description":"### runPromisesInSeries\n\nRuns an array of promises in series.\n\nUse `Array.reduce()` to create a promise chain, where each promise returns the next promise when resolved.\n\n"},{"command":"sample","code":"### sample\n\nReturns a random element from an array.\n\nUse `Math.random()` to generate a random number, multiply it by `length` and round it of to the nearest whole number using `Math.floor()`.\nThis method also works with strings.\n\n```js\nconst sample = arr => arr[Math.floor(Math.random() * arr.length)];\n```\n\n```js\nsample([3, 7, 9, 11]); // 9\n```\n","description":"### sample\n\nReturns a random element from an array.\n\nUse `Math.random()` to generate a random number, multiply it by `length` and round it of to the nearest whole number using `Math.floor()`.\nThis method also works with strings.\n\n"},{"command":"sampleSize","code":"### sampleSize\n\nGets `n` random elements at unique keys from `array` up to the size of `array`.\n\nShuffle the array using the [Fisher-Yates algorithm](https://github.com/chalarangelo/30-seconds-of-code#shuffle).\nUse `Array.slice()` to get the first `n` elements.\nOmit the second argument, `n` to get only one element at random from the array.\n\n```js\nconst sampleSize = ([...arr], n = 1) => {\n  let m = arr.length;\n  while (m) {\n    const i = Math.floor(Math.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  return arr.slice(0, n);\n};\n```\n\n```js\nsampleSize([1, 2, 3], 2); // [3,1]\nsampleSize([1, 2, 3], 4); // [2,3,1]\n```\n","description":"### sampleSize\n\nGets `n` random elements at unique keys from `array` up to the size of `array`.\n\nShuffle the array using the [Fisher-Yates algorithm](https://github.com/chalarangelo/30-seconds-of-code#shuffle).\nUse `Array.slice()` to get the first `n` elements.\nOmit the second argument, `n` to get only one element at random from the array.\n\n"},{"command":"scrollToTop","code":"### scrollToTop\n\nSmooth-scrolls to the top of the page.\n\nGet distance from top using `document.documentElement.scrollTop` or `document.body.scrollTop`.\nScroll by a fraction of the distance from the top. Use `window.requestAnimationFrame()` to animate the scrolling.\n\n```js\nconst scrollToTop = () => {\n  const c = document.documentElement.scrollTop || document.body.scrollTop;\n  if (c > 0) {\n    window.requestAnimationFrame(scrollToTop);\n    window.scrollTo(0, c - c / 8);\n  }\n};\n```\n\n```js\nscrollToTop();\n```\n","description":"### scrollToTop\n\nSmooth-scrolls to the top of the page.\n\nGet distance from top using `document.documentElement.scrollTop` or `document.body.scrollTop`.\nScroll by a fraction of the distance from the top. Use `window.requestAnimationFrame()` to animate the scrolling.\n\n"},{"command":"sdbm","code":"### sdbm\n\nHashes the input string into a whole number.\n\nUse `String.split('')` and `Array.reduce()` to create a hash of the input string, utilizing bit shifting.\n\n```js\nconst sdbm = str => {\n  let arr = str.split('');\n  return arr.reduce(\n    (hashCode, currentVal) =>\n      (hashCode = currentVal.charCodeAt(0) + (hashCode << 6) + (hashCode << 16) - hashCode),\n    0\n  );\n};\n```\n\n```js\nsdbm('name'); // -3521204949\n```\n","description":"### sdbm\n\nHashes the input string into a whole number.\n\nUse `String.split('')` and `Array.reduce()` to create a hash of the input string, utilizing bit shifting.\n\n"},{"command":"serializeCookie","code":"### serializeCookie\n\nSerialize a cookie name-value pair into a Set-Cookie header string.\n\nUse template literals and `encodeURIComponent()` to create the appropriate string.\n\n```js\nconst serializeCookie = (name, val) => `${encodeURIComponent(name)}=${encodeURIComponent(val)}`;\n```\n\n```js\nserializeCookie('foo', 'bar'); // 'foo=bar'\n```\n","description":"### serializeCookie\n\nSerialize a cookie name-value pair into a Set-Cookie header string.\n\nUse template literals and `encodeURIComponent()` to create the appropriate string.\n\n"},{"command":"setStyle","code":"### setStyle\n\nSets the value of a CSS rule for the specified element.\n\nUse `element.style` to set the value of the CSS rule for the specified element to `val`.\n\n```js\nconst setStyle = (el, ruleName, val) => (el.style[ruleName] = val);\n```\n\n```js\nsetStyle(document.querySelector('p'), 'font-size', '20px'); // The first <p> element on the page will have a font-size of 20px\n```\n","description":"### setStyle\n\nSets the value of a CSS rule for the specified element.\n\nUse `element.style` to set the value of the CSS rule for the specified element to `val`.\n\n"},{"command":"shallowClone","code":"### shallowClone\n\nCreates a shallow clone of an object.\n\nUse `Object.assign()` and an empty object (`{}`) to create a shallow clone of the original.\n\n```js\nconst shallowClone = obj => Object.assign({}, obj);\n```\n\n```js\nconst a = { x: true, y: 1 };\nconst b = shallowClone(a); // a !== b\n```\n","description":"### shallowClone\n\nCreates a shallow clone of an object.\n\nUse `Object.assign()` and an empty object (`{}`) to create a shallow clone of the original.\n\n"},{"command":"show","code":"### show\n\nShows all the elements specified.\n\nUse the spread operator (`...`) and `Array.forEach()` to clear the `display` property for each element specified.\n\n```js\nconst show = (...el) => [...el].forEach(e => (e.style.display = ''));\n```\n\n```js\nshow(...document.querySelectorAll('img')); // Shows all <img> elements on the page\n```\n","description":"### show\n\nShows all the elements specified.\n\nUse the spread operator (`...`) and `Array.forEach()` to clear the `display` property for each element specified.\n\n"},{"command":"shuffle","code":"### shuffle\n\nRandomizes the order of the values of an array, returning a new array.\n\nUses the [Fisher-Yates algorithm](https://github.com/chalarangelo/30-seconds-of-code#shuffle) to reorder the elements of the array.\n\n```js\nconst shuffle = ([...arr]) => {\n  let m = arr.length;\n  while (m) {\n    const i = Math.floor(Math.random() * m--);\n    [arr[m], arr[i]] = [arr[i], arr[m]];\n  }\n  return arr;\n};\n```\n\n```js\nconst foo = [1, 2, 3];\nshuffle(foo); // [2,3,1], foo = [1,2,3]\n```\n","description":"### shuffle\n\nRandomizes the order of the values of an array, returning a new array.\n\nUses the [Fisher-Yates algorithm](https://github.com/chalarangelo/30-seconds-of-code#shuffle) to reorder the elements of the array.\n\n"},{"command":"similarity","code":"### similarity\n\nReturns an array of elements that appear in both arrays.\n\nUse `Array.filter()` to remove values that are not part of `values`, determined using `Array.includes()`.\n\n```js\nconst similarity = (arr, values) => arr.filter(v => values.includes(v));\n```\n\n```js\nsimilarity([1, 2, 3], [1, 2, 4]); // [1,2]\n```\n","description":"### similarity\n\nReturns an array of elements that appear in both arrays.\n\nUse `Array.filter()` to remove values that are not part of `values`, determined using `Array.includes()`.\n\n"},{"command":"size","code":"### size\n\nGet size of arrays, objects or strings.\n\nGet type of `val` (`array`, `object` or `string`). \nUse `length` property for arrays.\nUse `length` or `size` value if available or number of keys for objects.\nUse `size` of a [`Blob` object](https://developer.mozilla.org/en-US/docs/Web/API/Blob) created from `val` for strings.\n\nSplit strings into array of characters with `split('')` and return its length.\n\n```js\nconst size = val =>\n  Array.isArray(val)\n    ? val.length\n    : val && typeof val === 'object'\n      ? val.size || val.length || Object.keys(val).length\n      : typeof val === 'string' ? new Blob([val]).size : 0;\n```\n\n```js\nsize([1, 2, 3, 4, 5]); // 5\nsize('size'); // 4\nsize({ one: 1, two: 2, three: 3 }); // 3\n```\n","description":"### size\n\nGet size of arrays, objects or strings.\n\nGet type of `val` (`array`, `object` or `string`). \nUse `length` property for arrays.\nUse `length` or `size` value if available or number of keys for objects.\nUse `size` of a [`Blob` object](https://developer.mozilla.org/en-US/docs/Web/API/Blob) created from `val` for strings.\n\nSplit strings into array of characters with `split('')` and return its length.\n\n"},{"command":"sleep","code":"### sleep\n\nDelays the execution of an asynchronous function.\n\nDelay executing part of an `async` function, by putting it to sleep, returning a `Promise`.\n\n```js\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n```\n\n```js\nasync function sleepyWork() {\n  console.log(\"I'm going to sleep for 1 second.\");\n  await sleep(1000);\n  console.log('I woke up after 1 second.');\n}\n```\n","description":"### sleep\n\nDelays the execution of an asynchronous function.\n\nDelay executing part of an `async` function, by putting it to sleep, returning a `Promise`.\n\n"},{"command":"smoothScroll","code":"### smoothScroll\n\nSmoothly scrolls the element on which it's called into the visible area of the browser window.\n\nUse `.scrollIntoView` method to scroll the element. \nPass `{ behavior: 'smooth' }` to `.scrollIntoView` so it scrolls smoothly.\n\n```js\nconst smoothScroll = element =>\n  document.querySelector(element).scrollIntoView({\n    behavior: 'smooth'\n  });\n```\n\n```js\nsmoothScroll('#fooBar'); // scrolls smoothly to the element with the id fooBar\nsmoothScroll('.fooBar'); // scrolls smoothly to the first element with a class of fooBar\n```\n","description":"### smoothScroll\n\nSmoothly scrolls the element on which it's called into the visible area of the browser window.\n\nUse `.scrollIntoView` method to scroll the element. \nPass `{ behavior: 'smooth' }` to `.scrollIntoView` so it scrolls smoothly.\n\n"},{"command":"sortCharactersInString","code":"### sortCharactersInString\n\nAlphabetically sorts the characters in a string.\n\nUse the spread operator (`...`), `Array.sort()` and  `String.localeCompare()` to sort the characters in `str`, recombine using `String.join('')`.\n\n```js\nconst sortCharactersInString = str => [...str].sort((a, b) => a.localeCompare(b)).join('');\n```\n\n```js\nsortCharactersInString('cabbage'); // 'aabbceg'\n```\n","description":"### sortCharactersInString\n\nAlphabetically sorts the characters in a string.\n\nUse the spread operator (`...`), `Array.sort()` and  `String.localeCompare()` to sort the characters in `str`, recombine using `String.join('')`.\n\n"},{"command":"sortedIndex","code":"### sortedIndex\n\nReturns the lowest index at which value should be inserted into array in order to maintain its sort order.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.findIndex()` to find the appropriate index where the element should be inserted.\n\n```js\nconst sortedIndex = (arr, n) => {\n  const isDescending = arr[0] > arr[arr.length - 1];\n  const index = arr.findIndex(el => (isDescending ? n >= el : n <= el));\n  return index === -1 ? arr.length : index;\n};\n```\n\n```js\nsortedIndex([5, 3, 2, 1], 4); // 1\nsortedIndex([30, 50], 40); // 1\n```\n","description":"### sortedIndex\n\nReturns the lowest index at which value should be inserted into array in order to maintain its sort order.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.findIndex()` to find the appropriate index where the element should be inserted.\n\n"},{"command":"sortedIndexBy","code":"### sortedIndexBy\n\nReturns the lowest index at which value should be inserted into array in order to maintain its sort order, based on a provided iterator function.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.findIndex()` to find the appropriate index where the element should be inserted, based on the iterator function `fn`.\n\n```js\nconst sortedIndexBy = (arr, n, fn) => {\n  const isDescending = fn(arr[0]) > fn(arr[arr.length - 1]);\n  const val = fn(n);\n  const index = arr.findIndex(el => (isDescending ? val >= fn(el) : val <= fn(el)));\n  return index === -1 ? arr.length : index;\n};\n```\n\n```js\nsortedIndexBy([{ x: 4 }, { x: 5 }], { x: 4 }, o => o.x); // 0\n```\n","description":"### sortedIndexBy\n\nReturns the lowest index at which value should be inserted into array in order to maintain its sort order, based on a provided iterator function.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.findIndex()` to find the appropriate index where the element should be inserted, based on the iterator function `fn`.\n\n"},{"command":"sortedLastIndex","code":"### sortedLastIndex\n\nReturns the highest index at which value should be inserted into array in order to maintain its sort order.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.reverse()` and `Array.findIndex()` to find the appropriate last index where the element should be inserted.\n\n```js\nconst sortedLastIndex = (arr, n) => {\n  const isDescending = arr[0] > arr[arr.length - 1];\n  const index = arr.reverse().findIndex(el => (isDescending ? n <= el : n >= el));\n  return index === -1 ? 0 : arr.length - index;\n};\n```\n\n```js\nsortedLastIndex([10, 20, 30, 30, 40], 30); // 4\n```\n","description":"### sortedLastIndex\n\nReturns the highest index at which value should be inserted into array in order to maintain its sort order.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.reverse()` and `Array.findIndex()` to find the appropriate last index where the element should be inserted.\n\n"},{"command":"sortedLastIndexBy","code":"### sortedLastIndexBy\n\nReturns the highest index at which value should be inserted into array in order to maintain its sort order, based on a provided iterator function.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.map()` to apply the iterator function to all elements of the array.\nUse `Array.reverse()` and `Array.findIndex()` to find the appropriate last index where the element should be inserted, based on the provided iterator function.\n\n```js\nconst sortedLastIndexBy = (arr, n, fn) => {\n  const isDescending = fn(arr[0]) > fn(arr[arr.length - 1]);\n  const val = fn(n);\n  const index = arr\n    .map(fn)\n    .reverse()\n    .findIndex(el => (isDescending ? val <= el : val >= el));\n  return index === -1 ? 0 : arr.length - index;\n};\n```\n\n```js\nsortedLastIndexBy([{ x: 4 }, { x: 5 }], { x: 4 }, o => o.x); // 1\n```\n","description":"### sortedLastIndexBy\n\nReturns the highest index at which value should be inserted into array in order to maintain its sort order, based on a provided iterator function.\n\nCheck if the array is sorted in descending order (loosely).\nUse `Array.map()` to apply the iterator function to all elements of the array.\nUse `Array.reverse()` and `Array.findIndex()` to find the appropriate last index where the element should be inserted, based on the provided iterator function.\n\n"},{"command":"splitLines","code":"### splitLines\n\nSplits a multiline string into an array of lines.\n\nUse `String.split()` and a regular expression to match line breaks and create an array.\n\n```js\nconst splitLines = str => str.split(/\\r?\\n/);\n```\n\n```js\nsplitLines('This\\nis a\\nmultiline\\nstring.\\n'); // ['This', 'is a', 'multiline', 'string.' , '']\n```\n","description":"### splitLines\n\nSplits a multiline string into an array of lines.\n\nUse `String.split()` and a regular expression to match line breaks and create an array.\n\n"},{"command":"spreadOver","code":"### spreadOver\r\n\r\nTakes a variadic function and returns a closure that accepts an array of arguments to map to the inputs of the function.\r\n\r\nUse closures and the spread operator (`...`) to map the array of arguments to the inputs of the function.\r\n\r\n```js\nconst spreadOver = fn => argsArr => fn(...argsArr);\n```\r\n\r\n```js\nconst arrayMax = spreadOver(Math.max);\narrayMax([1, 2, 3]); // 3\n```\r\n","description":"### spreadOver\r\n\r\nTakes a variadic function and returns a closure that accepts an array of arguments to map to the inputs of the function.\r\n\r\nUse closures and the spread operator (`...`) to map the array of arguments to the inputs of the function.\r\n\r\n"},{"command":"stableSort","code":"### stableSort\n\nPerforms stable sorting of an array, preserving the initial indexes of items when their values are the same. \nDoes not mutate the original array, but returns a new array instead.\n\nUse `Array.map()` to pair each element of the input array with its corresponding index. \nUse `Array.sort()` and a `compare` function to sort the list, preserving their initial order if the items compared are equal.\nUse `Array.map()` to convert back to the initial array items.\n\n```js\nconst stableSort = (arr, compare) =>\n  arr\n    .map((item, index) => ({ item, index }))\n    .sort((a, b) => compare(a.item, b.item) || a.index - b.index)\n    .map(({ item }) => item);\n```\n\n```js\nconst arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst stable = stableSort(arr, () => 0); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n","description":"### stableSort\n\nPerforms stable sorting of an array, preserving the initial indexes of items when their values are the same. \nDoes not mutate the original array, but returns a new array instead.\n\nUse `Array.map()` to pair each element of the input array with its corresponding index. \nUse `Array.sort()` and a `compare` function to sort the list, preserving their initial order if the items compared are equal.\nUse `Array.map()` to convert back to the initial array items.\n\n"},{"command":"standardDeviation","code":"### standardDeviation\n\nReturns the standard deviation of an array of numbers.\n\nUse `Array.reduce()` to calculate the mean, variance and the sum of the variance of the values, the variance of the values, then\ndetermine the standard deviation.\nYou can omit the second argument to get the sample standard deviation or set it to `true` to get the population standard deviation.\n\n```js\nconst standardDeviation = (arr, usePopulation = false) => {\n  const mean = arr.reduce((acc, val) => acc + val, 0) / arr.length;\n  return Math.sqrt(\n    arr.reduce((acc, val) => acc.concat((val - mean) ** 2), []).reduce((acc, val) => acc + val, 0) /\n      (arr.length - (usePopulation ? 0 : 1))\n  );\n};\n```\n\n```js\nstandardDeviation([10, 2, 38, 23, 38, 23, 21]); // 13.284434142114991 (sample)\nstandardDeviation([10, 2, 38, 23, 38, 23, 21], true); // 12.29899614287479 (population)\n```\n","description":"### standardDeviation\n\nReturns the standard deviation of an array of numbers.\n\nUse `Array.reduce()` to calculate the mean, variance and the sum of the variance of the values, the variance of the values, then\ndetermine the standard deviation.\nYou can omit the second argument to get the sample standard deviation or set it to `true` to get the population standard deviation.\n\n"},{"command":"stringPermutations","code":"### stringPermutations\n\n⚠️ **WARNING**: This function's execution time increases exponentially with each character. Anything more than 8 to 10 characters will cause your browser to hang as it tries to solve all the different combinations.\n\nGenerates all permutations of a string (contains duplicates).\n\nUse recursion.\nFor each letter in the given string, create all the partial permutations for the rest of its letters.\nUse `Array.map()` to combine the letter with each partial permutation, then `Array.reduce()` to combine all permutations in one array.\nBase cases are for string `length` equal to `2` or `1`.\n\n```js\nconst stringPermutations = str => {\n  if (str.length <= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];\n  return str\n    .split('')\n    .reduce(\n      (acc, letter, i) =>\n        acc.concat(stringPermutations(str.slice(0, i) + str.slice(i + 1)).map(val => letter + val)),\n      []\n    );\n};\n```\n\n```js\nstringPermutations('abc'); // ['abc','acb','bac','bca','cab','cba']\n```\n","description":"### stringPermutations\n\n⚠️ **WARNING**: This function's execution time increases exponentially with each character. Anything more than 8 to 10 characters will cause your browser to hang as it tries to solve all the different combinations.\n\nGenerates all permutations of a string (contains duplicates).\n\nUse recursion.\nFor each letter in the given string, create all the partial permutations for the rest of its letters.\nUse `Array.map()` to combine the letter with each partial permutation, then `Array.reduce()` to combine all permutations in one array.\nBase cases are for string `length` equal to `2` or `1`.\n\n"},{"command":"stripHTMLTags","code":"### stripHTMLTags\n\nRemoves HTML/XML tags from string.\n\nUse a regular expression to remove HTML/XML tags from a string.\n\n```js\nconst stripHTMLTags = str => str.replace(/<[^>]*>/g, '');\n```\n\n```js\nstripHTMLTags('<p><em>lorem</em> <strong>ipsum</strong></p>'); // 'lorem ipsum'\n```\n","description":"### stripHTMLTags\n\nRemoves HTML/XML tags from string.\n\nUse a regular expression to remove HTML/XML tags from a string.\n\n"},{"command":"sum","code":"### sum\n\nReturns the sum of two or more numbers/arrays.\n\nUse `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`.\n\n```js\nconst sum = (...arr) => [...arr].reduce((acc, val) => acc + val, 0);\n```\n\n```js\nsum(...[1, 2, 3, 4]); // 10\n```\n","description":"### sum\n\nReturns the sum of two or more numbers/arrays.\n\nUse `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`.\n\n"},{"command":"sumBy","code":"### sumBy\n\nReturns the sum of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`.\n\n```js\nconst sumBy = (arr, fn) =>\n  arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val) => acc + val, 0);\n```\n\n```js\nsumBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n); // 20\nsumBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'); // 20\n```\n","description":"### sumBy\n\nReturns the sum of an array, after mapping each element to a value using the provided function.\n\nUse `Array.map()` to map each element to the value returned by `fn`, `Array.reduce()` to add each value to an accumulator, initialized with a value of `0`.\n\n"},{"command":"sumPower","code":"### sumPower\n\nReturns the sum of the powers of all the numbers from `start` to `end` (both inclusive).\n\nUse `Array.fill()` to create an array of all the numbers in the target range, `Array.map()` and the exponent operator (`**`) to raise them to `power` and `Array.reduce()` to add them together.\nOmit the second argument, `power`, to use a default power of `2`.\nOmit the third argument, `start`, to use a default starting value of `1`.\n\n```js\nconst sumPower = (end, power = 2, start = 1) =>\n  Array(end + 1 - start)\n    .fill(0)\n    .map((x, i) => (i + start) ** power)\n    .reduce((a, b) => a + b, 0);\n```\n\n```js\nsumPower(10); // 385\nsumPower(10, 3); //3025\nsumPower(10, 3, 5); //2925\n```\n","description":"### sumPower\n\nReturns the sum of the powers of all the numbers from `start` to `end` (both inclusive).\n\nUse `Array.fill()` to create an array of all the numbers in the target range, `Array.map()` and the exponent operator (`**`) to raise them to `power` and `Array.reduce()` to add them together.\nOmit the second argument, `power`, to use a default power of `2`.\nOmit the third argument, `start`, to use a default starting value of `1`.\n\n"},{"command":"symmetricDifference","code":"### symmetricDifference\n\nReturns the symmetric difference between two arrays.\n\nCreate a `Set` from each array, then use `Array.filter()` on each of them to only keep values not contained in the other.\n\n```js\nconst symmetricDifference = (a, b) => {\n  const sA = new Set(a),\n    sB = new Set(b);\n  return [...a.filter(x => !sB.has(x)), ...b.filter(x => !sA.has(x))];\n};\n```\n\n```js\nsymmetricDifference([1, 2, 3], [1, 2, 4]); // [3,4]\n```\n","description":"### symmetricDifference\n\nReturns the symmetric difference between two arrays.\n\nCreate a `Set` from each array, then use `Array.filter()` on each of them to only keep values not contained in the other.\n\n"},{"command":"symmetricDifferenceBy","code":"### symmetricDifferenceBy\n\nReturns the symmetric difference between two arrays, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying `fn` to each array's elements, then use `Array.filter()` on each of them to only keep values not contained in the other.\n\n```js\nconst symmetricDifferenceBy = (a, b, fn) => {\n  const sA = new Set(a.map(v => fn(v))),\n    sB = new Set(b.map(v => fn(v)));\n  return [...a.filter(x => !sB.has(fn(x))), ...b.filter(x => !sA.has(fn(x)))];\n};\n```\n\n```js\nsymmetricDifferenceBy([2.1, 1.2], [2.3, 3.4], Math.floor); // [ 1.2, 3.4 ]\n```\n","description":"### symmetricDifferenceBy\n\nReturns the symmetric difference between two arrays, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying `fn` to each array's elements, then use `Array.filter()` on each of them to only keep values not contained in the other.\n\n"},{"command":"symmetricDifferenceWith","code":"### symmetricDifferenceWith\n\nReturns the symmetric difference between two arrays, using a provided function as a comparator.\n\nUse `Array.filter()` and `Array.findIndex()` to find the appropriate values.\n\n```js\nconst symmetricDifferenceWith = (arr, val, comp) => [\n  ...arr.filter(a => val.findIndex(b => comp(a, b)) === -1),\n  ...val.filter(a => arr.findIndex(b => comp(a, b)) === -1)\n];\n```\n\n```js\nsymmetricDifferenceWith(\n  [1, 1.2, 1.5, 3, 0],\n  [1.9, 3, 0, 3.9],\n  (a, b) => Math.round(a) === Math.round(b)\n); // [1, 1.2, 3.9]\n```\n","description":"### symmetricDifferenceWith\n\nReturns the symmetric difference between two arrays, using a provided function as a comparator.\n\nUse `Array.filter()` and `Array.findIndex()` to find the appropriate values.\n\n"},{"command":"tail","code":"### tail\n\nReturns all elements in an array except for the first one.\n\nReturn `Array.slice(1)` if the array's `length` is more than `1`, otherwise, return the whole array.\n\n```js\nconst tail = arr => (arr.length > 1 ? arr.slice(1) : arr);\n```\n\n```js\ntail([1, 2, 3]); // [2,3]\ntail([1]); // [1]\n```\n","description":"### tail\n\nReturns all elements in an array except for the first one.\n\nReturn `Array.slice(1)` if the array's `length` is more than `1`, otherwise, return the whole array.\n\n"},{"command":"take","code":"### take\n\nReturns an array with n elements removed from the beginning.\n\nUse `Array.slice()` to create a slice of the array with `n` elements taken from the beginning.\n\n```js\nconst take = (arr, n = 1) => arr.slice(0, n);\n```\n\n```js\ntake([1, 2, 3], 5); // [1, 2, 3]\ntake([1, 2, 3], 0); // []\n```\n","description":"### take\n\nReturns an array with n elements removed from the beginning.\n\nUse `Array.slice()` to create a slice of the array with `n` elements taken from the beginning.\n\n"},{"command":"takeRight","code":"### takeRight\n\nReturns an array with n elements removed from the end.\n\nUse `Array.slice()` to create a slice of the array with `n` elements taken from the end.\n\n```js\nconst takeRight = (arr, n = 1) => arr.slice(arr.length - n, arr.length);\n```\n\n```js\ntakeRight([1, 2, 3], 2); // [ 2, 3 ]\ntakeRight([1, 2, 3]); // [3]\n```\n","description":"### takeRight\n\nReturns an array with n elements removed from the end.\n\nUse `Array.slice()` to create a slice of the array with `n` elements taken from the end.\n\n"},{"command":"takeRightWhile","code":"### takeRightWhile\n\nRemoves elements from the end of an array until the passed function returns `true`. Returns the removed elements.\n\nLoop through the array, using a `for...of` loop over `Array.keys()` until the returned value from the function is `true`.\nReturn the removed elements, using `Array.reverse()` and `Array.slice()`.\n\n```js\nconst takeRightWhile = (arr, func) => {\n  for (let i of arr.reverse().keys())\n    if (func(arr[i])) return arr.reverse().slice(arr.length - i, arr.length);\n  return arr;\n};\n```\n\n```js\ntakeRightWhile([1, 2, 3, 4], n => n < 3); // [3, 4]\n```\n","description":"### takeRightWhile\n\nRemoves elements from the end of an array until the passed function returns `true`. Returns the removed elements.\n\nLoop through the array, using a `for...of` loop over `Array.keys()` until the returned value from the function is `true`.\nReturn the removed elements, using `Array.reverse()` and `Array.slice()`.\n\n"},{"command":"takeWhile","code":"### takeWhile\n\nRemoves elements in an array until the passed function returns `true`. Returns the removed elements.\n\nLoop through the array, using a `for...of` loop over `Array.keys()` until the returned value from the function is `true`.\nReturn the removed elements, using `Array.slice()`.\n\n```js\nconst takeWhile = (arr, func) => {\n  for (let i of arr.keys()) if (func(arr[i])) return arr.slice(0, i);\n  return arr;\n};\n```\n\n```js\ntakeWhile([1, 2, 3, 4], n => n >= 3); // [1, 2]\n```\n","description":"### takeWhile\n\nRemoves elements in an array until the passed function returns `true`. Returns the removed elements.\n\nLoop through the array, using a `for...of` loop over `Array.keys()` until the returned value from the function is `true`.\nReturn the removed elements, using `Array.slice()`.\n\n"},{"command":"throttle","code":"### throttle\n\nCreates a throttled function that only invokes the provided function at most once per every `wait` milliseconds\n\nUse `setTimeout()` and `clearTimeout()` to throttle the given method, `fn`.\nUse `Function.apply()` to apply the `this` context to the function and provide the necessary `arguments`.\nUse `Date.now()` to keep track of the last time the throttled function was invoked.\nOmit the second argument, `wait`, to set the timeout at a default of 0 ms.\n\n```js\nconst throttle = (fn, wait) => {\n  let inThrottle, lastFn, lastTime;\n  return function() {\n    const context = this,\n      args = arguments;\n    if (!inThrottle) {\n      fn.apply(context, args);\n      lastTime = Date.now();\n      inThrottle = true;\n    } else {\n      clearTimeout(lastFn);\n      lastFn = setTimeout(function() {\n        if (Date.now() - lastTime >= wait) {\n          fn.apply(context, args);\n          lastTime = Date.now();\n        }\n      }, wait - (Date.now() - lastTime));\n    }\n  };\n};\n```\n\n```js\nwindow.addEventListener(\n  'resize',\n  throttle(function(evt) {\n    console.log(window.innerWidth);\n    console.log(window.innerHeight);\n  }, 250)\n); // Will log the window dimensions at most every 250ms\n```\n","description":"### throttle\n\nCreates a throttled function that only invokes the provided function at most once per every `wait` milliseconds\n\nUse `setTimeout()` and `clearTimeout()` to throttle the given method, `fn`.\nUse `Function.apply()` to apply the `this` context to the function and provide the necessary `arguments`.\nUse `Date.now()` to keep track of the last time the throttled function was invoked.\nOmit the second argument, `wait`, to set the timeout at a default of 0 ms.\n\n"},{"command":"timeTaken","code":"### timeTaken\n\nMeasures the time taken by a function to execute.\n\nUse `console.time()` and `console.timeEnd()` to measure the difference between the start and end times to determine how long the callback took to execute.\n\n```js\nconst timeTaken = callback => {\n  console.time('timeTaken');\n  const r = callback();\n  console.timeEnd('timeTaken');\n  return r;\n};\n```\n\n```js\ntimeTaken(() => Math.pow(2, 10)); // 1024, (logged): timeTaken: 0.02099609375ms\n```\n","description":"### timeTaken\n\nMeasures the time taken by a function to execute.\n\nUse `console.time()` and `console.timeEnd()` to measure the difference between the start and end times to determine how long the callback took to execute.\n\n"},{"command":"times","code":"### times\n\nIterates over a callback `n` times\n\nUse `Function.call()` to call `fn` `n` times or until it returns `false`.\nOmit the last argument, `context`, to use an `undefined` object (or the global object in non-strict mode).\n\n```js\nconst times = (n, fn, context = undefined) => {\n  let i = 0;\n  while (fn.call(context, i) !== false && ++i < n) {}\n};\n```\n\n```js\nvar output = '';\ntimes(5, i => (output += i));\nconsole.log(output); // 01234\n```\n","description":"### times\n\nIterates over a callback `n` times\n\nUse `Function.call()` to call `fn` `n` times or until it returns `false`.\nOmit the last argument, `context`, to use an `undefined` object (or the global object in non-strict mode).\n\n"},{"command":"toCamelCase","code":"### toCamelCase\n\nConverts a string to camelcase.\n\nBreak the string into words and combine them capitalizing the first letter of each word, using a regexp.\n\n```js\nconst toCamelCase = str => {\n  let s =\n    str &&\n    str\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n      .map(x => x.slice(0, 1).toUpperCase() + x.slice(1).toLowerCase())\n      .join('');\n  return s.slice(0, 1).toLowerCase() + s.slice(1);\n};\n```\n\n```js\ntoCamelCase('some_database_field_name'); // 'someDatabaseFieldName'\ntoCamelCase('Some label that needs to be camelized'); // 'someLabelThatNeedsToBeCamelized'\ntoCamelCase('some-javascript-property'); // 'someJavascriptProperty'\ntoCamelCase('some-mixed_string with spaces_underscores-and-hyphens'); // 'someMixedStringWithSpacesUnderscoresAndHyphens'\n```\n","description":"### toCamelCase\n\nConverts a string to camelcase.\n\nBreak the string into words and combine them capitalizing the first letter of each word, using a regexp.\n\n"},{"command":"toCurrency","code":"### toCurrency\n\nTake a number and return specified currency formatting.\n\nUse `Intl.NumberFormat` to enable country / currency sensitive formatting.\n\n```js\nconst toCurrency = (n, curr, LanguageFormat = undefined) =>\n  Intl.NumberFormat(LanguageFormat, { style: 'currency', currency: curr }).format(n);\n```\n\n```js\ntoCurrency(123456.789, 'EUR'); // €123,456.79  | currency: Euro | currencyLangFormat: Local\ntoCurrency(123456.789, 'USD', 'en-us'); // $123,456.79  | currency: US Dollar | currencyLangFormat: English (United States)\ntoCurrency(123456.789, 'USD', 'fa'); // ۱۲۳٬۴۵۶٫۷۹ ؜$ | currency: US Dollar | currencyLangFormat: Farsi\ntoCurrency(322342436423.2435, 'JPY'); // ¥322,342,436,423 | currency: Japanese Yen | currencyLangFormat: Local\ntoCurrency(322342436423.2435, 'JPY', 'fi'); // 322 342 436 423 ¥ | currency: Japanese Yen | currencyLangFormat: Finnish\n```\n","description":"### toCurrency\n\nTake a number and return specified currency formatting.\n\nUse `Intl.NumberFormat` to enable country / currency sensitive formatting.\n\n"},{"command":"toDecimalMark","code":"### toDecimalMark\n\nUse `toLocaleString()` to convert a float-point arithmetic to the [Decimal mark](https://en.wikipedia.org/wiki/Decimal_mark) form. It makes a comma separated string from a number.\n\n ```js\nconst toDecimalMark = num => num.toLocaleString('en-US');\n```\n\n```js\ntoDecimalMark(12305030388.9087); // \"12,305,030,388.909\"\n```\n","description":"### toDecimalMark\n\nUse `toLocaleString()` to convert a float-point arithmetic to the [Decimal mark](https://en.wikipedia.org/wiki/Decimal_mark) form. It makes a comma separated string from a number.\n\n "},{"command":"toKebabCase","code":"### toKebabCase\n\nConverts a string to kebab case.\n\nBreak the string into words and combine them adding `-` as a separator, using a regexp.\n\n```js\nconst toKebabCase = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('-');\n```\n\n```js\ntoKebabCase('camelCase'); // 'camel-case'\ntoKebabCase('some text'); // 'some-text'\ntoKebabCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some-mixed-string-with-spaces-underscores-and-hyphens'\ntoKebabCase('AllThe-small Things'); // \"all-the-small-things\"\ntoKebabCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML'); // \"i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-xml-and-html\"\n```\n","description":"### toKebabCase\n\nConverts a string to kebab case.\n\nBreak the string into words and combine them adding `-` as a separator, using a regexp.\n\n"},{"command":"toOrdinalSuffix","code":"### toOrdinalSuffix\n\nAdds an ordinal suffix to a number.\n\nUse the modulo operator (`%`) to find values of single and tens digits.\nFind which ordinal pattern digits match.\nIf digit is found in teens pattern, use teens ordinal.\n\n```js\nconst toOrdinalSuffix = num => {\n  const int = parseInt(num),\n    digits = [int % 10, int % 100],\n    ordinals = ['st', 'nd', 'rd', 'th'],\n    oPattern = [1, 2, 3, 4],\n    tPattern = [11, 12, 13, 14, 15, 16, 17, 18, 19];\n  return oPattern.includes(digits[0]) && !tPattern.includes(digits[1])\n    ? int + ordinals[digits[0] - 1]\n    : int + ordinals[3];\n};\n```\n\n```js\ntoOrdinalSuffix('123'); // \"123rd\"\n```\n","description":"### toOrdinalSuffix\n\nAdds an ordinal suffix to a number.\n\nUse the modulo operator (`%`) to find values of single and tens digits.\nFind which ordinal pattern digits match.\nIf digit is found in teens pattern, use teens ordinal.\n\n"},{"command":"toSafeInteger","code":"### toSafeInteger\n\nConverts a value to a safe integer.\n\nUse `Math.max()` and `Math.min()` to find the closest safe value.\nUse `Math.round()` to convert to an integer.\n\n```js\nconst toSafeInteger = num =>\n  Math.round(Math.max(Math.min(num, Number.MAX_SAFE_INTEGER), Number.MIN_SAFE_INTEGER));\n```\n\n```js\ntoSafeInteger('3.2'); // 3\ntoSafeInteger(Infinity); // 9007199254740991\n```\n","description":"### toSafeInteger\n\nConverts a value to a safe integer.\n\nUse `Math.max()` and `Math.min()` to find the closest safe value.\nUse `Math.round()` to convert to an integer.\n\n"},{"command":"toSnakeCase","code":"### toSnakeCase\n\nConverts a string to snake case.\n\nBreak the string into words and combine them adding `_` as a separator, using a regexp.\n\n```js\nconst toSnakeCase = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('_');\n```\n\n```js\ntoSnakeCase('camelCase'); // 'camel_case'\ntoSnakeCase('some text'); // 'some_text'\ntoSnakeCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some_mixed_string_with_spaces_underscores_and_hyphens'\ntoSnakeCase('AllThe-small Things'); // \"all_the_smal_things\"\ntoSnakeCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML'); // \"i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html\"\n```\n","description":"### toSnakeCase\n\nConverts a string to snake case.\n\nBreak the string into words and combine them adding `_` as a separator, using a regexp.\n\n"},{"command":"toggleClass","code":"### toggleClass\n\nToggle a class for an element.\n\nUse `element.classList.toggle()` to toggle the specified class for the element.\n\n```js\nconst toggleClass = (el, className) => el.classList.toggle(className);\n```\n\n```js\ntoggleClass(document.querySelector('p.special'), 'special'); // The paragraph will not have the 'special' class anymore\n```\n","description":"### toggleClass\n\nToggle a class for an element.\n\nUse `element.classList.toggle()` to toggle the specified class for the element.\n\n"},{"command":"tomorrow","code":"### tomorrow\n\nResults in a string representation of tomorrow's date.\nUse `new Date()` to get today's date, adding one day using `Date.getDate()` and `Date.setDate()`, and converting the Date object to a string.\n\n```js\nconst tomorrow = (long = false) => {\n  let t = new Date();\n  t.setDate(t.getDate() + 1);\n  const ret = `${t.getFullYear()}-${String(t.getMonth() + 1).padStart(2, '0')}-${String(\n    t.getDate()\n  ).padStart(2, '0')}`;\n  return !long ? ret : `${ret}T00:00:00`;\n};\n```\n\n```js\ntomorrow(); // 2017-12-27 (if current date is 2017-12-26)\ntomorrow(true); // 2017-12-27T00:00:00 (if current date is 2017-12-26)\n```\n","description":"### tomorrow\n\nResults in a string representation of tomorrow's date.\nUse `new Date()` to get today's date, adding one day using `Date.getDate()` and `Date.setDate()`, and converting the Date object to a string.\n\n"},{"command":"transform","code":"### transform\n\nApplies a function against an accumulator and each key in the object (from left to right).\n\nUse `Object.keys(obj)` to iterate over each key in the object, `Array.reduce()` to call the apply the specified function against the given accumulator.\n\n```js\nconst transform = (obj, fn, acc) => Object.keys(obj).reduce((a, k) => fn(a, obj[k], k, obj), acc);\n```\n\n```js\ntransform(\n  { a: 1, b: 2, c: 1 },\n  (r, v, k) => {\n    (r[v] || (r[v] = [])).push(k);\n    return r;\n  },\n  {}\n); // { '1': ['a', 'c'], '2': ['b'] }\n```\n","description":"### transform\n\nApplies a function against an accumulator and each key in the object (from left to right).\n\nUse `Object.keys(obj)` to iterate over each key in the object, `Array.reduce()` to call the apply the specified function against the given accumulator.\n\n"},{"command":"truncateString","code":"### truncateString\n\nTruncates a string up to a specified length.\n\nDetermine if the string's `length` is greater than `num`.\nReturn the string truncated to the desired length, with `'...'` appended to the end or the original string.\n\n```js\nconst truncateString = (str, num) =>\n  str.length > num ? str.slice(0, num > 3 ? num - 3 : num) + '...' : str;\n```\n\n```js\ntruncateString('boomerang', 7); // 'boom...'\n```\n","description":"### truncateString\n\nTruncates a string up to a specified length.\n\nDetermine if the string's `length` is greater than `num`.\nReturn the string truncated to the desired length, with `'...'` appended to the end or the original string.\n\n"},{"command":"truthCheckCollection","code":"### truthCheckCollection\n\nChecks if the predicate (second argument) is truthy on all elements of a collection (first argument).\n\nUse `Array.every()` to check if each passed object has the specified property and if it returns a truthy value.\n\n```js\nconst truthCheckCollection = (collection, pre) => collection.every(obj => obj[pre]);\n```\n\n```js\ntruthCheckCollection([{ user: 'Tinky-Winky', sex: 'male' }, { user: 'Dipsy', sex: 'male' }], 'sex'); // true\n```\n","description":"### truthCheckCollection\n\nChecks if the predicate (second argument) is truthy on all elements of a collection (first argument).\n\nUse `Array.every()` to check if each passed object has the specified property and if it returns a truthy value.\n\n"},{"command":"unary","code":"### unary\n\nCreates a function that accepts up to one argument, ignoring any additional arguments.\n\nCall the provided function, `fn`, with just the first argument given.\n\n```js\nconst unary = fn => val => fn(val);\n```\n\n```js\n['6', '8', '10'].map(unary(parseInt)); // [6, 8, 10]\n```\n","description":"### unary\n\nCreates a function that accepts up to one argument, ignoring any additional arguments.\n\nCall the provided function, `fn`, with just the first argument given.\n\n"},{"command":"uncurry","code":"### uncurry\n\nUncurries a function up to depth `n`.\n\nReturn a variadic function.\nUse `Array.reduce()` on the provided arguments to call each subsequent curry level of the function.\nIf the `length` of the provided arguments is less than `n` throw an error.\nOtherwise, call `fn` with the proper amount of arguments, using `Array.slice(0, n)`.\nOmit the second argument, `n`, to uncurry up to depth `1`.\n\n```js\nconst uncurry = (fn, n = 1) => (...args) => {\n  const next = acc => args => args.reduce((x, y) => x(y), acc);\n  if (n > args.length) throw new RangeError('Arguments too few!');\n  return next(fn)(args.slice(0, n));\n};\n```\n\n```js\nconst add = x => y => z => x + y + z;\nconst uncurriedAdd = uncurry(add, 3);\nuncurriedAdd(1, 2, 3); // 6\n```\n","description":"### uncurry\n\nUncurries a function up to depth `n`.\n\nReturn a variadic function.\nUse `Array.reduce()` on the provided arguments to call each subsequent curry level of the function.\nIf the `length` of the provided arguments is less than `n` throw an error.\nOtherwise, call `fn` with the proper amount of arguments, using `Array.slice(0, n)`.\nOmit the second argument, `n`, to uncurry up to depth `1`.\n\n"},{"command":"unescapeHTML","code":"### unescapeHTML\n\nUnescapes escaped HTML characters.\n\nUse `String.replace()` with a regex that matches the characters that need to be unescaped, using a callback function to replace each escaped character instance with its associated unescaped character using a dictionary (object).\n\n```js\nconst unescapeHTML = str =>\n  str.replace(\n    /&amp;|&lt;|&gt;|&#39;|&quot;/g,\n    tag =>\n      ({\n        '&amp;': '&',\n        '&lt;': '<',\n        '&gt;': '>',\n        '&#39;': \"'\",\n        '&quot;': '\"'\n      }[tag] || tag)\n  );\n```\n\n```js\nunescapeHTML('&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;'); // '<a href=\"#\">Me & you</a>'\n```\n","description":"### unescapeHTML\n\nUnescapes escaped HTML characters.\n\nUse `String.replace()` with a regex that matches the characters that need to be unescaped, using a callback function to replace each escaped character instance with its associated unescaped character using a dictionary (object).\n\n"},{"command":"unflattenObject","code":"### unflattenObject\n\nUnlatten an object with the paths for keys.\n\nUse `Object.keys(obj)` combined with `Array.reduce()` to convert flattened path node to a leaf node.\nIf the value of a key contains a dot delimiter (`.`), use `Array.split('.')`, string transformations and `JSON.parse()` to create an object, then `Object.assign()` to create the leaf node.\nOtherwise, add the appropriate key-value pair to the accumulator object.\n\n```js\nconst unflattenObject = obj =>\n  Object.keys(obj).reduce((acc, k) => {\n    if (k.indexOf('.') !== -1) {\n      const keys = k.split('.');\n      Object.assign(\n        acc,\n        JSON.parse(\n          '{' +\n            keys.map((v, i) => (i !== keys.length - 1 ? `\"${v}\":{` : `\"${v}\":`)).join('') +\n            obj[k] +\n            '}'.repeat(keys.length)\n        )\n      );\n    } else acc[k] = obj[k];\n    return acc;\n  }, {});\n```\n\n```js\nunflattenObject({ 'a.b.c': 1, d: 1 }); // { a: { b: { c: 1 } }, d: 1 }\n```\n","description":"### unflattenObject\n\nUnlatten an object with the paths for keys.\n\nUse `Object.keys(obj)` combined with `Array.reduce()` to convert flattened path node to a leaf node.\nIf the value of a key contains a dot delimiter (`.`), use `Array.split('.')`, string transformations and `JSON.parse()` to create an object, then `Object.assign()` to create the leaf node.\nOtherwise, add the appropriate key-value pair to the accumulator object.\n\n"},{"command":"unfold","code":"### unfold\n\nBuilds an array, using an iterator function and an initial seed value.\n\nUse a `while` loop and `Array.push()` to call the function repeatedly until it returns `false`.\nThe iterator function accepts one argument (`seed`) and must always return an array with two elements ([`value`, `nextSeed`]) or `false` to terminate.\n\n```js\nconst unfold = (fn, seed) => {\n  let result = [],\n    val = [null, seed];\n  while ((val = fn(val[1]))) result.push(val[0]);\n  return result;\n};\n```\n\n```js\nvar f = n => (n > 50 ? false : [-n, n + 10]);\nunfold(f, 10); // [-10, -20, -30, -40, -50]\n```\n","description":"### unfold\n\nBuilds an array, using an iterator function and an initial seed value.\n\nUse a `while` loop and `Array.push()` to call the function repeatedly until it returns `false`.\nThe iterator function accepts one argument (`seed`) and must always return an array with two elements ([`value`, `nextSeed`]) or `false` to terminate.\n\n"},{"command":"union","code":"### union\n\nReturns every element that exists in any of the two arrays once.\n\nCreate a `Set` with all values of `a` and `b` and convert to an array.\n\n```js\nconst union = (a, b) => Array.from(new Set([...a, ...b]));\n```\n\n```js\nunion([1, 2, 3], [4, 3, 2]); // [1,2,3,4]\n```\n","description":"### union\n\nReturns every element that exists in any of the two arrays once.\n\nCreate a `Set` with all values of `a` and `b` and convert to an array.\n\n"},{"command":"unionBy","code":"### unionBy\n\nReturns every element that exists in any of the two arrays once, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying all `fn` to all values of `a`.\nCreate a `Set` from `a` and all elements in `b` whose value, after applying `fn` does not match a value in the previously created set.\nReturn the last set converted to an array.\n\n```js\nconst unionBy = (a, b, fn) => {\n  const s = new Set(a.map(v => fn(v)));\n  return Array.from(new Set([...a, ...b.filter(x => !s.has(fn(x)))]));\n};\n```\n\n```js\nunionBy([2.1], [1.2, 2.3], Math.floor); // [2.1, 1.2]\n```\n","description":"### unionBy\n\nReturns every element that exists in any of the two arrays once, after applying the provided function to each array element of both.\n\nCreate a `Set` by applying all `fn` to all values of `a`.\nCreate a `Set` from `a` and all elements in `b` whose value, after applying `fn` does not match a value in the previously created set.\nReturn the last set converted to an array.\n\n"},{"command":"unionWith","code":"### unionWith\n\nReturns every element that exists in any of the two arrays once, using a provided comparator function.\n\nCreate a `Set` with all values of `a` and values in `b` for which the comparator finds no matches in `a`, using `Array.findIndex()`.\n\n```js\nconst unionWith = (a, b, comp) =>\n  Array.from(new Set([...a, ...b.filter(x => a.findIndex(y => comp(x, y)) === -1)]));\n```\n\n```js\nunionWith([1, 1.2, 1.5, 3, 0], [1.9, 3, 0, 3.9], (a, b) => Math.round(a) === Math.round(b)); // [1, 1.2, 1.5, 3, 0, 3.9]\n```\n","description":"### unionWith\n\nReturns every element that exists in any of the two arrays once, using a provided comparator function.\n\nCreate a `Set` with all values of `a` and values in `b` for which the comparator finds no matches in `a`, using `Array.findIndex()`.\n\n"},{"command":"uniqueElements","code":"### uniqueElements\n\nReturns all unique values of an array.\n\nUse ES6 `Set` and the `...rest` operator to discard all duplicated values.\n\n```js\nconst uniqueElements = arr => [...new Set(arr)];\n```\n\n```js\nuniqueElements([1, 2, 2, 3, 4, 4, 5]); // [1,2,3,4,5]\n```\n","description":"### uniqueElements\n\nReturns all unique values of an array.\n\nUse ES6 `Set` and the `...rest` operator to discard all duplicated values.\n\n"},{"command":"untildify","code":"### untildify\n\nConverts a tilde path to an absolute path.\n\nUse `String.replace()` with a regular expression and `OS.homedir()` to replace the `~` in the start of the path with the home directory.\n\n```js\nconst untildify = str => str.replace(/^~($|\\/|\\\\)/, `${require('os').homedir()}$1`);\n```\n\n```js\nuntildify('~/node'); // '/Users/aUser/node'\n```\n","description":"### untildify\n\nConverts a tilde path to an absolute path.\n\nUse `String.replace()` with a regular expression and `OS.homedir()` to replace the `~` in the start of the path with the home directory.\n\n"},{"command":"unzip","code":"### unzip\n\nCreates an array of arrays, ungrouping the elements in an array produced by [zip](#zip).\n\nUse `Math.max.apply()` to get the longest subarray in the array, `Array.map()` to make each element an array.\nUse `Array.reduce()` and `Array.forEach()` to map grouped values to individual arrays.\n\n```js\nconst unzip = arr =>\n  arr.reduce(\n    (acc, val) => (val.forEach((v, i) => acc[i].push(v)), acc),\n    Array.from({\n      length: Math.max(...arr.map(x => x.length))\n    }).map(x => [])\n  );\n```\n\n```js\nunzip([['a', 1, true], ['b', 2, false]]); //[['a', 'b'], [1, 2], [true, false]]\nunzip([['a', 1, true], ['b', 2]]); //[['a', 'b'], [1, 2], [true]]\n```\n","description":"### unzip\n\nCreates an array of arrays, ungrouping the elements in an array produced by [zip](#zip).\n\nUse `Math.max.apply()` to get the longest subarray in the array, `Array.map()` to make each element an array.\nUse `Array.reduce()` and `Array.forEach()` to map grouped values to individual arrays.\n\n"},{"command":"unzipWith","code":"### unzipWith\n\nCreates an array of elements, ungrouping the elements in an array produced by [zip](#zip) and applying the provided function.\n\nUse `Math.max.apply()` to get the longest subarray in the array, `Array.map()` to make each element an array.\nUse `Array.reduce()` and `Array.forEach()` to map grouped values to individual arrays.\nUse `Array.map()` and the spread operator (`...`) to apply `fn` to each individual group of elements.\n\n```js\nconst unzipWith = (arr, fn) =>\n  arr\n    .reduce(\n      (acc, val) => (val.forEach((v, i) => acc[i].push(v)), acc),\n      Array.from({\n        length: Math.max(...arr.map(x => x.length))\n      }).map(x => [])\n    )\n    .map(val => fn(...val));\n```\n\n```js\nunzipWith([[1, 10, 100], [2, 20, 200]], (...args) => args.reduce((acc, v) => acc + v, 0)); // [3, 30, 300]\n```\n","description":"### unzipWith\n\nCreates an array of elements, ungrouping the elements in an array produced by [zip](#zip) and applying the provided function.\n\nUse `Math.max.apply()` to get the longest subarray in the array, `Array.map()` to make each element an array.\nUse `Array.reduce()` and `Array.forEach()` to map grouped values to individual arrays.\nUse `Array.map()` and the spread operator (`...`) to apply `fn` to each individual group of elements.\n\n"},{"command":"validateNumber","code":"### validateNumber\n\nReturns `true` if the given value is a number, `false` otherwise.\n\nUse `!isNaN()` in combination with `parseFloat()` to check if the argument is a number.\nUse `isFinite()` to check if the number is finite.\nUse `Number()` to check if the coercion holds.\n\n```js\nconst validateNumber = n => !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n;\n```\n\n```js\nvalidateNumber('10'); // true\n```\n","description":"### validateNumber\n\nReturns `true` if the given value is a number, `false` otherwise.\n\nUse `!isNaN()` in combination with `parseFloat()` to check if the argument is a number.\nUse `isFinite()` to check if the number is finite.\nUse `Number()` to check if the coercion holds.\n\n"},{"command":"without","code":"### without\n\nFilters out the elements of an array, that have one of the specified values.\n\nUse `Array.filter()` to create an array excluding(using `!Array.includes()`) all given values.\n\n_(For a snippet that mutates the original array see [`pull`](#pull))_\n\n```js\nconst without = (arr, ...args) => arr.filter(v => !args.includes(v));\n```\n\n```js\nwithout([2, 1, 2, 3], 1, 2); // [3]\n```\n","description":"### without\n\nFilters out the elements of an array, that have one of the specified values.\n\nUse `Array.filter()` to create an array excluding(using `!Array.includes()`) all given values.\n\n_(For a snippet that mutates the original array see [`pull`](#pull))_\n\n"},{"command":"words","code":"### words\n\nConverts a given string into an array of words.\n\nUse `String.split()` with a supplied pattern (defaults to non-alpha as a regexp) to convert to an array of strings. Use `Array.filter()` to remove any empty strings.\nOmit the second argument to use the default regexp.\n\n```js\nconst words = (str, pattern = /[^a-zA-Z-]+/) => str.split(pattern).filter(Boolean);\n```\n\n```js\nwords('I love javaScript!!'); // [\"I\", \"love\", \"javaScript\"]\nwords('python, javaScript & coffee'); // [\"python\", \"javaScript\", \"coffee\"]\n```\n","description":"### words\n\nConverts a given string into an array of words.\n\nUse `String.split()` with a supplied pattern (defaults to non-alpha as a regexp) to convert to an array of strings. Use `Array.filter()` to remove any empty strings.\nOmit the second argument to use the default regexp.\n\n"},{"command":"xProd","code":"### xProd\n\nCreates a new array out of the two supplied by creating each possible pair from the arrays.\n\nUse `Array.reduce()`, `Array.map()` and `Array.concat()` to produce every possible pair from the elements of the two arrays and save them in an array.\n\n```js\nconst xProd = (a, b) => a.reduce((acc, x) => acc.concat(b.map(y => [x, y])), []);\n```\n\n```js\nxProd([1, 2], ['a', 'b']); // [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n```\n","description":"### xProd\n\nCreates a new array out of the two supplied by creating each possible pair from the arrays.\n\nUse `Array.reduce()`, `Array.map()` and `Array.concat()` to produce every possible pair from the elements of the two arrays and save them in an array.\n\n"},{"command":"yesNo","code":"### yesNo\n\nReturns `true` if the string is `y`/`yes` or `false` if the string is `n`/`no`.\n\nUse `RegExp.test()` to check if the string evaluates to `y/yes` or `n/no`.\nOmit the second argument, `def` to set the default answer as `no`.\n\n```js\nconst yesNo = (val, def = false) =>\n  /^(y|yes)$/i.test(val) ? true : /^(n|no)$/i.test(val) ? false : def;\n```\n\n```js\nyesNo('Y'); // true\nyesNo('yes'); // true\nyesNo('No'); // false\nyesNo('Foo', true); // true\n```\n","description":"### yesNo\n\nReturns `true` if the string is `y`/`yes` or `false` if the string is `n`/`no`.\n\nUse `RegExp.test()` to check if the string evaluates to `y/yes` or `n/no`.\nOmit the second argument, `def` to set the default answer as `no`.\n\n"},{"command":"zip","code":"### zip\n\nCreates an array of elements, grouped based on the position in the original arrays.\n\nUse `Math.max.apply()` to get the longest array in the arguments.\nCreates an array with that length as return value and use `Array.from()` with a map-function to create an array of grouped elements.\nIf lengths of the argument-arrays vary, `undefined` is used where no value could be found.\n\n```js\nconst zip = (...arrays) => {\n  const maxLength = Math.max(...arrays.map(x => x.length));\n  return Array.from({ length: maxLength }).map((_, i) => {\n    return Array.from({ length: arrays.length }, (_, k) => arrays[k][i]);\n  });\n};\n```\n\n```js\nzip(['a', 'b'], [1, 2], [true, false]); // [['a', 1, true], ['b', 2, false]]\nzip(['a'], [1, 2], [true, false]); // [['a', 1, true], [undefined, 2, false]]\n```\n","description":"### zip\n\nCreates an array of elements, grouped based on the position in the original arrays.\n\nUse `Math.max.apply()` to get the longest array in the arguments.\nCreates an array with that length as return value and use `Array.from()` with a map-function to create an array of grouped elements.\nIf lengths of the argument-arrays vary, `undefined` is used where no value could be found.\n\n"},{"command":"zipObject","code":"### zipObject\n\nGiven an array of valid property identifiers and an array of values, return an object associating the properties to the values.\n\nSince an object can have undefined values but not undefined property pointers, the array of properties is used to decide the structure of the resulting object using `Array.reduce()`.\n\n```js\nconst zipObject = (props, values) =>\n  props.reduce((obj, prop, index) => ((obj[prop] = values[index]), obj), {});\n```\n\n```js\nzipObject(['a', 'b', 'c'], [1, 2]); // {a: 1, b: 2, c: undefined}\nzipObject(['a', 'b'], [1, 2, 3]); // {a: 1, b: 2}\n```\n","description":"### zipObject\n\nGiven an array of valid property identifiers and an array of values, return an object associating the properties to the values.\n\nSince an object can have undefined values but not undefined property pointers, the array of properties is used to decide the structure of the resulting object using `Array.reduce()`.\n\n"},{"command":"zipWith","code":"### zipWith\n\nCreates an array of elements, grouped based on the position in the original arrays and using function as the last value to specify how grouped values should be combined.\n\nCheck if the last argument provided is a function.\nUse `Math.max()` to get the longest array in the arguments.\nCreates an array with that length as return value and use `Array.from()` with a map-function to create an array of grouped elements.\nIf lengths of the argument-arrays vary, `undefined` is used where no value could be found.\nThe function is invoked with the elements of each group `(...group)`.\n\n```js\nconst zipWith = (...array) => {\n  const fn = typeof array[array.length - 1] === 'function' ? array.pop() : undefined;\n  return Array.from(\n    { length: Math.max(...array.map(a => a.length)) },\n    (_, i) => (fn ? fn(...array.map(a => a[i])) : array.map(a => a[i]))\n  );\n};\n```\n\n```js\nzipWith([1, 2], [10, 20], [100, 200], (a, b, c) => a + b + c); // [111,222]\nzipWith(\n  [1, 2, 3],\n  [10, 20],\n  [100, 200],\n  (a, b, c) => (a != null ? a : 'a') + (b != null ? b : 'b') + (c != null ? c : 'c')\n); // [111, 222, '3bc']\n```\n","description":"### zipWith\n\nCreates an array of elements, grouped based on the position in the original arrays and using function as the last value to specify how grouped values should be combined.\n\nCheck if the last argument provided is a function.\nUse `Math.max()` to get the longest array in the arguments.\nCreates an array with that length as return value and use `Array.from()` with a map-function to create an array of grouped elements.\nIf lengths of the argument-arrays vary, `undefined` is used where no value could be found.\nThe function is invoked with the elements of each group `(...group)`.\n\n"}]